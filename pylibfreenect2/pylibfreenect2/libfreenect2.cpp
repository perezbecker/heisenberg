/* Generated by Cython 0.27.1 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/home/danok/freenect2/include/libfreenect2/frame_listener.hpp", 
            "/home/danok/freenect2/include/libfreenect2/frame_listener_impl.h", 
            "/home/danok/freenect2/include/libfreenect2/libfreenect2.hpp", 
            "/home/danok/freenect2/include/libfreenect2/logger.h", 
            "/home/danok/freenect2/include/libfreenect2/packet_pipeline.h", 
            "/home/danok/freenect2/include/libfreenect2/registration.h", 
            "/usr/local/lib/python2.7/dist-packages/numpy/core/include/numpy/arrayobject.h", 
            "/usr/local/lib/python2.7/dist-packages/numpy/core/include/numpy/ufuncobject.h"
        ], 
        "extra_compile_args": [
            "-std=c++11"
        ], 
        "include_dirs": [
            "/usr/local/lib/python2.7/dist-packages/numpy/core/include", 
            "/home/danok/freenect2/include"
        ], 
        "language": "c++", 
        "libraries": [
            "freenect2"
        ], 
        "library_dirs": [
            "/home/danok/freenect2/lib"
        ], 
        "name": "pylibfreenect2.libfreenect2", 
        "sources": [
            "pylibfreenect2/libfreenect2.pyx"
        ]
    }, 
    "module_name": "pylibfreenect2.libfreenect2"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_27_1"
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX < 0x030700A0 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject **args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #ifdef __cplusplus
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough) || (defined(__GNUC__) && defined(__attribute__))
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pylibfreenect2__libfreenect2
#define __PYX_HAVE_API__pylibfreenect2__libfreenect2
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <map>
#include <stdint.h>
#include "libfreenect2/frame_listener.hpp"
#include "libfreenect2/frame_listener_impl.h"
#include "libfreenect2/libfreenect2.hpp"
#include "libfreenect2/registration.h"
#include "libfreenect2/packet_pipeline.h"
#include "libfreenect2/logger.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "pylibfreenect2/libfreenect2.pyx",
  "stringsource",
  "pylibfreenect2/opengl_packet_pipeline.pxi",
  "__init__.pxd",
  "type.pxd",
};
/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":743
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":744
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":745
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":746
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":750
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":751
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":752
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":757
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":758
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":767
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":768
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":769
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":771
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":772
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":773
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":775
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":776
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":778
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":779
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":780
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame;
struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameListener;
struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap;
struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener;
struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams;
struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams;
struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration;
struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger;
struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline;
struct __pyx_obj_14pylibfreenect2_12libfreenect2_CpuPacketPipeline;
struct __pyx_obj_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline;
struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device;
struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":782
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":783
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":784
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":786
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "pylibfreenect2/libfreenect2.pyx":162
 * # Workaround for use of pointer type in reinterpret_cast
 * # https://groups.google.com/forum/#!msg/cython-users/FgEf7Vrx4AM/dm7WY_bMCAAJ
 * ctypedef uint8_t* uint8_pt             # <<<<<<<<<<<<<<
 * 
 * # Import libfreenect2 definitions
 */
typedef uint8_t *__pyx_t_14pylibfreenect2_12libfreenect2_uint8_pt;

/* "pylibfreenect2/libfreenect2.pyx":178
 * from pylibfreenect2 import FrameType
 * 
 * cdef class Frame:             # <<<<<<<<<<<<<<
 *     """Python interface for ``libfreenect2::Frame``.
 * 
 */
struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame {
  PyObject_HEAD
  struct __pyx_vtabstruct_14pylibfreenect2_12libfreenect2_Frame *__pyx_vtab;
  libfreenect2::Frame *ptr;
  bool take_ownership;
  int frame_type;
};


/* "pylibfreenect2/libfreenect2.pyx":373
 *             return self.__asarray(dtype)
 * 
 * cdef class FrameListener:             # <<<<<<<<<<<<<<
 *     cdef libfreenect2.FrameListener* listener_ptr_alias
 * 
 */
struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameListener {
  PyObject_HEAD
  libfreenect2::FrameListener *listener_ptr_alias;
};


/* "pylibfreenect2/libfreenect2.pyx":402
 * 
 * 
 * cdef class FrameMap:             # <<<<<<<<<<<<<<
 *     """Python interface for ``libfreenect2::FrameMap``.
 * 
 */
struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap {
  PyObject_HEAD
  std::map<enum libfreenect2::Frame::Type,libfreenect2::Frame *>  internal_frame_map;
  bool take_ownership;
};


/* "pylibfreenect2/libfreenect2.pyx":496
 * 
 * 
 * cdef class SyncMultiFrameListener(FrameListener):             # <<<<<<<<<<<<<<
 *     """Python interface for ``libfreenect2::SyncMultiFrameListener``.
 * 
 */
struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener {
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameListener __pyx_base;
  libfreenect2::SyncMultiFrameListener *ptr;
};


/* "pylibfreenect2/libfreenect2.pyx":616
 * 
 * 
 * cdef class ColorCameraParams:             # <<<<<<<<<<<<<<
 *     """Python interface for ``libfreenect2::Freenect2Device::ColorCameraParams``.
 * 
 */
struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams {
  PyObject_HEAD
  libfreenect2::Freenect2Device::ColorCameraParams params;
};


/* "pylibfreenect2/libfreenect2.pyx":651
 * 
 * 
 * cdef class IrCameraParams:             # <<<<<<<<<<<<<<
 *     """Python interface for ``libfreenect2::IrCameraParams``.
 * 
 */
struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams {
  PyObject_HEAD
  libfreenect2::Freenect2Device::IrCameraParams params;
};


/* "pylibfreenect2/libfreenect2.pyx":684
 *         return self.params.cy
 * 
 * cdef class Registration:             # <<<<<<<<<<<<<<
 *     """Python interface for ``libfreenect2::Registration``.
 * 
 */
struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration {
  PyObject_HEAD
  libfreenect2::Registration *ptr;
};


/* "pylibfreenect2/libfreenect2.pyx":882
 * 
 * 
 * cdef class Logger:             # <<<<<<<<<<<<<<
 *     """Python interface for libfreenect2::Logger
 * 
 */
struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger {
  PyObject_HEAD
  libfreenect2::Logger *ptr;
};


/* "pylibfreenect2/libfreenect2.pyx":980
 * 
 * # MUST be declared before backend specific includes
 * cdef class PacketPipeline:             # <<<<<<<<<<<<<<
 *     """Base class for other pipeline classes.
 * 
 */
struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline {
  PyObject_HEAD
  libfreenect2::PacketPipeline *pipeline_ptr_alias;
  bool owned_by_device;
};


/* "pylibfreenect2/libfreenect2.pyx":1002
 * 
 * 
 * cdef class CpuPacketPipeline(PacketPipeline):             # <<<<<<<<<<<<<<
 *     """Pipeline with CPU depth processing.
 * 
 */
struct __pyx_obj_14pylibfreenect2_12libfreenect2_CpuPacketPipeline {
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline __pyx_base;
  libfreenect2::CpuPacketPipeline *pipeline;
};


/* "pylibfreenect2/opengl_packet_pipeline.pxi":1
 * cdef class OpenGLPacketPipeline(PacketPipeline):             # <<<<<<<<<<<<<<
 *     """Pipeline with OpenGL depth processing.
 * 
 */
struct __pyx_obj_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline {
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline __pyx_base;
  libfreenect2::OpenGLPacketPipeline *pipeline;
};


/* "pylibfreenect2/libfreenect2.pyx":1028
 *     # include "opencl_kde_packet_pipeline.pxi"
 * 
 * cdef class Freenect2Device:             # <<<<<<<<<<<<<<
 *     """Python interface for ``libfreenect2::Freenect2Device``.
 * 
 */
struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device {
  PyObject_HEAD
  libfreenect2::Freenect2Device *ptr;
};


/* "pylibfreenect2/libfreenect2.pyx":1124
 * 
 * 
 * cdef class Freenect2:             # <<<<<<<<<<<<<<
 *     """Python interface for ``libfreenect2::Freenect2``.
 * 
 */
struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 {
  PyObject_HEAD
  struct __pyx_vtabstruct_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_vtab;
  libfreenect2::Freenect2 *ptr;
};



/* "pylibfreenect2/libfreenect2.pyx":178
 * from pylibfreenect2 import FrameType
 * 
 * cdef class Frame:             # <<<<<<<<<<<<<<
 *     """Python interface for ``libfreenect2::Frame``.
 * 
 */

struct __pyx_vtabstruct_14pylibfreenect2_12libfreenect2_Frame {
  PyObject *(*__pyx___uint8_data)(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *);
  PyObject *(*__pyx___float32_data)(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *);
};
static struct __pyx_vtabstruct_14pylibfreenect2_12libfreenect2_Frame *__pyx_vtabptr_14pylibfreenect2_12libfreenect2_Frame;


/* "pylibfreenect2/libfreenect2.pyx":1124
 * 
 * 
 * cdef class Freenect2:             # <<<<<<<<<<<<<<
 *     """Python interface for ``libfreenect2::Freenect2``.
 * 
 */

struct __pyx_vtabstruct_14pylibfreenect2_12libfreenect2_Freenect2 {
  PyObject *(*__pyx___openDevice__intidx)(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *, int, struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *);
  PyObject *(*__pyx___openDevice__stridx)(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *, std::string, struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *);
};
static struct __pyx_vtabstruct_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_vtabptr_14pylibfreenect2_12libfreenect2_Freenect2;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

#define __Pyx_BufPtrCContig1d(type, buf, i0, s0) ((type)buf + i0)
/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
static int __Pyx_CLineForTraceback(int c_line);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__libfreenect2_3a__3a_Frame_3a__3a_Type(enum libfreenect2::Frame::Type value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint8_t(uint8_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__libfreenect2_3a__3a_Logger_3a__3a_Level(enum libfreenect2::Logger::Level value);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum libfreenect2::Frame::Type __Pyx_PyInt_As_enum__libfreenect2_3a__3a_Frame_3a__3a_Type(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum libfreenect2::Logger::Level __Pyx_PyInt_As_enum__libfreenect2_3a__3a_Logger_3a__3a_Level(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_14pylibfreenect2_12libfreenect2_5Frame___uint8_data(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_14pylibfreenect2_12libfreenect2_5Frame___float32_data(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_14pylibfreenect2_12libfreenect2_9Freenect2___openDevice__intidx(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_v_self, int __pyx_v_idx, struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *__pyx_v_pipeline); /* proto*/
static PyObject *__pyx_f_14pylibfreenect2_12libfreenect2_9Freenect2___openDevice__stridx(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_v_self, std::string __pyx_v_serial, struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *__pyx_v_pipeline); /* proto*/

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/
static CYTHON_INLINE int __pyx_f_5numpy_import_array(void); /*proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp.cast' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'pylibfreenect2.libfreenect2.libfreenect2' */

/* Module declarations from 'pylibfreenect2.libfreenect2' */
static PyTypeObject *__pyx_ptype_14pylibfreenect2_12libfreenect2_Frame = 0;
static PyTypeObject *__pyx_ptype_14pylibfreenect2_12libfreenect2_FrameListener = 0;
static PyTypeObject *__pyx_ptype_14pylibfreenect2_12libfreenect2_FrameMap = 0;
static PyTypeObject *__pyx_ptype_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener = 0;
static PyTypeObject *__pyx_ptype_14pylibfreenect2_12libfreenect2_ColorCameraParams = 0;
static PyTypeObject *__pyx_ptype_14pylibfreenect2_12libfreenect2_IrCameraParams = 0;
static PyTypeObject *__pyx_ptype_14pylibfreenect2_12libfreenect2_Registration = 0;
static PyTypeObject *__pyx_ptype_14pylibfreenect2_12libfreenect2_Logger = 0;
static PyTypeObject *__pyx_ptype_14pylibfreenect2_12libfreenect2_PacketPipeline = 0;
static PyTypeObject *__pyx_ptype_14pylibfreenect2_12libfreenect2_CpuPacketPipeline = 0;
static PyTypeObject *__pyx_ptype_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline = 0;
static PyTypeObject *__pyx_ptype_14pylibfreenect2_12libfreenect2_Freenect2Device = 0;
static PyTypeObject *__pyx_ptype_14pylibfreenect2_12libfreenect2_Freenect2 = 0;
static PyObject *__pyx_f_14pylibfreenect2_12libfreenect2_intenum_to_frame_type(int); /*proto*/
static PyObject *__pyx_f_14pylibfreenect2_12libfreenect2_str_to_int_frame_type(PyObject *); /*proto*/
static PyObject *__pyx_f_14pylibfreenect2_12libfreenect2_str_to_frame_type(PyObject *); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t = { "int32_t", NULL, sizeof(__pyx_t_5numpy_int32_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int32_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int32_t), 0 };
#define __Pyx_MODULE_NAME "pylibfreenect2.libfreenect2"
int __pyx_module_is_main_pylibfreenect2__libfreenect2 = 0;

/* Implementation of 'pylibfreenect2.libfreenect2' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_c[] = "c";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_Ir[] = "Ir";
static const char __pyx_k__9[] = "";
static const char __pyx_k_ir[] = "ir";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_ptr[] = "ptr";
static const char __pyx_k_rgb[] = "rgb";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_Color[] = "Color";
static const char __pyx_k_Depth[] = "Depth";
static const char __pyx_k_color[] = "color";
static const char __pyx_k_debug[] = "debug";
static const char __pyx_k_depth[] = "depth";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_level[] = "level";
static const char __pyx_k_lower[] = "lower";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_uint8[] = "uint8";
static const char __pyx_k_width[] = "width";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_height[] = "height";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_logger[] = "logger";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_asarray[] = "__asarray";
static const char __pyx_k_cparams[] = "cparams";
static const char __pyx_k_float32[] = "float32";
static const char __pyx_k_message[] = "message";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_bigdepth[] = "bigdepth";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_irparams[] = "irparams";
static const char __pyx_k_pipeline[] = "pipeline";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_FrameType[] = "FrameType";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_frame_map[] = "frame_map";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_frame_type[] = "frame_type";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_registered[] = "registered";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_frame_types[] = "frame_types";
static const char __pyx_k_undistorted[] = "undistorted";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_Not_supported[] = "Not supported";
static const char __pyx_k_enable_filter[] = "enable_filter";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_pylibfreenect2[] = "pylibfreenect2";
static const char __pyx_k_take_ownership[] = "take_ownership";
static const char __pyx_k_bytes_per_pixel[] = "bytes_per_pixel";
static const char __pyx_k_color_depth_map[] = "color_depth_map";
static const char __pyx_k_getGlobalLogger[] = "getGlobalLogger";
static const char __pyx_k_setGlobalLogger[] = "setGlobalLogger";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_createConsoleLogger[] = "createConsoleLogger";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_pylibfreenect2_libfreenect2[] = "pylibfreenect2.libfreenect2";
static const char __pyx_k_API_important_Python_API_s_are[] = "\nAPI\n===\n\n.. important::\n    Python API's are designed to minimize differences in C++ and Python; i.e. all\n    classes and methods should have the same name; function signatures should\n    also be same as possible. For the slight differences, see below in details.\n\n\nAll functionality in ``pylibfreenect2.libfreenect2`` is directly accesible from\nthe top-level ``pylibfreenect2.*`` namespace.\n\nThe sections below are organized by following\n`the offical docs <https://openkinect.github.io/libfreenect2/modules.html>`_.\n\n\nFrame Listeners\n---------------\n\nFrameType\n^^^^^^^^^\n\n.. autoclass:: pylibfreenect2.FrameType\n    :members:\n\nFrame\n^^^^^\n\n.. autoclass:: Frame\n    :members:\n\nFrameMap\n^^^^^^^^\n\n.. autoclass:: FrameMap\n    :members:\n    :special-members: __getitem__\n\nSyncMultiFrameListener\n^^^^^^^^^^^^^^^^^^^^^^\n\n.. autoclass:: SyncMultiFrameListener\n    :members:\n\nInitialization and Device Control\n---------------------------------\n\nFreenect2Device\n^^^^^^^^^^^^^^^\n\n.. autoclass:: Freenect2Device\n    :members:\n\nFreenect2\n^^^^^^^^^\n\n.. autoclass:: Freenect2\n    :members:\n\nColorCameraParams\n^^^^^^^^^^^^^^^^^\n\n.. autoclass:: ColorCameraParams\n    :members:\n\nIrCameraParams\n^^^^^^^^^^^^^^\n\n.. autoclass:: IrCameraParams\n    :members:\n\nLogging utilities\n-----------------\n\nLoggerLevel\n^^^^^^^^^^^\n\n.. autoclass:: pylibfreenect2.LoggerLevel\n    :members:\n\nLogger\n^^^^^^\n\n.. autoclass:: Logger\n    :members:\n\nFunctions\n^^^^^^^^^\n\n.. autosummary::\n    :toctree: generated/\n\n    createConsoleLogger\n    createConsoleLoggerWithDefaultLevel\n    getGlobalLogger\n    setGlobalLogger\n\nPacket Pipelines\n----------------\n\nPacketPipeline\n^^^^^^^^^^^^^^\n\n.. autoclass:: PacketPipeline\n    :members:\n\nCpuPacketPipeline\n^^^^^^^^^^^^^^^^^\n\n.. autoclass:: CpuPacketPipeline\n    :members:\n\nOpenCLPacketPipeline\n^^^^^^^^^^^^^^^^^^^^\n\n.. autoclass:: OpenCLPacketPipeline\n    :members:\n\nOpenCLKdePa""cketPipeline\n^^^^^^^^^^^^^^^^^^^^^^^\n\n.. autoclass:: OpenCLKdePacketPipeline\n    :members:\n\nOpenGLPacketPipeline\n^^^^^^^^^^^^^^^^^^^^\n\n.. autoclass:: OpenGLPacketPipeline\n    :members:\n\nRegistration and Geometry\n-------------------------\n\nRegistration\n^^^^^^^^^^^^\n\n.. autoclass:: Registration\n    :members:\n";
static const char __pyx_k_Shape_of_undistorted_frame_x_is[] = "Shape of undistorted frame {}x{} is invalid. Expected 512x424.";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_pylibfreenect2_libfreenect2_pyx[] = "pylibfreenect2/libfreenect2.pyx";
static const char __pyx_k_self_params_cannot_be_converted[] = "self.params cannot be converted to a Python object for pickling";
static const char __pyx_k_self_ptr_cannot_be_converted_to[] = "self.ptr cannot be converted to a Python object for pickling";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_Cannot_determine_type_of_data_Sp[] = "Cannot determine type of data. Specify dtype explicitly.";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_Shape_of_bigdepth_frame_x_is_inv[] = "Shape of bigdepth frame {}x{} is invalid. Expected 1920x1082.";
static const char __pyx_k_Shape_of_color_depth_map_array_i[] = "Shape of color_depth_map array ({},) is invalid. Expected (424*512,)";
static const char __pyx_k_Shape_of_color_frame_x_is_invali[] = "Shape of color frame {}x{} is invalid. Expected 1920x1080.";
static const char __pyx_k_Shape_of_depth_frame_x_is_invali[] = "Shape of depth frame {}x{} is invalid. Expected 512x424.";
static const char __pyx_k_Shape_of_registered_frame_x_is_i[] = "Shape of registered frame {}x{} is invalid. Expected 512x424.";
static const char __pyx_k_createConsoleLoggerWithDefaultLe[] = "createConsoleLoggerWithDefaultLevel";
static const char __pyx_k_device_name_must_be_of_str_bytes[] = "device name must be of str, bytes or integer type";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_np_uint8_or_np_float32_is_only_s[] = "np.uint8 or np.float32 is only supported";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_self_listener_ptr_alias_cannot_b[] = "self.listener_ptr_alias cannot be converted to a Python object for pickling";
static const char __pyx_k_self_pipeline_ptr_alias_cannot_b[] = "self.pipeline_ptr_alias cannot be converted to a Python object for pickling";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_kp_s_Cannot_determine_type_of_data_Sp;
static PyObject *__pyx_n_s_Color;
static PyObject *__pyx_n_s_Depth;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_FrameType;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_Ir;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_kp_s_Not_supported;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_kp_s_Shape_of_bigdepth_frame_x_is_inv;
static PyObject *__pyx_kp_s_Shape_of_color_depth_map_array_i;
static PyObject *__pyx_kp_s_Shape_of_color_frame_x_is_invali;
static PyObject *__pyx_kp_s_Shape_of_depth_frame_x_is_invali;
static PyObject *__pyx_kp_s_Shape_of_registered_frame_x_is_i;
static PyObject *__pyx_kp_s_Shape_of_undistorted_frame_x_is;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s__9;
static PyObject *__pyx_n_s_asarray;
static PyObject *__pyx_n_s_bigdepth;
static PyObject *__pyx_n_s_bytes_per_pixel;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_color;
static PyObject *__pyx_n_s_color_depth_map;
static PyObject *__pyx_n_s_cparams;
static PyObject *__pyx_n_s_createConsoleLogger;
static PyObject *__pyx_n_s_createConsoleLoggerWithDefaultLe;
static PyObject *__pyx_n_s_debug;
static PyObject *__pyx_n_s_depth;
static PyObject *__pyx_kp_s_device_name_must_be_of_str_bytes;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_enable_filter;
static PyObject *__pyx_n_s_float32;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_frame_map;
static PyObject *__pyx_n_s_frame_type;
static PyObject *__pyx_n_s_frame_types;
static PyObject *__pyx_n_s_getGlobalLogger;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_height;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_ir;
static PyObject *__pyx_n_s_irparams;
static PyObject *__pyx_n_s_level;
static PyObject *__pyx_n_s_logger;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_message;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_kp_s_np_uint8_or_np_float32_is_only_s;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_pipeline;
static PyObject *__pyx_n_s_ptr;
static PyObject *__pyx_n_s_pylibfreenect2;
static PyObject *__pyx_n_s_pylibfreenect2_libfreenect2;
static PyObject *__pyx_kp_s_pylibfreenect2_libfreenect2_pyx;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_registered;
static PyObject *__pyx_n_s_rgb;
static PyObject *__pyx_kp_s_self_listener_ptr_alias_cannot_b;
static PyObject *__pyx_kp_s_self_params_cannot_be_converted;
static PyObject *__pyx_kp_s_self_pipeline_ptr_alias_cannot_b;
static PyObject *__pyx_kp_s_self_ptr_cannot_be_converted_to;
static PyObject *__pyx_n_s_setGlobalLogger;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_take_ownership;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_uint8;
static PyObject *__pyx_n_s_undistorted;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_width;
static int __pyx_pf_14pylibfreenect2_12libfreenect2_5Frame___cinit__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height, PyObject *__pyx_v_bytes_per_pixel, int __pyx_v_frame_type); /* proto */
static void __pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_2__dealloc__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_9timestamp___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_8sequence___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_5width___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_6height___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_15bytes_per_pixel___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_8exposure___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_4gain___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_5gamma___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_4__asarray(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self, PyObject *__pyx_v_dtype); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_6asarray(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self, PyObject *__pyx_v_dtype); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_13FrameListener___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameListener *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_13FrameListener_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameListener *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14pylibfreenect2_12libfreenect2_8FrameMap___cinit__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *__pyx_v_self, bool __pyx_v_take_ownership); /* proto */
static void __pyx_pf_14pylibfreenect2_12libfreenect2_8FrameMap_2__dealloc__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_8FrameMap_4__getitem__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_8FrameMap_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_8FrameMap_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener___cinit__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener *__pyx_v_self, unsigned int __pyx_v_frame_types); /* proto */
static void __pyx_pf_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_2__dealloc__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_4hasNewFrame(struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_6waitForNewFrame(struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener *__pyx_v_self, struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *__pyx_v_frame_map); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_8release(struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener *__pyx_v_self, struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *__pyx_v_frame_map); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2fx___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2fy___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2cx___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2cy___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_17ColorCameraParams___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_14IrCameraParams_2fx___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_14IrCameraParams_2fy___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_14IrCameraParams_2cx___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_14IrCameraParams_2cy___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_14IrCameraParams___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_14IrCameraParams_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14pylibfreenect2_12libfreenect2_12Registration___cinit__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *__pyx_v_self, struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *__pyx_v_irparams, struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *__pyx_v_cparams); /* proto */
static void __pyx_pf_14pylibfreenect2_12libfreenect2_12Registration_2__dealloc__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_12Registration_4apply(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *__pyx_v_self, struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_rgb, struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_depth, struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_undistorted, struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_registered, PyObject *__pyx_v_enable_filter, struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_bigdepth, PyArrayObject *__pyx_v_color_depth_map); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_12Registration_6undistortDepth(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *__pyx_v_self, struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_depth, struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_undistorted); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_12Registration_8getPointXYZRGB(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *__pyx_v_self, struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_undistorted, struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_registered, PyObject *__pyx_v_r, PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_12Registration_10getPointXYZ(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *__pyx_v_self, struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_undistorted, PyObject *__pyx_v_r, PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_12Registration_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_12Registration_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_6Logger_level(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_6Logger_2log(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *__pyx_v_self, PyObject *__pyx_v_level, PyObject *__pyx_v_message); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_6Logger_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_6Logger_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_createConsoleLogger(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_level); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_2createConsoleLoggerWithDefaultLevel(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_4getGlobalLogger(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_6setGlobalLogger(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *__pyx_v_logger); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_14PacketPipeline___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_14PacketPipeline_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline___cinit__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_CpuPacketPipeline *__pyx_v_self); /* proto */
static void __pyx_pf_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline_2__dealloc__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_CpuPacketPipeline *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_CpuPacketPipeline *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_CpuPacketPipeline *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline___cinit__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline *__pyx_v_self, bool __pyx_v_debug); /* proto */
static void __pyx_pf_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline_2__dealloc__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_getSerialNumber(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_2getFirmwareVersion(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_4getColorCameraParams(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_6getIrCameraParams(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_8setColorFrameListener(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self, struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameListener *__pyx_v_listener); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_10setIrAndDepthFrameListener(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self, struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameListener *__pyx_v_listener); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_12start(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_14startStreams(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self, PyObject *__pyx_v_rgb, PyObject *__pyx_v_depth); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_16stop(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_18close(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2___cinit__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_v_self); /* proto */
static void __pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_2__dealloc__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_4enumerateDevices(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_6getDeviceSerialNumber(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_v_self, int __pyx_v_idx); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_8getDefaultDeviceSerialNumber(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_10openDevice(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_v_self, PyObject *__pyx_v_name, struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *__pyx_v_pipeline); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_12openDefaultDevice(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_v_self, struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *__pyx_v_pipeline); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_Frame(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_FrameListener(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_FrameMap(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_ColorCameraParams(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_IrCameraParams(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_Registration(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_Logger(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_PacketPipeline(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_CpuPacketPipeline(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_Freenect2Device(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_Freenect2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_424;
static PyObject *__pyx_int_512;
static PyObject *__pyx_int_1080;
static PyObject *__pyx_int_1082;
static PyObject *__pyx_int_1920;
static unsigned int __pyx_k__13;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_codeobj__45;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__49;
static PyObject *__pyx_codeobj__51;

/* "pylibfreenect2/libfreenect2.pyx":230
 *     cdef int frame_type
 * 
 *     def __cinit__(self, width=None, height=None, bytes_per_pixel=None,             # <<<<<<<<<<<<<<
 *             int frame_type=-1):
 *         w,h,b = width, height, bytes_per_pixel
 */

/* Python wrapper */
static int __pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  PyObject *__pyx_v_bytes_per_pixel = 0;
  int __pyx_v_frame_type;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_bytes_per_pixel,&__pyx_n_s_frame_type,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bytes_per_pixel);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_frame_type);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 230, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_width = values[0];
    __pyx_v_height = values[1];
    __pyx_v_bytes_per_pixel = values[2];
    if (values[3]) {
      __pyx_v_frame_type = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_frame_type == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L3_error)
    } else {
      __pyx_v_frame_type = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 230, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Frame.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_5Frame___cinit__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)__pyx_v_self), __pyx_v_width, __pyx_v_height, __pyx_v_bytes_per_pixel, __pyx_v_frame_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14pylibfreenect2_12libfreenect2_5Frame___cinit__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height, PyObject *__pyx_v_bytes_per_pixel, int __pyx_v_frame_type) {
  PyObject *__pyx_v_w = NULL;
  PyObject *__pyx_v_h = NULL;
  PyObject *__pyx_v_b = NULL;
  PyObject *__pyx_v_all_none = NULL;
  PyObject *__pyx_v_all_not_none = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  libfreenect2::Frame *__pyx_t_9;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":232
 *     def __cinit__(self, width=None, height=None, bytes_per_pixel=None,
 *             int frame_type=-1):
 *         w,h,b = width, height, bytes_per_pixel             # <<<<<<<<<<<<<<
 *         all_none = (w is None) and (h is None) and (b is None)
 *         all_not_none = (w is not None) and (h is not None) and (b is not None)
 */
  __pyx_t_1 = __pyx_v_width;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_height;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = __pyx_v_bytes_per_pixel;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_w = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_h = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_b = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pylibfreenect2/libfreenect2.pyx":233
 *             int frame_type=-1):
 *         w,h,b = width, height, bytes_per_pixel
 *         all_none = (w is None) and (h is None) and (b is None)             # <<<<<<<<<<<<<<
 *         all_not_none = (w is not None) and (h is not None) and (b is not None)
 *         assert all_none or all_not_none
 */
  __pyx_t_4 = (__pyx_v_w == Py_None);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_4 = (__pyx_v_h == Py_None);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_4 = (__pyx_v_b == Py_None);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_v_all_none = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pylibfreenect2/libfreenect2.pyx":234
 *         w,h,b = width, height, bytes_per_pixel
 *         all_none = (w is None) and (h is None) and (b is None)
 *         all_not_none = (w is not None) and (h is not None) and (b is not None)             # <<<<<<<<<<<<<<
 *         assert all_none or all_not_none
 * 
 */
  __pyx_t_4 = (__pyx_v_w != Py_None);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = (__pyx_v_h != Py_None);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = (__pyx_v_b != Py_None);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_L6_bool_binop_done:;
  __pyx_v_all_not_none = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pylibfreenect2/libfreenect2.pyx":235
 *         all_none = (w is None) and (h is None) and (b is None)
 *         all_not_none = (w is not None) and (h is not None) and (b is not None)
 *         assert all_none or all_not_none             # <<<<<<<<<<<<<<
 * 
 *         self.frame_type = frame_type
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_all_none); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 235, __pyx_L1_error)
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_all_not_none); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 235, __pyx_L1_error)
    __pyx_t_4 = __pyx_t_5;
    __pyx_L9_bool_binop_done:;
    if (unlikely(!__pyx_t_4)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 235, __pyx_L1_error)
    }
  }
  #endif

  /* "pylibfreenect2/libfreenect2.pyx":237
 *         assert all_none or all_not_none
 * 
 *         self.frame_type = frame_type             # <<<<<<<<<<<<<<
 * 
 *         if all_not_none:
 */
  __pyx_v_self->frame_type = __pyx_v_frame_type;

  /* "pylibfreenect2/libfreenect2.pyx":239
 *         self.frame_type = frame_type
 * 
 *         if all_not_none:             # <<<<<<<<<<<<<<
 *             self.take_ownership = True
 *             self.ptr = new libfreenect2.Frame(
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_all_not_none); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 239, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "pylibfreenect2/libfreenect2.pyx":240
 * 
 *         if all_not_none:
 *             self.take_ownership = True             # <<<<<<<<<<<<<<
 *             self.ptr = new libfreenect2.Frame(
 *                 width, height, bytes_per_pixel, NULL)
 */
    __pyx_v_self->take_ownership = 1;

    /* "pylibfreenect2/libfreenect2.pyx":242
 *             self.take_ownership = True
 *             self.ptr = new libfreenect2.Frame(
 *                 width, height, bytes_per_pixel, NULL)             # <<<<<<<<<<<<<<
 *         else:
 *             self.take_ownership = False
 */
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_width); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 242, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyInt_As_size_t(__pyx_v_height); if (unlikely((__pyx_t_7 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 242, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_bytes_per_pixel); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 242, __pyx_L1_error)

    /* "pylibfreenect2/libfreenect2.pyx":241
 *         if all_not_none:
 *             self.take_ownership = True
 *             self.ptr = new libfreenect2.Frame(             # <<<<<<<<<<<<<<
 *                 width, height, bytes_per_pixel, NULL)
 *         else:
 */
    try {
      __pyx_t_9 = new libfreenect2::Frame(__pyx_t_6, __pyx_t_7, __pyx_t_8, NULL);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 241, __pyx_L1_error)
    }
    __pyx_v_self->ptr = __pyx_t_9;

    /* "pylibfreenect2/libfreenect2.pyx":239
 *         self.frame_type = frame_type
 * 
 *         if all_not_none:             # <<<<<<<<<<<<<<
 *             self.take_ownership = True
 *             self.ptr = new libfreenect2.Frame(
 */
    goto __pyx_L11;
  }

  /* "pylibfreenect2/libfreenect2.pyx":244
 *                 width, height, bytes_per_pixel, NULL)
 *         else:
 *             self.take_ownership = False             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    __pyx_v_self->take_ownership = 0;
  }
  __pyx_L11:;

  /* "pylibfreenect2/libfreenect2.pyx":230
 *     cdef int frame_type
 * 
 *     def __cinit__(self, width=None, height=None, bytes_per_pixel=None,             # <<<<<<<<<<<<<<
 *             int frame_type=-1):
 *         w,h,b = width, height, bytes_per_pixel
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Frame.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_w);
  __Pyx_XDECREF(__pyx_v_h);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XDECREF(__pyx_v_all_none);
  __Pyx_XDECREF(__pyx_v_all_not_none);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":246
 *             self.take_ownership = False
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.take_ownership and self.ptr is not NULL:
 *             del self.ptr
 */

/* Python wrapper */
static void __pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_2__dealloc__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_2__dealloc__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":247
 * 
 *     def __dealloc__(self):
 *         if self.take_ownership and self.ptr is not NULL:             # <<<<<<<<<<<<<<
 *             del self.ptr
 * 
 */
  __pyx_t_2 = (__pyx_v_self->take_ownership != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->ptr != NULL) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pylibfreenect2/libfreenect2.pyx":248
 *     def __dealloc__(self):
 *         if self.take_ownership and self.ptr is not NULL:
 *             del self.ptr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    delete __pyx_v_self->ptr;

    /* "pylibfreenect2/libfreenect2.pyx":247
 * 
 *     def __dealloc__(self):
 *         if self.take_ownership and self.ptr is not NULL:             # <<<<<<<<<<<<<<
 *             del self.ptr
 * 
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":246
 *             self.take_ownership = False
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.take_ownership and self.ptr is not NULL:
 *             del self.ptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pylibfreenect2/libfreenect2.pyx":251
 * 
 *     @property
 *     def timestamp(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Frame::timestamp``"""
 *         return self.ptr.timestamp
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_9timestamp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_9timestamp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_9timestamp___get__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_9timestamp___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":253
 *     def timestamp(self):
 *         """Same as ``libfreenect2::Frame::timestamp``"""
 *         return self.ptr.timestamp             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_self->ptr->timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":251
 * 
 *     @property
 *     def timestamp(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Frame::timestamp``"""
 *         return self.ptr.timestamp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Frame.timestamp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":256
 * 
 *     @property
 *     def sequence(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Frame::sequence``"""
 *         return self.ptr.sequence
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_8sequence_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_8sequence_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_8sequence___get__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_8sequence___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":258
 *     def sequence(self):
 *         """Same as ``libfreenect2::Frame::sequence``"""
 *         return self.ptr.sequence             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_self->ptr->sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":256
 * 
 *     @property
 *     def sequence(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Frame::sequence``"""
 *         return self.ptr.sequence
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Frame.sequence.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":261
 * 
 *     @property
 *     def width(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Frame::width``"""
 *         return self.ptr.width
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_5width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_5width_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_5width___get__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_5width___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":263
 *     def width(self):
 *         """Same as ``libfreenect2::Frame::width``"""
 *         return self.ptr.width             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->ptr->width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":261
 * 
 *     @property
 *     def width(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Frame::width``"""
 *         return self.ptr.width
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Frame.width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":266
 * 
 *     @property
 *     def height(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Frame::height``"""
 *         return self.ptr.height
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_6height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_6height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_6height___get__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_6height___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":268
 *     def height(self):
 *         """Same as ``libfreenect2::Frame::height``"""
 *         return self.ptr.height             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->ptr->height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":266
 * 
 *     @property
 *     def height(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Frame::height``"""
 *         return self.ptr.height
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Frame.height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":271
 * 
 *     @property
 *     def bytes_per_pixel(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Frame::bytes_per_pixel``"""
 *         return self.ptr.bytes_per_pixel
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_15bytes_per_pixel_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_15bytes_per_pixel_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_15bytes_per_pixel___get__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_15bytes_per_pixel___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":273
 *     def bytes_per_pixel(self):
 *         """Same as ``libfreenect2::Frame::bytes_per_pixel``"""
 *         return self.ptr.bytes_per_pixel             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->ptr->bytes_per_pixel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":271
 * 
 *     @property
 *     def bytes_per_pixel(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Frame::bytes_per_pixel``"""
 *         return self.ptr.bytes_per_pixel
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Frame.bytes_per_pixel.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":276
 * 
 *     @property
 *     def exposure(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Frame::exposure``"""
 *         return self.ptr.exposure
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_8exposure_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_8exposure_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_8exposure___get__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_8exposure___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":278
 *     def exposure(self):
 *         """Same as ``libfreenect2::Frame::exposure``"""
 *         return self.ptr.exposure             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ptr->exposure); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":276
 * 
 *     @property
 *     def exposure(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Frame::exposure``"""
 *         return self.ptr.exposure
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Frame.exposure.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":281
 * 
 *     @property
 *     def gain(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Frame::gain``"""
 *         return self.ptr.gain
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_4gain_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_4gain_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_4gain___get__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_4gain___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":283
 *     def gain(self):
 *         """Same as ``libfreenect2::Frame::gain``"""
 *         return self.ptr.gain             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ptr->gain); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":281
 * 
 *     @property
 *     def gain(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Frame::gain``"""
 *         return self.ptr.gain
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Frame.gain.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":286
 * 
 *     @property
 *     def gamma(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Frame::gamma``"""
 *         return self.ptr.gamma
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_5gamma_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_5gamma_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_5gamma___get__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_5gamma___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":288
 *     def gamma(self):
 *         """Same as ``libfreenect2::Frame::gamma``"""
 *         return self.ptr.gamma             # <<<<<<<<<<<<<<
 * 
 *     cdef __uint8_data(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ptr->gamma); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":286
 * 
 *     @property
 *     def gamma(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Frame::gamma``"""
 *         return self.ptr.gamma
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Frame.gamma.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":290
 *         return self.ptr.gamma
 * 
 *     cdef __uint8_data(self):             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp shape[3]
 *         shape[0] = <np.npy_intp> self.ptr.height
 */

static PyObject *__pyx_f_14pylibfreenect2_12libfreenect2_5Frame___uint8_data(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self) {
  npy_intp __pyx_v_shape[3];
  PyArrayObject *__pyx_v_array = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__uint8_data", 0);

  /* "pylibfreenect2/libfreenect2.pyx":292
 *     cdef __uint8_data(self):
 *         cdef np.npy_intp shape[3]
 *         shape[0] = <np.npy_intp> self.ptr.height             # <<<<<<<<<<<<<<
 *         shape[1] = <np.npy_intp> self.ptr.width
 *         shape[2] = <np.npy_intp> 4
 */
  (__pyx_v_shape[0]) = ((npy_intp)__pyx_v_self->ptr->height);

  /* "pylibfreenect2/libfreenect2.pyx":293
 *         cdef np.npy_intp shape[3]
 *         shape[0] = <np.npy_intp> self.ptr.height
 *         shape[1] = <np.npy_intp> self.ptr.width             # <<<<<<<<<<<<<<
 *         shape[2] = <np.npy_intp> 4
 *         cdef np.ndarray array = np.PyArray_SimpleNewFromData(
 */
  (__pyx_v_shape[1]) = ((npy_intp)__pyx_v_self->ptr->width);

  /* "pylibfreenect2/libfreenect2.pyx":294
 *         shape[0] = <np.npy_intp> self.ptr.height
 *         shape[1] = <np.npy_intp> self.ptr.width
 *         shape[2] = <np.npy_intp> 4             # <<<<<<<<<<<<<<
 *         cdef np.ndarray array = np.PyArray_SimpleNewFromData(
 *             3, shape, np.NPY_UINT8, self.ptr.data)
 */
  (__pyx_v_shape[2]) = ((npy_intp)4);

  /* "pylibfreenect2/libfreenect2.pyx":295
 *         shape[1] = <np.npy_intp> self.ptr.width
 *         shape[2] = <np.npy_intp> 4
 *         cdef np.ndarray array = np.PyArray_SimpleNewFromData(             # <<<<<<<<<<<<<<
 *             3, shape, np.NPY_UINT8, self.ptr.data)
 * 
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(3, __pyx_v_shape, NPY_UINT8, __pyx_v_self->ptr->data); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 295, __pyx_L1_error)
  __pyx_v_array = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pylibfreenect2/libfreenect2.pyx":298
 *             3, shape, np.NPY_UINT8, self.ptr.data)
 * 
 *         return array             # <<<<<<<<<<<<<<
 * 
 *     cdef __float32_data(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_array));
  __pyx_r = ((PyObject *)__pyx_v_array);
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":290
 *         return self.ptr.gamma
 * 
 *     cdef __uint8_data(self):             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp shape[3]
 *         shape[0] = <np.npy_intp> self.ptr.height
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Frame.__uint8_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_array);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":300
 *         return array
 * 
 *     cdef __float32_data(self):             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp shape[2]
 *         shape[0] = <np.npy_intp> self.ptr.height
 */

static PyObject *__pyx_f_14pylibfreenect2_12libfreenect2_5Frame___float32_data(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self) {
  npy_intp __pyx_v_shape[2];
  PyArrayObject *__pyx_v_array = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__float32_data", 0);

  /* "pylibfreenect2/libfreenect2.pyx":302
 *     cdef __float32_data(self):
 *         cdef np.npy_intp shape[2]
 *         shape[0] = <np.npy_intp> self.ptr.height             # <<<<<<<<<<<<<<
 *         shape[1] = <np.npy_intp> self.ptr.width
 *         cdef np.ndarray array = np.PyArray_SimpleNewFromData(
 */
  (__pyx_v_shape[0]) = ((npy_intp)__pyx_v_self->ptr->height);

  /* "pylibfreenect2/libfreenect2.pyx":303
 *         cdef np.npy_intp shape[2]
 *         shape[0] = <np.npy_intp> self.ptr.height
 *         shape[1] = <np.npy_intp> self.ptr.width             # <<<<<<<<<<<<<<
 *         cdef np.ndarray array = np.PyArray_SimpleNewFromData(
 *             2, shape, np.NPY_FLOAT32, self.ptr.data)
 */
  (__pyx_v_shape[1]) = ((npy_intp)__pyx_v_self->ptr->width);

  /* "pylibfreenect2/libfreenect2.pyx":304
 *         shape[0] = <np.npy_intp> self.ptr.height
 *         shape[1] = <np.npy_intp> self.ptr.width
 *         cdef np.ndarray array = np.PyArray_SimpleNewFromData(             # <<<<<<<<<<<<<<
 *             2, shape, np.NPY_FLOAT32, self.ptr.data)
 * 
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(2, __pyx_v_shape, NPY_FLOAT32, __pyx_v_self->ptr->data); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 304, __pyx_L1_error)
  __pyx_v_array = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pylibfreenect2/libfreenect2.pyx":307
 *             2, shape, np.NPY_FLOAT32, self.ptr.data)
 * 
 *         return array             # <<<<<<<<<<<<<<
 * 
 *     def __asarray(self, dtype):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_array));
  __pyx_r = ((PyObject *)__pyx_v_array);
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":300
 *         return array
 * 
 *     cdef __float32_data(self):             # <<<<<<<<<<<<<<
 *         cdef np.npy_intp shape[2]
 *         shape[0] = <np.npy_intp> self.ptr.height
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Frame.__float32_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_array);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":309
 *         return array
 * 
 *     def __asarray(self, dtype):             # <<<<<<<<<<<<<<
 *         if dtype != np.uint8 and dtype != np.float32:
 *             raise ValueError("np.uint8 or np.float32 is only supported")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_5__asarray(PyObject *__pyx_v_self, PyObject *__pyx_v_dtype); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_5__asarray(PyObject *__pyx_v_self, PyObject *__pyx_v_dtype) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__asarray (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_4__asarray(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)__pyx_v_self), ((PyObject *)__pyx_v_dtype));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_4__asarray(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self, PyObject *__pyx_v_dtype) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("__asarray", 0);

  /* "pylibfreenect2/libfreenect2.pyx":310
 * 
 *     def __asarray(self, dtype):
 *         if dtype != np.uint8 and dtype != np.float32:             # <<<<<<<<<<<<<<
 *             raise ValueError("np.uint8 or np.float32 is only supported")
 *         if dtype == np.uint8:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_uint8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_dtype, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_dtype, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pylibfreenect2/libfreenect2.pyx":311
 *     def __asarray(self, dtype):
 *         if dtype != np.uint8 and dtype != np.float32:
 *             raise ValueError("np.uint8 or np.float32 is only supported")             # <<<<<<<<<<<<<<
 *         if dtype == np.uint8:
 *             return self.__uint8_data()
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 311, __pyx_L1_error)

    /* "pylibfreenect2/libfreenect2.pyx":310
 * 
 *     def __asarray(self, dtype):
 *         if dtype != np.uint8 and dtype != np.float32:             # <<<<<<<<<<<<<<
 *             raise ValueError("np.uint8 or np.float32 is only supported")
 *         if dtype == np.uint8:
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":312
 *         if dtype != np.uint8 and dtype != np.float32:
 *             raise ValueError("np.uint8 or np.float32 is only supported")
 *         if dtype == np.uint8:             # <<<<<<<<<<<<<<
 *             return self.__uint8_data()
 *         else:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_uint8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_dtype, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "pylibfreenect2/libfreenect2.pyx":313
 *             raise ValueError("np.uint8 or np.float32 is only supported")
 *         if dtype == np.uint8:
 *             return self.__uint8_data()             # <<<<<<<<<<<<<<
 *         else:
 *             return self.__float32_data()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((struct __pyx_vtabstruct_14pylibfreenect2_12libfreenect2_Frame *)__pyx_v_self->__pyx_vtab)->__pyx___uint8_data(__pyx_v_self); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pylibfreenect2/libfreenect2.pyx":312
 *         if dtype != np.uint8 and dtype != np.float32:
 *             raise ValueError("np.uint8 or np.float32 is only supported")
 *         if dtype == np.uint8:             # <<<<<<<<<<<<<<
 *             return self.__uint8_data()
 *         else:
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":315
 *             return self.__uint8_data()
 *         else:
 *             return self.__float32_data()             # <<<<<<<<<<<<<<
 * 
 *     def asarray(self, dtype=None):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((struct __pyx_vtabstruct_14pylibfreenect2_12libfreenect2_Frame *)__pyx_v_self->__pyx_vtab)->__pyx___float32_data(__pyx_v_self); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "pylibfreenect2/libfreenect2.pyx":309
 *         return array
 * 
 *     def __asarray(self, dtype):             # <<<<<<<<<<<<<<
 *         if dtype != np.uint8 and dtype != np.float32:
 *             raise ValueError("np.uint8 or np.float32 is only supported")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Frame.__asarray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":317
 *             return self.__float32_data()
 * 
 *     def asarray(self, dtype=None):             # <<<<<<<<<<<<<<
 *         """Frame to ``numpy.ndarray`` conversion
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_7asarray(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_5Frame_6asarray[] = "Frame to ``numpy.ndarray`` conversion\n\n        Internal data of Frame can be represented as:\n\n        - 3d array of ``numpy.uint8`` for color\n        - 2d array of ``numpy.float32`` for IR and depth\n\n        Parameters\n        ----------\n        dtype : numpy dtype, optional\n             Data type (``numpy.uint8`` or ``numpy.float32``). If None, data\n             type is automatically selected if possible. Default is None.\n\n        Returns\n        -------\n        array : ``numpy.ndarray``, shape: ``(height, width)`` for IR and depth,\n        ``(4, height, width)`` for Color.\n            Array of internal frame.\n\n        Raises\n        ------\n        ValueError\n            - If dtype is None and underlying frame type cannot be determined.\n            - If dtype neither ``numpy.uint8`` nor ``numpy.float32`` is specified\n\n        Examples\n        --------\n\n        .. code-block:: python\n\n            rgb_array = frames[\"color\"].asarray()\n            ir_array = frames[\"ir\"].asarray()\n            depth_array = frames[\"depth\"].asarray()\n\n        .. code-block:: python\n\n            undistorted = Frame(512, 424, 4)\n            registered = Frame(512, 424, 4)\n            undistorted_arrray = undistorted.asarray(dtype=np.float32)\n            registered_array = registered.asarray(dtype=np.uint8)\n\n        ";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_7asarray(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dtype = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("asarray (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dtype,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dtype);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "asarray") < 0)) __PYX_ERR(0, 317, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dtype = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("asarray", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 317, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Frame.asarray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_6asarray(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)__pyx_v_self), __pyx_v_dtype);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_6asarray(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self, PyObject *__pyx_v_dtype) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("asarray", 0);

  /* "pylibfreenect2/libfreenect2.pyx":360
 * 
 *         """
 *         if dtype is None and self.frame_type < 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot determine type of data. Specify dtype explicitly.")
 * 
 */
  __pyx_t_2 = (__pyx_v_dtype == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_self->frame_type < 0) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pylibfreenect2/libfreenect2.pyx":361
 *         """
 *         if dtype is None and self.frame_type < 0:
 *             raise ValueError("Cannot determine type of data. Specify dtype explicitly.")             # <<<<<<<<<<<<<<
 * 
 *         if dtype is None:
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 361, __pyx_L1_error)

    /* "pylibfreenect2/libfreenect2.pyx":360
 * 
 *         """
 *         if dtype is None and self.frame_type < 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot determine type of data. Specify dtype explicitly.")
 * 
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":363
 *             raise ValueError("Cannot determine type of data. Specify dtype explicitly.")
 * 
 *         if dtype is None:             # <<<<<<<<<<<<<<
 *             if self.frame_type == FrameType.Color:
 *                 return self.__asarray(np.uint8)
 */
  __pyx_t_1 = (__pyx_v_dtype == Py_None);
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "pylibfreenect2/libfreenect2.pyx":364
 * 
 *         if dtype is None:
 *             if self.frame_type == FrameType.Color:             # <<<<<<<<<<<<<<
 *                 return self.__asarray(np.uint8)
 *             elif self.frame_type == FrameType.Ir or self.frame_type == FrameType.Depth:
 */
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->frame_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_FrameType); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_Color); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_3) {

      /* "pylibfreenect2/libfreenect2.pyx":365
 *         if dtype is None:
 *             if self.frame_type == FrameType.Color:
 *                 return self.__asarray(np.uint8)             # <<<<<<<<<<<<<<
 *             elif self.frame_type == FrameType.Ir or self.frame_type == FrameType.Depth:
 *                 return self.__asarray(np.float32)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_asarray); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 365, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 365, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_uint8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 365, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 365, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_7};
          __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 365, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_7};
          __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 365, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 365, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_7);
          __pyx_t_7 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 365, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L0;

      /* "pylibfreenect2/libfreenect2.pyx":364
 * 
 *         if dtype is None:
 *             if self.frame_type == FrameType.Color:             # <<<<<<<<<<<<<<
 *                 return self.__asarray(np.uint8)
 *             elif self.frame_type == FrameType.Ir or self.frame_type == FrameType.Depth:
 */
    }

    /* "pylibfreenect2/libfreenect2.pyx":366
 *             if self.frame_type == FrameType.Color:
 *                 return self.__asarray(np.uint8)
 *             elif self.frame_type == FrameType.Ir or self.frame_type == FrameType.Depth:             # <<<<<<<<<<<<<<
 *                 return self.__asarray(np.float32)
 *             else:
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->frame_type); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_FrameType); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_Ir); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_5, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!__pyx_t_1) {
    } else {
      __pyx_t_3 = __pyx_t_1;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->frame_type); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_FrameType); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_Depth); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyObject_RichCompare(__pyx_t_6, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_3 = __pyx_t_1;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_3) {

      /* "pylibfreenect2/libfreenect2.pyx":367
 *                 return self.__asarray(np.uint8)
 *             elif self.frame_type == FrameType.Ir or self.frame_type == FrameType.Depth:
 *                 return self.__asarray(np.float32)             # <<<<<<<<<<<<<<
 *             else:
 *                 assert False
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_asarray); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 367, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 367, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float32); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 367, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_6) {
        __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 367, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_8);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_7};
          __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 367, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_7};
          __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 367, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else
        #endif
        {
          __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 367, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_7);
          __pyx_t_7 = 0;
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 367, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_8;
      __pyx_t_8 = 0;
      goto __pyx_L0;

      /* "pylibfreenect2/libfreenect2.pyx":366
 *             if self.frame_type == FrameType.Color:
 *                 return self.__asarray(np.uint8)
 *             elif self.frame_type == FrameType.Ir or self.frame_type == FrameType.Depth:             # <<<<<<<<<<<<<<
 *                 return self.__asarray(np.float32)
 *             else:
 */
    }

    /* "pylibfreenect2/libfreenect2.pyx":369
 *                 return self.__asarray(np.float32)
 *             else:
 *                 assert False             # <<<<<<<<<<<<<<
 *         else:
 *             return self.__asarray(dtype)
 */
    /*else*/ {
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        if (unlikely(!0)) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(0, 369, __pyx_L1_error)
        }
      }
      #endif
    }

    /* "pylibfreenect2/libfreenect2.pyx":363
 *             raise ValueError("Cannot determine type of data. Specify dtype explicitly.")
 * 
 *         if dtype is None:             # <<<<<<<<<<<<<<
 *             if self.frame_type == FrameType.Color:
 *                 return self.__asarray(np.uint8)
 */
    goto __pyx_L6;
  }

  /* "pylibfreenect2/libfreenect2.pyx":371
 *                 assert False
 *         else:
 *             return self.__asarray(dtype)             # <<<<<<<<<<<<<<
 * 
 * cdef class FrameListener:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_asarray); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_dtype); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_dtype};
        __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 371, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_8);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_dtype};
        __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 371, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_8);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 371, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_dtype);
        __Pyx_GIVEREF(__pyx_v_dtype);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_dtype);
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 371, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;
  }
  __pyx_L6:;

  /* "pylibfreenect2/libfreenect2.pyx":317
 *             return self.__float32_data()
 * 
 *     def asarray(self, dtype=None):             # <<<<<<<<<<<<<<
 *         """Frame to ``numpy.ndarray`` conversion
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Frame.asarray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_8__reduce_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Frame.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_10__setstate_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_5Frame_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Frame.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.listener_ptr_alias cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_13FrameListener_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_13FrameListener_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_13FrameListener___reduce_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameListener *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_13FrameListener___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameListener *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.listener_ptr_alias cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.listener_ptr_alias cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.listener_ptr_alias cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.FrameListener.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.listener_ptr_alias cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.listener_ptr_alias cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_13FrameListener_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_13FrameListener_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_13FrameListener_2__setstate_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameListener *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_13FrameListener_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameListener *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.listener_ptr_alias cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.listener_ptr_alias cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.listener_ptr_alias cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.listener_ptr_alias cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.FrameListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":377
 * 
 * 
 * cdef intenum_to_frame_type(int n):             # <<<<<<<<<<<<<<
 *     if n == FrameType.Color:
 *         return libfreenect2.Color
 */

static PyObject *__pyx_f_14pylibfreenect2_12libfreenect2_intenum_to_frame_type(int __pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("intenum_to_frame_type", 0);

  /* "pylibfreenect2/libfreenect2.pyx":378
 * 
 * cdef intenum_to_frame_type(int n):
 *     if n == FrameType.Color:             # <<<<<<<<<<<<<<
 *         return libfreenect2.Color
 *     elif n == FrameType.Ir:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FrameType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Color); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "pylibfreenect2/libfreenect2.pyx":379
 * cdef intenum_to_frame_type(int n):
 *     if n == FrameType.Color:
 *         return libfreenect2.Color             # <<<<<<<<<<<<<<
 *     elif n == FrameType.Ir:
 *         return libfreenect2.Ir
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_enum__libfreenect2_3a__3a_Frame_3a__3a_Type(libfreenect2::Frame::Type::Color); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pylibfreenect2/libfreenect2.pyx":378
 * 
 * cdef intenum_to_frame_type(int n):
 *     if n == FrameType.Color:             # <<<<<<<<<<<<<<
 *         return libfreenect2.Color
 *     elif n == FrameType.Ir:
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":380
 *     if n == FrameType.Color:
 *         return libfreenect2.Color
 *     elif n == FrameType.Ir:             # <<<<<<<<<<<<<<
 *         return libfreenect2.Ir
 *     elif n == FrameType.Depth:
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_FrameType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Ir); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "pylibfreenect2/libfreenect2.pyx":381
 *         return libfreenect2.Color
 *     elif n == FrameType.Ir:
 *         return libfreenect2.Ir             # <<<<<<<<<<<<<<
 *     elif n == FrameType.Depth:
 *         return libfreenect2.Depth
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_From_enum__libfreenect2_3a__3a_Frame_3a__3a_Type(libfreenect2::Frame::Type::Ir); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pylibfreenect2/libfreenect2.pyx":380
 *     if n == FrameType.Color:
 *         return libfreenect2.Color
 *     elif n == FrameType.Ir:             # <<<<<<<<<<<<<<
 *         return libfreenect2.Ir
 *     elif n == FrameType.Depth:
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":382
 *     elif n == FrameType.Ir:
 *         return libfreenect2.Ir
 *     elif n == FrameType.Depth:             # <<<<<<<<<<<<<<
 *         return libfreenect2.Depth
 *     else:
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_FrameType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Depth); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "pylibfreenect2/libfreenect2.pyx":383
 *         return libfreenect2.Ir
 *     elif n == FrameType.Depth:
 *         return libfreenect2.Depth             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError("Not supported")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_enum__libfreenect2_3a__3a_Frame_3a__3a_Type(libfreenect2::Frame::Type::Depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pylibfreenect2/libfreenect2.pyx":382
 *     elif n == FrameType.Ir:
 *         return libfreenect2.Ir
 *     elif n == FrameType.Depth:             # <<<<<<<<<<<<<<
 *         return libfreenect2.Depth
 *     else:
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":385
 *         return libfreenect2.Depth
 *     else:
 *         raise ValueError("Not supported")             # <<<<<<<<<<<<<<
 * 
 * cdef str_to_int_frame_type(str s):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 385, __pyx_L1_error)
  }

  /* "pylibfreenect2/libfreenect2.pyx":377
 * 
 * 
 * cdef intenum_to_frame_type(int n):             # <<<<<<<<<<<<<<
 *     if n == FrameType.Color:
 *         return libfreenect2.Color
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.intenum_to_frame_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":387
 *         raise ValueError("Not supported")
 * 
 * cdef str_to_int_frame_type(str s):             # <<<<<<<<<<<<<<
 *     s = s.lower()
 *     if s == "color":
 */

static PyObject *__pyx_f_14pylibfreenect2_12libfreenect2_str_to_int_frame_type(PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("str_to_int_frame_type", 0);
  __Pyx_INCREF(__pyx_v_s);

  /* "pylibfreenect2/libfreenect2.pyx":388
 * 
 * cdef str_to_int_frame_type(str s):
 *     s = s.lower()             # <<<<<<<<<<<<<<
 *     if s == "color":
 *         return FrameType.Color
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_lower); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 388, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 388, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "pylibfreenect2/libfreenect2.pyx":389
 * cdef str_to_int_frame_type(str s):
 *     s = s.lower()
 *     if s == "color":             # <<<<<<<<<<<<<<
 *         return FrameType.Color
 *     elif s == "ir":
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_s, __pyx_n_s_color, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 389, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "pylibfreenect2/libfreenect2.pyx":390
 *     s = s.lower()
 *     if s == "color":
 *         return FrameType.Color             # <<<<<<<<<<<<<<
 *     elif s == "ir":
 *         return FrameType.Ir
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_FrameType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Color); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pylibfreenect2/libfreenect2.pyx":389
 * cdef str_to_int_frame_type(str s):
 *     s = s.lower()
 *     if s == "color":             # <<<<<<<<<<<<<<
 *         return FrameType.Color
 *     elif s == "ir":
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":391
 *     if s == "color":
 *         return FrameType.Color
 *     elif s == "ir":             # <<<<<<<<<<<<<<
 *         return FrameType.Ir
 *     elif s == "depth":
 */
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_s, __pyx_n_s_ir, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 391, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {

    /* "pylibfreenect2/libfreenect2.pyx":392
 *         return FrameType.Color
 *     elif s == "ir":
 *         return FrameType.Ir             # <<<<<<<<<<<<<<
 *     elif s == "depth":
 *         return FrameType.Depth
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FrameType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 392, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Ir); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pylibfreenect2/libfreenect2.pyx":391
 *     if s == "color":
 *         return FrameType.Color
 *     elif s == "ir":             # <<<<<<<<<<<<<<
 *         return FrameType.Ir
 *     elif s == "depth":
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":393
 *     elif s == "ir":
 *         return FrameType.Ir
 *     elif s == "depth":             # <<<<<<<<<<<<<<
 *         return FrameType.Depth
 *     else:
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_s, __pyx_n_s_depth, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 393, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "pylibfreenect2/libfreenect2.pyx":394
 *         return FrameType.Ir
 *     elif s == "depth":
 *         return FrameType.Depth             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError("Not supported")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_FrameType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Depth); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pylibfreenect2/libfreenect2.pyx":393
 *     elif s == "ir":
 *         return FrameType.Ir
 *     elif s == "depth":             # <<<<<<<<<<<<<<
 *         return FrameType.Depth
 *     else:
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":396
 *         return FrameType.Depth
 *     else:
 *         raise ValueError("Not supported")             # <<<<<<<<<<<<<<
 * 
 * cdef str_to_frame_type(str s):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 396, __pyx_L1_error)
  }

  /* "pylibfreenect2/libfreenect2.pyx":387
 *         raise ValueError("Not supported")
 * 
 * cdef str_to_int_frame_type(str s):             # <<<<<<<<<<<<<<
 *     s = s.lower()
 *     if s == "color":
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.str_to_int_frame_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":398
 *         raise ValueError("Not supported")
 * 
 * cdef str_to_frame_type(str s):             # <<<<<<<<<<<<<<
 *     return intenum_to_frame_type(str_to_int_frame_type(s))
 * 
 */

static PyObject *__pyx_f_14pylibfreenect2_12libfreenect2_str_to_frame_type(PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("str_to_frame_type", 0);

  /* "pylibfreenect2/libfreenect2.pyx":399
 * 
 * cdef str_to_frame_type(str s):
 *     return intenum_to_frame_type(str_to_int_frame_type(s))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_14pylibfreenect2_12libfreenect2_str_to_int_frame_type(__pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __pyx_f_14pylibfreenect2_12libfreenect2_intenum_to_frame_type(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":398
 *         raise ValueError("Not supported")
 * 
 * cdef str_to_frame_type(str s):             # <<<<<<<<<<<<<<
 *     return intenum_to_frame_type(str_to_int_frame_type(s))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.str_to_frame_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":422
 *     cdef bool take_ownership
 * 
 *     def __cinit__(self, bool take_ownership=False):             # <<<<<<<<<<<<<<
 *         self.take_ownership = take_ownership
 * 
 */

/* Python wrapper */
static int __pyx_pw_14pylibfreenect2_12libfreenect2_8FrameMap_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14pylibfreenect2_12libfreenect2_8FrameMap_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_take_ownership;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_take_ownership,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_take_ownership);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 422, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_take_ownership = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_take_ownership == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 422, __pyx_L3_error)
    } else {
      __pyx_v_take_ownership = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 422, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.FrameMap.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_8FrameMap___cinit__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *)__pyx_v_self), __pyx_v_take_ownership);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14pylibfreenect2_12libfreenect2_8FrameMap___cinit__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *__pyx_v_self, bool __pyx_v_take_ownership) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":423
 * 
 *     def __cinit__(self, bool take_ownership=False):
 *         self.take_ownership = take_ownership             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->take_ownership = __pyx_v_take_ownership;

  /* "pylibfreenect2/libfreenect2.pyx":422
 *     cdef bool take_ownership
 * 
 *     def __cinit__(self, bool take_ownership=False):             # <<<<<<<<<<<<<<
 *         self.take_ownership = take_ownership
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":425
 *         self.take_ownership = take_ownership
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         # Since libfreenect2 is for now designed to release FrameMap explicitly,
 *         # __dealloc__  do nothing by default (take_ownership = False)
 */

/* Python wrapper */
static void __pyx_pw_14pylibfreenect2_12libfreenect2_8FrameMap_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14pylibfreenect2_12libfreenect2_8FrameMap_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14pylibfreenect2_12libfreenect2_8FrameMap_2__dealloc__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14pylibfreenect2_12libfreenect2_8FrameMap_2__dealloc__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *__pyx_v_self) {
  std::pair<enum libfreenect2::Frame::Type,libfreenect2::Frame *>  __pyx_v_key;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::map<enum libfreenect2::Frame::Type,libfreenect2::Frame *> ::iterator __pyx_t_2;
  std::map<enum libfreenect2::Frame::Type,libfreenect2::Frame *>  *__pyx_t_3;
  std::pair<enum libfreenect2::Frame::Type,libfreenect2::Frame *>  __pyx_t_4;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":428
 *         # Since libfreenect2 is for now designed to release FrameMap explicitly,
 *         # __dealloc__  do nothing by default (take_ownership = False)
 *         if self.take_ownership:             # <<<<<<<<<<<<<<
 *             # similar to SyncMultiFrameListener::release(FrameMap &frame)
 *             # do nothing if already released
 */
  __pyx_t_1 = (__pyx_v_self->take_ownership != 0);
  if (__pyx_t_1) {

    /* "pylibfreenect2/libfreenect2.pyx":431
 *             # similar to SyncMultiFrameListener::release(FrameMap &frame)
 *             # do nothing if already released
 *             for key in self.internal_frame_map:             # <<<<<<<<<<<<<<
 *                 if key.second != NULL:
 *                     del key.second
 */
    __pyx_t_3 = &__pyx_v_self->internal_frame_map;
    __pyx_t_2 = __pyx_t_3->begin();
    for (;;) {
      if (!(__pyx_t_2 != __pyx_t_3->end())) break;
      __pyx_t_4 = *__pyx_t_2;
      ++__pyx_t_2;
      __pyx_v_key = __pyx_t_4;

      /* "pylibfreenect2/libfreenect2.pyx":432
 *             # do nothing if already released
 *             for key in self.internal_frame_map:
 *                 if key.second != NULL:             # <<<<<<<<<<<<<<
 *                     del key.second
 *                     key.second = NULL
 */
      __pyx_t_1 = ((__pyx_v_key.second != NULL) != 0);
      if (__pyx_t_1) {

        /* "pylibfreenect2/libfreenect2.pyx":433
 *             for key in self.internal_frame_map:
 *                 if key.second != NULL:
 *                     del key.second             # <<<<<<<<<<<<<<
 *                     key.second = NULL
 * 
 */
        delete __pyx_v_key.second;

        /* "pylibfreenect2/libfreenect2.pyx":434
 *                 if key.second != NULL:
 *                     del key.second
 *                     key.second = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, key):
 */
        __pyx_v_key.second = NULL;

        /* "pylibfreenect2/libfreenect2.pyx":432
 *             # do nothing if already released
 *             for key in self.internal_frame_map:
 *                 if key.second != NULL:             # <<<<<<<<<<<<<<
 *                     del key.second
 *                     key.second = NULL
 */
      }

      /* "pylibfreenect2/libfreenect2.pyx":431
 *             # similar to SyncMultiFrameListener::release(FrameMap &frame)
 *             # do nothing if already released
 *             for key in self.internal_frame_map:             # <<<<<<<<<<<<<<
 *                 if key.second != NULL:
 *                     del key.second
 */
    }

    /* "pylibfreenect2/libfreenect2.pyx":428
 *         # Since libfreenect2 is for now designed to release FrameMap explicitly,
 *         # __dealloc__  do nothing by default (take_ownership = False)
 *         if self.take_ownership:             # <<<<<<<<<<<<<<
 *             # similar to SyncMultiFrameListener::release(FrameMap &frame)
 *             # do nothing if already released
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":425
 *         self.take_ownership = take_ownership
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         # Since libfreenect2 is for now designed to release FrameMap explicitly,
 *         # __dealloc__  do nothing by default (take_ownership = False)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pylibfreenect2/libfreenect2.pyx":436
 *                     key.second = NULL
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         """Get access to the internal FrameMap.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_8FrameMap_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_8FrameMap_4__getitem__[] = "Get access to the internal FrameMap.\n\n        This allows the following dict-like syntax:\n\n        .. code-block:: python\n\n            color = frames[pylibfreenect2.FrameType.Color]\n\n        .. code-block:: python\n\n            color = frames['color']\n\n        .. code-block:: python\n\n            color = frames[1] # with IntEnum value\n\n        The key can be of ``FrameType`` (a subclass of IntEnum), str or int type\n        as shown above.\n\n        Parameters\n        ----------\n        key : ``FrameType``, str or int\n            Key for the internal FrameMap. available str keys are ``color``,\n            ``ir`` and ``depth``.\n\n        Returns\n        -------\n        frame : Frame\n            Frame for the specified key.\n\n        Raises\n        ------\n        KeyError\n            if unknown key is specified\n\n        See also\n        --------\n\n        pylibfreenect2.FrameType\n\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_14pylibfreenect2_12libfreenect2_8FrameMap_4__getitem__;
#endif
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_8FrameMap_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_8FrameMap_4__getitem__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_8FrameMap_4__getitem__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *__pyx_v_self, PyObject *__pyx_v_key) {
  enum libfreenect2::Frame::Type __pyx_v_frame_type;
  PyObject *__pyx_v_intkey = 0;
  libfreenect2::Frame *__pyx_v_frame_ptr;
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_frame = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  enum libfreenect2::Frame::Type __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":481
 *         cdef intkey
 * 
 *         if isinstance(key, int) or isinstance(key, FrameType):             # <<<<<<<<<<<<<<
 *             frame_type = intenum_to_frame_type(key)
 *             intkey = key
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_key); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_FrameType); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_key, __pyx_t_4); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pylibfreenect2/libfreenect2.pyx":482
 * 
 *         if isinstance(key, int) or isinstance(key, FrameType):
 *             frame_type = intenum_to_frame_type(key)             # <<<<<<<<<<<<<<
 *             intkey = key
 *         elif isinstance(key, str):
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 482, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_14pylibfreenect2_12libfreenect2_intenum_to_frame_type(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 482, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = ((enum libfreenect2::Frame::Type)__Pyx_PyInt_As_enum__libfreenect2_3a__3a_Frame_3a__3a_Type(__pyx_t_4)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 482, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_frame_type = __pyx_t_6;

    /* "pylibfreenect2/libfreenect2.pyx":483
 *         if isinstance(key, int) or isinstance(key, FrameType):
 *             frame_type = intenum_to_frame_type(key)
 *             intkey = key             # <<<<<<<<<<<<<<
 *         elif isinstance(key, str):
 *             frame_type = str_to_frame_type(key)
 */
    __Pyx_INCREF(__pyx_v_key);
    __pyx_v_intkey = __pyx_v_key;

    /* "pylibfreenect2/libfreenect2.pyx":481
 *         cdef intkey
 * 
 *         if isinstance(key, int) or isinstance(key, FrameType):             # <<<<<<<<<<<<<<
 *             frame_type = intenum_to_frame_type(key)
 *             intkey = key
 */
    goto __pyx_L3;
  }

  /* "pylibfreenect2/libfreenect2.pyx":484
 *             frame_type = intenum_to_frame_type(key)
 *             intkey = key
 *         elif isinstance(key, str):             # <<<<<<<<<<<<<<
 *             frame_type = str_to_frame_type(key)
 *             intkey = str_to_int_frame_type(key)
 */
  __pyx_t_1 = PyString_Check(__pyx_v_key); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pylibfreenect2/libfreenect2.pyx":485
 *             intkey = key
 *         elif isinstance(key, str):
 *             frame_type = str_to_frame_type(key)             # <<<<<<<<<<<<<<
 *             intkey = str_to_int_frame_type(key)
 *         else:
 */
    if (!(likely(PyString_CheckExact(__pyx_v_key))||((__pyx_v_key) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_key)->tp_name), 0))) __PYX_ERR(0, 485, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_14pylibfreenect2_12libfreenect2_str_to_frame_type(((PyObject*)__pyx_v_key)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = ((enum libfreenect2::Frame::Type)__Pyx_PyInt_As_enum__libfreenect2_3a__3a_Frame_3a__3a_Type(__pyx_t_4)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 485, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_frame_type = __pyx_t_6;

    /* "pylibfreenect2/libfreenect2.pyx":486
 *         elif isinstance(key, str):
 *             frame_type = str_to_frame_type(key)
 *             intkey = str_to_int_frame_type(key)             # <<<<<<<<<<<<<<
 *         else:
 *             raise KeyError("")
 */
    if (!(likely(PyString_CheckExact(__pyx_v_key))||((__pyx_v_key) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_key)->tp_name), 0))) __PYX_ERR(0, 486, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_14pylibfreenect2_12libfreenect2_str_to_int_frame_type(((PyObject*)__pyx_v_key)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_intkey = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "pylibfreenect2/libfreenect2.pyx":484
 *             frame_type = intenum_to_frame_type(key)
 *             intkey = key
 *         elif isinstance(key, str):             # <<<<<<<<<<<<<<
 *             frame_type = str_to_frame_type(key)
 *             intkey = str_to_int_frame_type(key)
 */
    goto __pyx_L3;
  }

  /* "pylibfreenect2/libfreenect2.pyx":488
 *             intkey = str_to_int_frame_type(key)
 *         else:
 *             raise KeyError("")             # <<<<<<<<<<<<<<
 * 
 *         cdef libfreenect2.Frame* frame_ptr = self.internal_frame_map[frame_type]
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_KeyError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 488, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pylibfreenect2/libfreenect2.pyx":490
 *             raise KeyError("")
 * 
 *         cdef libfreenect2.Frame* frame_ptr = self.internal_frame_map[frame_type]             # <<<<<<<<<<<<<<
 *         cdef Frame frame = Frame(frame_type=intkey)
 *         frame.ptr = frame_ptr
 */
  __pyx_v_frame_ptr = (__pyx_v_self->internal_frame_map[__pyx_v_frame_type]);

  /* "pylibfreenect2/libfreenect2.pyx":491
 * 
 *         cdef libfreenect2.Frame* frame_ptr = self.internal_frame_map[frame_type]
 *         cdef Frame frame = Frame(frame_type=intkey)             # <<<<<<<<<<<<<<
 *         frame.ptr = frame_ptr
 *         return frame
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_frame_type, __pyx_v_intkey) < 0) __PYX_ERR(0, 491, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14pylibfreenect2_12libfreenect2_Frame), __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_frame = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "pylibfreenect2/libfreenect2.pyx":492
 *         cdef libfreenect2.Frame* frame_ptr = self.internal_frame_map[frame_type]
 *         cdef Frame frame = Frame(frame_type=intkey)
 *         frame.ptr = frame_ptr             # <<<<<<<<<<<<<<
 *         return frame
 * 
 */
  __pyx_v_frame->ptr = __pyx_v_frame_ptr;

  /* "pylibfreenect2/libfreenect2.pyx":493
 *         cdef Frame frame = Frame(frame_type=intkey)
 *         frame.ptr = frame_ptr
 *         return frame             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_frame));
  __pyx_r = ((PyObject *)__pyx_v_frame);
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":436
 *                     key.second = NULL
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         """Get access to the internal FrameMap.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.FrameMap.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_intkey);
  __Pyx_XDECREF((PyObject *)__pyx_v_frame);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_8FrameMap_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_8FrameMap_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_8FrameMap_6__reduce_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_8FrameMap_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.FrameMap.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_8FrameMap_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_8FrameMap_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_8FrameMap_8__setstate_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_8FrameMap_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.FrameMap.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":534
 *     cdef libfreenect2.SyncMultiFrameListener* ptr
 * 
 *     def __cinit__(self, unsigned int frame_types=<unsigned int>(             # <<<<<<<<<<<<<<
 *                         FrameType.Color | FrameType.Ir | FrameType.Depth)):
 *         self.ptr = new libfreenect2.SyncMultiFrameListener(frame_types)
 */

/* Python wrapper */
static int __pyx_pw_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_frame_types;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_frame_types,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_frame_types);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 534, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_frame_types = __Pyx_PyInt_As_unsigned_int(values[0]); if (unlikely((__pyx_v_frame_types == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 534, __pyx_L3_error)
    } else {
      __pyx_v_frame_types = __pyx_k__13;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 534, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.SyncMultiFrameListener.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener___cinit__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener *)__pyx_v_self), __pyx_v_frame_types);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener___cinit__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener *__pyx_v_self, unsigned int __pyx_v_frame_types) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":536
 *     def __cinit__(self, unsigned int frame_types=<unsigned int>(
 *                         FrameType.Color | FrameType.Ir | FrameType.Depth)):
 *         self.ptr = new libfreenect2.SyncMultiFrameListener(frame_types)             # <<<<<<<<<<<<<<
 *         self.listener_ptr_alias = <libfreenect2.FrameListener*> self.ptr
 * 
 */
  __pyx_v_self->ptr = new libfreenect2::SyncMultiFrameListener(__pyx_v_frame_types);

  /* "pylibfreenect2/libfreenect2.pyx":537
 *                         FrameType.Color | FrameType.Ir | FrameType.Depth)):
 *         self.ptr = new libfreenect2.SyncMultiFrameListener(frame_types)
 *         self.listener_ptr_alias = <libfreenect2.FrameListener*> self.ptr             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->__pyx_base.listener_ptr_alias = ((libfreenect2::FrameListener *)__pyx_v_self->ptr);

  /* "pylibfreenect2/libfreenect2.pyx":534
 *     cdef libfreenect2.SyncMultiFrameListener* ptr
 * 
 *     def __cinit__(self, unsigned int frame_types=<unsigned int>(             # <<<<<<<<<<<<<<
 *                         FrameType.Color | FrameType.Ir | FrameType.Depth)):
 *         self.ptr = new libfreenect2.SyncMultiFrameListener(frame_types)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":539
 *         self.listener_ptr_alias = <libfreenect2.FrameListener*> self.ptr
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.ptr is not NULL:
 *             del self.ptr
 */

/* Python wrapper */
static void __pyx_pw_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_2__dealloc__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_2__dealloc__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":540
 * 
 *     def __dealloc__(self):
 *         if self.ptr is not NULL:             # <<<<<<<<<<<<<<
 *             del self.ptr
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->ptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "pylibfreenect2/libfreenect2.pyx":541
 *     def __dealloc__(self):
 *         if self.ptr is not NULL:
 *             del self.ptr             # <<<<<<<<<<<<<<
 * 
 *     def hasNewFrame(self):
 */
    delete __pyx_v_self->ptr;

    /* "pylibfreenect2/libfreenect2.pyx":540
 * 
 *     def __dealloc__(self):
 *         if self.ptr is not NULL:             # <<<<<<<<<<<<<<
 *             del self.ptr
 * 
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":539
 *         self.listener_ptr_alias = <libfreenect2.FrameListener*> self.ptr
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.ptr is not NULL:
 *             del self.ptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pylibfreenect2/libfreenect2.pyx":543
 *             del self.ptr
 * 
 *     def hasNewFrame(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::SyncMultiFrameListener::hasNewFrame()``.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_5hasNewFrame(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_4hasNewFrame[] = "Same as ``libfreenect2::SyncMultiFrameListener::hasNewFrame()``.\n\n        Returns\n        -------\n        r : Bool\n            True if SyncMultiFrameListener has a new frame, False otherwise.\n        ";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_5hasNewFrame(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hasNewFrame (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_4hasNewFrame(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_4hasNewFrame(struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("hasNewFrame", 0);

  /* "pylibfreenect2/libfreenect2.pyx":551
 *             True if SyncMultiFrameListener has a new frame, False otherwise.
 *         """
 *         return self.ptr.hasNewFrame()             # <<<<<<<<<<<<<<
 * 
 *     def waitForNewFrame(self, FrameMap frame_map=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->ptr->hasNewFrame()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":543
 *             del self.ptr
 * 
 *     def hasNewFrame(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::SyncMultiFrameListener::hasNewFrame()``.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.SyncMultiFrameListener.hasNewFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":553
 *         return self.ptr.hasNewFrame()
 * 
 *     def waitForNewFrame(self, FrameMap frame_map=None):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::SyncMultiFrameListener::waitForNewFrame(Frame&)``.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_7waitForNewFrame(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_6waitForNewFrame[] = "Same as ``libfreenect2::SyncMultiFrameListener::waitForNewFrame(Frame&)``.\n\n        .. warning::\n\n            Function signature can be different between Python and C++.\n\n        Parameters\n        ----------\n        frame_map : FrameMap, optional\n            If not None, SyncMultiFrameListener write to it inplace, otherwise\n            a new FrameMap is allocated within the function and then returned.\n\n        Returns\n        -------\n        frame_map : FrameMap\n            FrameMap.\n\n            .. note::\n                FrameMap must be releaseed by call-side by calling ``release``\n                function.\n\n        Examples\n        --------\n\n        Suppose the following C++ code:\n\n        .. code-block:: c++\n\n            libfreenect2::FrameMap frames;\n            listener->waitForNewFrame(frames);\n\n        This can be translated in Python as follows:\n\n        .. code-block:: python\n\n            frames = listener.waitForNewFrame()\n\n        or you can write it more similar to C++:\n\n        .. code-block:: python\n\n            frames = pylibfreenect2.FrameMap()\n            listener.waitForNewFrame(frames)\n\n        ";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_7waitForNewFrame(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *__pyx_v_frame_map = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("waitForNewFrame (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_frame_map,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_frame_map);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "waitForNewFrame") < 0)) __PYX_ERR(0, 553, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_frame_map = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("waitForNewFrame", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 553, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.SyncMultiFrameListener.waitForNewFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_frame_map), __pyx_ptype_14pylibfreenect2_12libfreenect2_FrameMap, 1, "frame_map", 0))) __PYX_ERR(0, 553, __pyx_L1_error)
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_6waitForNewFrame(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener *)__pyx_v_self), __pyx_v_frame_map);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_6waitForNewFrame(struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener *__pyx_v_self, struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *__pyx_v_frame_map) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("waitForNewFrame", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_frame_map);

  /* "pylibfreenect2/libfreenect2.pyx":599
 * 
 *         """
 *         if frame_map is None:             # <<<<<<<<<<<<<<
 *             frame_map = FrameMap(take_ownership=False)
 *         self.ptr.waitForNewFrame(frame_map.internal_frame_map)
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_frame_map) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pylibfreenect2/libfreenect2.pyx":600
 *         """
 *         if frame_map is None:
 *             frame_map = FrameMap(take_ownership=False)             # <<<<<<<<<<<<<<
 *         self.ptr.waitForNewFrame(frame_map.internal_frame_map)
 *         return frame_map
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 600, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_take_ownership, Py_False) < 0) __PYX_ERR(0, 600, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14pylibfreenect2_12libfreenect2_FrameMap), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 600, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_frame_map, ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "pylibfreenect2/libfreenect2.pyx":599
 * 
 *         """
 *         if frame_map is None:             # <<<<<<<<<<<<<<
 *             frame_map = FrameMap(take_ownership=False)
 *         self.ptr.waitForNewFrame(frame_map.internal_frame_map)
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":601
 *         if frame_map is None:
 *             frame_map = FrameMap(take_ownership=False)
 *         self.ptr.waitForNewFrame(frame_map.internal_frame_map)             # <<<<<<<<<<<<<<
 *         return frame_map
 * 
 */
  __pyx_v_self->ptr->waitForNewFrame(__pyx_v_frame_map->internal_frame_map);

  /* "pylibfreenect2/libfreenect2.pyx":602
 *             frame_map = FrameMap(take_ownership=False)
 *         self.ptr.waitForNewFrame(frame_map.internal_frame_map)
 *         return frame_map             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_frame_map));
  __pyx_r = ((PyObject *)__pyx_v_frame_map);
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":553
 *         return self.ptr.hasNewFrame()
 * 
 *     def waitForNewFrame(self, FrameMap frame_map=None):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::SyncMultiFrameListener::waitForNewFrame(Frame&)``.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.SyncMultiFrameListener.waitForNewFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_frame_map);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":605
 * 
 * 
 *     def release(self, FrameMap frame_map):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::SyncMultiFrameListener::release(Frame&)``.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_9release(PyObject *__pyx_v_self, PyObject *__pyx_v_frame_map); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_8release[] = "Same as ``libfreenect2::SyncMultiFrameListener::release(Frame&)``.\n\n        Parameters\n        ----------\n        frame_map : FrameMap\n            FrameMap.\n        ";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_9release(PyObject *__pyx_v_self, PyObject *__pyx_v_frame_map) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("release (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_frame_map), __pyx_ptype_14pylibfreenect2_12libfreenect2_FrameMap, 1, "frame_map", 0))) __PYX_ERR(0, 605, __pyx_L1_error)
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_8release(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener *)__pyx_v_self), ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *)__pyx_v_frame_map));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_8release(struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener *__pyx_v_self, struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *__pyx_v_frame_map) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("release", 0);

  /* "pylibfreenect2/libfreenect2.pyx":613
 *             FrameMap.
 *         """
 *         self.ptr.release(frame_map.internal_frame_map)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->ptr->release(__pyx_v_frame_map->internal_frame_map);

  /* "pylibfreenect2/libfreenect2.pyx":605
 * 
 * 
 *     def release(self, FrameMap frame_map):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::SyncMultiFrameListener::release(Frame&)``.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_10__reduce_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.SyncMultiFrameListener.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_12__setstate_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.SyncMultiFrameListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":631
 *     # TODO: wrap all instance variables
 *     @property
 *     def fx(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::ColorCameraParams::fx``"""
 *         return self.params.fx
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2fx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2fx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2fx___get__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2fx___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":633
 *     def fx(self):
 *         """Same as ``libfreenect2::Freenect2Device::ColorCameraParams::fx``"""
 *         return self.params.fx             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->params.fx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":631
 *     # TODO: wrap all instance variables
 *     @property
 *     def fx(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::ColorCameraParams::fx``"""
 *         return self.params.fx
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.ColorCameraParams.fx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":636
 * 
 *     @property
 *     def fy(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::ColorCameraParams::fy``"""
 *         return self.params.fy
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2fy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2fy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2fy___get__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2fy___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":638
 *     def fy(self):
 *         """Same as ``libfreenect2::Freenect2Device::ColorCameraParams::fy``"""
 *         return self.params.fy             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->params.fy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":636
 * 
 *     @property
 *     def fy(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::ColorCameraParams::fy``"""
 *         return self.params.fy
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.ColorCameraParams.fy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":641
 * 
 *     @property
 *     def cx(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::ColorCameraParams::cx``"""
 *         return self.params.cx
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2cx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2cx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2cx___get__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2cx___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":643
 *     def cx(self):
 *         """Same as ``libfreenect2::Freenect2Device::ColorCameraParams::cx``"""
 *         return self.params.cx             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->params.cx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":641
 * 
 *     @property
 *     def cx(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::ColorCameraParams::cx``"""
 *         return self.params.cx
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.ColorCameraParams.cx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":646
 * 
 *     @property
 *     def cy(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::ColorCameraParams::cy``"""
 *         return self.params.cy
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2cy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2cy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2cy___get__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2cy___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":648
 *     def cy(self):
 *         """Same as ``libfreenect2::Freenect2Device::ColorCameraParams::cy``"""
 *         return self.params.cy             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->params.cy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":646
 * 
 *     @property
 *     def cy(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::ColorCameraParams::cy``"""
 *         return self.params.cy
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.ColorCameraParams.cy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_17ColorCameraParams_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_17ColorCameraParams_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_17ColorCameraParams___reduce_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_17ColorCameraParams___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.ColorCameraParams.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_17ColorCameraParams_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_17ColorCameraParams_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2__setstate_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.ColorCameraParams.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":665
 * 
 *     @property
 *     def fx(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::IrCameraParams::fx``"""
 *         return self.params.fx
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_14IrCameraParams_2fx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_14IrCameraParams_2fx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_14IrCameraParams_2fx___get__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_14IrCameraParams_2fx___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":667
 *     def fx(self):
 *         """Same as ``libfreenect2::Freenect2Device::IrCameraParams::fx``"""
 *         return self.params.fx             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->params.fx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":665
 * 
 *     @property
 *     def fx(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::IrCameraParams::fx``"""
 *         return self.params.fx
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.IrCameraParams.fx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":670
 * 
 *     @property
 *     def fy(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::IrCameraParams::fy``"""
 *         return self.params.fy
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_14IrCameraParams_2fy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_14IrCameraParams_2fy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_14IrCameraParams_2fy___get__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_14IrCameraParams_2fy___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":672
 *     def fy(self):
 *         """Same as ``libfreenect2::Freenect2Device::IrCameraParams::fy``"""
 *         return self.params.fy             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->params.fy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":670
 * 
 *     @property
 *     def fy(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::IrCameraParams::fy``"""
 *         return self.params.fy
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.IrCameraParams.fy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":675
 * 
 *     @property
 *     def cx(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::IrCameraParams::cx``"""
 *         return self.params.cx
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_14IrCameraParams_2cx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_14IrCameraParams_2cx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_14IrCameraParams_2cx___get__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_14IrCameraParams_2cx___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":677
 *     def cx(self):
 *         """Same as ``libfreenect2::Freenect2Device::IrCameraParams::cx``"""
 *         return self.params.cx             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->params.cx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":675
 * 
 *     @property
 *     def cx(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::IrCameraParams::cx``"""
 *         return self.params.cx
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.IrCameraParams.cx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":680
 * 
 *     @property
 *     def cy(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::IrCameraParams::cy``"""
 *         return self.params.cy
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_14IrCameraParams_2cy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_14IrCameraParams_2cy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_14IrCameraParams_2cy___get__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_14IrCameraParams_2cy___get__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":682
 *     def cy(self):
 *         """Same as ``libfreenect2::Freenect2Device::IrCameraParams::cy``"""
 *         return self.params.cy             # <<<<<<<<<<<<<<
 * 
 * cdef class Registration:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->params.cy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":680
 * 
 *     @property
 *     def cy(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::IrCameraParams::cy``"""
 *         return self.params.cy
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.IrCameraParams.cy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_14IrCameraParams_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_14IrCameraParams_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_14IrCameraParams___reduce_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_14IrCameraParams___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.IrCameraParams.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_14IrCameraParams_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_14IrCameraParams_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_14IrCameraParams_2__setstate_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_14IrCameraParams_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.IrCameraParams.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":712
 *     cdef libfreenect2.Registration* ptr
 * 
 *     def __cinit__(self, IrCameraParams irparams, ColorCameraParams cparams):             # <<<<<<<<<<<<<<
 *         cdef _Freenect2Device.IrCameraParams i = irparams.params
 *         cdef _Freenect2Device.ColorCameraParams c = cparams.params
 */

/* Python wrapper */
static int __pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *__pyx_v_irparams = 0;
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *__pyx_v_cparams = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_irparams,&__pyx_n_s_cparams,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_irparams)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cparams)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 712, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 712, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_irparams = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *)values[0]);
    __pyx_v_cparams = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 712, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Registration.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_irparams), __pyx_ptype_14pylibfreenect2_12libfreenect2_IrCameraParams, 1, "irparams", 0))) __PYX_ERR(0, 712, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cparams), __pyx_ptype_14pylibfreenect2_12libfreenect2_ColorCameraParams, 1, "cparams", 0))) __PYX_ERR(0, 712, __pyx_L1_error)
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_12Registration___cinit__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *)__pyx_v_self), __pyx_v_irparams, __pyx_v_cparams);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14pylibfreenect2_12libfreenect2_12Registration___cinit__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *__pyx_v_self, struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *__pyx_v_irparams, struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *__pyx_v_cparams) {
  libfreenect2::Freenect2Device::IrCameraParams __pyx_v_i;
  libfreenect2::Freenect2Device::ColorCameraParams __pyx_v_c;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  libfreenect2::Freenect2Device::IrCameraParams __pyx_t_1;
  libfreenect2::Freenect2Device::ColorCameraParams __pyx_t_2;
  libfreenect2::Registration *__pyx_t_3;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":713
 * 
 *     def __cinit__(self, IrCameraParams irparams, ColorCameraParams cparams):
 *         cdef _Freenect2Device.IrCameraParams i = irparams.params             # <<<<<<<<<<<<<<
 *         cdef _Freenect2Device.ColorCameraParams c = cparams.params
 *         self.ptr = new libfreenect2.Registration(i, c)
 */
  __pyx_t_1 = __pyx_v_irparams->params;
  __pyx_v_i = __pyx_t_1;

  /* "pylibfreenect2/libfreenect2.pyx":714
 *     def __cinit__(self, IrCameraParams irparams, ColorCameraParams cparams):
 *         cdef _Freenect2Device.IrCameraParams i = irparams.params
 *         cdef _Freenect2Device.ColorCameraParams c = cparams.params             # <<<<<<<<<<<<<<
 *         self.ptr = new libfreenect2.Registration(i, c)
 * 
 */
  __pyx_t_2 = __pyx_v_cparams->params;
  __pyx_v_c = __pyx_t_2;

  /* "pylibfreenect2/libfreenect2.pyx":715
 *         cdef _Freenect2Device.IrCameraParams i = irparams.params
 *         cdef _Freenect2Device.ColorCameraParams c = cparams.params
 *         self.ptr = new libfreenect2.Registration(i, c)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  try {
    __pyx_t_3 = new libfreenect2::Registration(__pyx_v_i, __pyx_v_c);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 715, __pyx_L1_error)
  }
  __pyx_v_self->ptr = __pyx_t_3;

  /* "pylibfreenect2/libfreenect2.pyx":712
 *     cdef libfreenect2.Registration* ptr
 * 
 *     def __cinit__(self, IrCameraParams irparams, ColorCameraParams cparams):             # <<<<<<<<<<<<<<
 *         cdef _Freenect2Device.IrCameraParams i = irparams.params
 *         cdef _Freenect2Device.ColorCameraParams c = cparams.params
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Registration.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":717
 *         self.ptr = new libfreenect2.Registration(i, c)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.ptr is not NULL:
 *             del self.ptr
 */

/* Python wrapper */
static void __pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14pylibfreenect2_12libfreenect2_12Registration_2__dealloc__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14pylibfreenect2_12libfreenect2_12Registration_2__dealloc__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":718
 * 
 *     def __dealloc__(self):
 *         if self.ptr is not NULL:             # <<<<<<<<<<<<<<
 *             del self.ptr
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->ptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "pylibfreenect2/libfreenect2.pyx":719
 *     def __dealloc__(self):
 *         if self.ptr is not NULL:
 *             del self.ptr             # <<<<<<<<<<<<<<
 * 
 *     def apply(self, Frame rgb, Frame depth, Frame undistorted,
 */
    delete __pyx_v_self->ptr;

    /* "pylibfreenect2/libfreenect2.pyx":718
 * 
 *     def __dealloc__(self):
 *         if self.ptr is not NULL:             # <<<<<<<<<<<<<<
 *             del self.ptr
 * 
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":717
 *         self.ptr = new libfreenect2.Registration(i, c)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.ptr is not NULL:
 *             del self.ptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pylibfreenect2/libfreenect2.pyx":721
 *             del self.ptr
 * 
 *     def apply(self, Frame rgb, Frame depth, Frame undistorted,             # <<<<<<<<<<<<<<
 *             Frame registered, enable_filter=True, Frame bigdepth=None,
 *             np.ndarray[np.int32_t, ndim=1, mode="c"] color_depth_map=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_5apply(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_12Registration_4apply[] = "Same as ``libfreenect2::Registration::apply``.\n\n        Parameters\n        ----------\n        rgb : Frame\n            ``(1920, 1080)`` color frame\n\n        depth : Frame\n            ``(512, 424)`` depth frame\n\n        undistorted : Frame\n            ``(512, 424)`` registered depth frame\n\n        registered : Frame\n            ``(512, 424)`` registered color frame\n\n        enable_filter : Bool, optional\n\n        bigdepth : Frame, optional\n            ``(1920, 1082)`` bigdepth frame\n\n        color_depth_map : ``numpy.ndarray``, optional\n            Array of shape: ``(424*512,)``, dtype ``np.int32``\n\n        Raises\n        ------\n        ValueError\n            If invalid shape of frame/array is provided\n\n        ";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_5apply(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_rgb = 0;
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_depth = 0;
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_undistorted = 0;
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_registered = 0;
  PyObject *__pyx_v_enable_filter = 0;
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_bigdepth = 0;
  PyArrayObject *__pyx_v_color_depth_map = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("apply (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rgb,&__pyx_n_s_depth,&__pyx_n_s_undistorted,&__pyx_n_s_registered,&__pyx_n_s_enable_filter,&__pyx_n_s_bigdepth,&__pyx_n_s_color_depth_map,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};

    /* "pylibfreenect2/libfreenect2.pyx":722
 * 
 *     def apply(self, Frame rgb, Frame depth, Frame undistorted,
 *             Frame registered, enable_filter=True, Frame bigdepth=None,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.int32_t, ndim=1, mode="c"] color_depth_map=None):
 *         """Same as ``libfreenect2::Registration::apply``.
 */
    values[4] = ((PyObject *)Py_True);
    values[5] = (PyObject *)((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)Py_None);

    /* "pylibfreenect2/libfreenect2.pyx":723
 *     def apply(self, Frame rgb, Frame depth, Frame undistorted,
 *             Frame registered, enable_filter=True, Frame bigdepth=None,
 *             np.ndarray[np.int32_t, ndim=1, mode="c"] color_depth_map=None):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Registration::apply``.
 * 
 */
    values[6] = (PyObject *)((PyArrayObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rgb)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_depth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("apply", 0, 4, 7, 1); __PYX_ERR(0, 721, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_undistorted)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("apply", 0, 4, 7, 2); __PYX_ERR(0, 721, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_registered)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("apply", 0, 4, 7, 3); __PYX_ERR(0, 721, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_enable_filter);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bigdepth);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_color_depth_map);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "apply") < 0)) __PYX_ERR(0, 721, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rgb = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)values[0]);
    __pyx_v_depth = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)values[1]);
    __pyx_v_undistorted = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)values[2]);
    __pyx_v_registered = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)values[3]);
    __pyx_v_enable_filter = values[4];
    __pyx_v_bigdepth = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)values[5]);
    __pyx_v_color_depth_map = ((PyArrayObject *)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("apply", 0, 4, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 721, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Registration.apply", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rgb), __pyx_ptype_14pylibfreenect2_12libfreenect2_Frame, 1, "rgb", 0))) __PYX_ERR(0, 721, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_depth), __pyx_ptype_14pylibfreenect2_12libfreenect2_Frame, 1, "depth", 0))) __PYX_ERR(0, 721, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_undistorted), __pyx_ptype_14pylibfreenect2_12libfreenect2_Frame, 1, "undistorted", 0))) __PYX_ERR(0, 721, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_registered), __pyx_ptype_14pylibfreenect2_12libfreenect2_Frame, 1, "registered", 0))) __PYX_ERR(0, 722, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bigdepth), __pyx_ptype_14pylibfreenect2_12libfreenect2_Frame, 1, "bigdepth", 0))) __PYX_ERR(0, 722, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_color_depth_map), __pyx_ptype_5numpy_ndarray, 1, "color_depth_map", 0))) __PYX_ERR(0, 723, __pyx_L1_error)
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_12Registration_4apply(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *)__pyx_v_self), __pyx_v_rgb, __pyx_v_depth, __pyx_v_undistorted, __pyx_v_registered, __pyx_v_enable_filter, __pyx_v_bigdepth, __pyx_v_color_depth_map);

  /* "pylibfreenect2/libfreenect2.pyx":721
 *             del self.ptr
 * 
 *     def apply(self, Frame rgb, Frame depth, Frame undistorted,             # <<<<<<<<<<<<<<
 *             Frame registered, enable_filter=True, Frame bigdepth=None,
 *             np.ndarray[np.int32_t, ndim=1, mode="c"] color_depth_map=None):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_12Registration_4apply(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *__pyx_v_self, struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_rgb, struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_depth, struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_undistorted, struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_registered, PyObject *__pyx_v_enable_filter, struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_bigdepth, PyArrayObject *__pyx_v_color_depth_map) {
  libfreenect2::Frame *__pyx_v_bigdepth_ptr;
  int *__pyx_v_color_depth_map_ptr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_color_depth_map;
  __Pyx_Buffer __pyx_pybuffer_color_depth_map;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  libfreenect2::Frame *__pyx_t_11;
  int *__pyx_t_12;
  Py_ssize_t __pyx_t_13;
  bool __pyx_t_14;
  __Pyx_RefNannySetupContext("apply", 0);
  __pyx_pybuffer_color_depth_map.pybuffer.buf = NULL;
  __pyx_pybuffer_color_depth_map.refcount = 0;
  __pyx_pybuffernd_color_depth_map.data = NULL;
  __pyx_pybuffernd_color_depth_map.rcbuffer = &__pyx_pybuffer_color_depth_map;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_color_depth_map.rcbuffer->pybuffer, (PyObject*)__pyx_v_color_depth_map, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 721, __pyx_L1_error)
  }
  __pyx_pybuffernd_color_depth_map.diminfo[0].strides = __pyx_pybuffernd_color_depth_map.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_color_depth_map.diminfo[0].shape = __pyx_pybuffernd_color_depth_map.rcbuffer->pybuffer.shape[0];

  /* "pylibfreenect2/libfreenect2.pyx":754
 * 
 *         """
 *         if rgb.width != 1920 or rgb.height != 1080:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "Shape of color frame {}x{} is invalid. Expected 1920x1080.".format(
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_rgb), __pyx_n_s_width); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_1920, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 754, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 754, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_rgb), __pyx_n_s_height); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_1080, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 754, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 754, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pylibfreenect2/libfreenect2.pyx":756
 *         if rgb.width != 1920 or rgb.height != 1080:
 *             raise ValueError(
 *                 "Shape of color frame {}x{} is invalid. Expected 1920x1080.".format(             # <<<<<<<<<<<<<<
 *                 rgb.width, rgb.height))
 *         if depth.width != 512 or depth.height != 424:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Shape_of_color_frame_x_is_invali, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 756, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "pylibfreenect2/libfreenect2.pyx":757
 *             raise ValueError(
 *                 "Shape of color frame {}x{} is invalid. Expected 1920x1080.".format(
 *                 rgb.width, rgb.height))             # <<<<<<<<<<<<<<
 *         if depth.width != 512 or depth.height != 424:
 *             raise ValueError(
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_rgb), __pyx_n_s_width); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_rgb), __pyx_n_s_height); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 756, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 756, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 756, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_6);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 756, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pylibfreenect2/libfreenect2.pyx":755
 *         """
 *         if rgb.width != 1920 or rgb.height != 1080:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "Shape of color frame {}x{} is invalid. Expected 1920x1080.".format(
 *                 rgb.width, rgb.height))
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 755, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 755, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 755, __pyx_L1_error)

    /* "pylibfreenect2/libfreenect2.pyx":754
 * 
 *         """
 *         if rgb.width != 1920 or rgb.height != 1080:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "Shape of color frame {}x{} is invalid. Expected 1920x1080.".format(
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":758
 *                 "Shape of color frame {}x{} is invalid. Expected 1920x1080.".format(
 *                 rgb.width, rgb.height))
 *         if depth.width != 512 or depth.height != 424:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "Shape of depth frame {}x{} is invalid. Expected 512x424.".format(
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_depth), __pyx_n_s_width); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_512, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_depth), __pyx_n_s_height); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_424, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_4;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pylibfreenect2/libfreenect2.pyx":760
 *         if depth.width != 512 or depth.height != 424:
 *             raise ValueError(
 *                 "Shape of depth frame {}x{} is invalid. Expected 512x424.".format(             # <<<<<<<<<<<<<<
 *                 depth.width, depth.height))
 *         if undistorted.width != 512 or undistorted.height != 424:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Shape_of_depth_frame_x_is_invali, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 760, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "pylibfreenect2/libfreenect2.pyx":761
 *             raise ValueError(
 *                 "Shape of depth frame {}x{} is invalid. Expected 512x424.".format(
 *                 depth.width, depth.height))             # <<<<<<<<<<<<<<
 *         if undistorted.width != 512 or undistorted.height != 424:
 *             raise ValueError(
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_depth), __pyx_n_s_width); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_depth), __pyx_n_s_height); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_9, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 760, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_9, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 760, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 760, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_8, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_8, __pyx_t_6);
      __pyx_t_9 = 0;
      __pyx_t_6 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 760, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pylibfreenect2/libfreenect2.pyx":759
 *                 rgb.width, rgb.height))
 *         if depth.width != 512 or depth.height != 424:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "Shape of depth frame {}x{} is invalid. Expected 512x424.".format(
 *                 depth.width, depth.height))
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 759, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 759, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 759, __pyx_L1_error)

    /* "pylibfreenect2/libfreenect2.pyx":758
 *                 "Shape of color frame {}x{} is invalid. Expected 1920x1080.".format(
 *                 rgb.width, rgb.height))
 *         if depth.width != 512 or depth.height != 424:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "Shape of depth frame {}x{} is invalid. Expected 512x424.".format(
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":762
 *                 "Shape of depth frame {}x{} is invalid. Expected 512x424.".format(
 *                 depth.width, depth.height))
 *         if undistorted.width != 512 or undistorted.height != 424:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "Shape of undistorted frame {}x{} is invalid. Expected 512x424.".format(
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_undistorted), __pyx_n_s_width); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_512, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_undistorted), __pyx_n_s_height); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_424, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_4;
  __pyx_L10_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pylibfreenect2/libfreenect2.pyx":764
 *         if undistorted.width != 512 or undistorted.height != 424:
 *             raise ValueError(
 *                 "Shape of undistorted frame {}x{} is invalid. Expected 512x424.".format(             # <<<<<<<<<<<<<<
 *                 undistorted.width, undistorted.height))
 *         if registered.width != 512 or registered.height != 424:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Shape_of_undistorted_frame_x_is, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "pylibfreenect2/libfreenect2.pyx":765
 *             raise ValueError(
 *                 "Shape of undistorted frame {}x{} is invalid. Expected 512x424.".format(
 *                 undistorted.width, undistorted.height))             # <<<<<<<<<<<<<<
 *         if registered.width != 512 or registered.height != 424:
 *             raise ValueError(
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_undistorted), __pyx_n_s_width); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_undistorted), __pyx_n_s_height); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 764, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 764, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_8, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_8, __pyx_t_6);
      __pyx_t_7 = 0;
      __pyx_t_6 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pylibfreenect2/libfreenect2.pyx":763
 *                 depth.width, depth.height))
 *         if undistorted.width != 512 or undistorted.height != 424:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "Shape of undistorted frame {}x{} is invalid. Expected 512x424.".format(
 *                 undistorted.width, undistorted.height))
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 763, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 763, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 763, __pyx_L1_error)

    /* "pylibfreenect2/libfreenect2.pyx":762
 *                 "Shape of depth frame {}x{} is invalid. Expected 512x424.".format(
 *                 depth.width, depth.height))
 *         if undistorted.width != 512 or undistorted.height != 424:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "Shape of undistorted frame {}x{} is invalid. Expected 512x424.".format(
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":766
 *                 "Shape of undistorted frame {}x{} is invalid. Expected 512x424.".format(
 *                 undistorted.width, undistorted.height))
 *         if registered.width != 512 or registered.height != 424:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "Shape of registered frame {}x{} is invalid. Expected 512x424.".format(
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_registered), __pyx_n_s_width); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_512, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 766, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 766, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_registered), __pyx_n_s_height); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_424, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 766, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 766, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_4;
  __pyx_L13_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pylibfreenect2/libfreenect2.pyx":768
 *         if registered.width != 512 or registered.height != 424:
 *             raise ValueError(
 *                 "Shape of registered frame {}x{} is invalid. Expected 512x424.".format(             # <<<<<<<<<<<<<<
 *                 registered.width, registered.height))
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Shape_of_registered_frame_x_is_i, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "pylibfreenect2/libfreenect2.pyx":769
 *             raise ValueError(
 *                 "Shape of registered frame {}x{} is invalid. Expected 512x424.".format(
 *                 registered.width, registered.height))             # <<<<<<<<<<<<<<
 * 
 *         if bigdepth is not None:
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_registered), __pyx_n_s_width); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_registered), __pyx_n_s_height); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 768, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 768, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_6);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pylibfreenect2/libfreenect2.pyx":767
 *                 undistorted.width, undistorted.height))
 *         if registered.width != 512 or registered.height != 424:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "Shape of registered frame {}x{} is invalid. Expected 512x424.".format(
 *                 registered.width, registered.height))
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 767, __pyx_L1_error)

    /* "pylibfreenect2/libfreenect2.pyx":766
 *                 "Shape of undistorted frame {}x{} is invalid. Expected 512x424.".format(
 *                 undistorted.width, undistorted.height))
 *         if registered.width != 512 or registered.height != 424:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "Shape of registered frame {}x{} is invalid. Expected 512x424.".format(
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":771
 *                 registered.width, registered.height))
 * 
 *         if bigdepth is not None:             # <<<<<<<<<<<<<<
 *             if bigdepth.width != 1920 or bigdepth.height != 1082:
 *                 raise ValueError(
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_bigdepth) != Py_None);
  __pyx_t_4 = (__pyx_t_1 != 0);
  if (__pyx_t_4) {

    /* "pylibfreenect2/libfreenect2.pyx":772
 * 
 *         if bigdepth is not None:
 *             if bigdepth.width != 1920 or bigdepth.height != 1082:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "Shape of bigdepth frame {}x{} is invalid. Expected 1920x1082.".format(
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_bigdepth), __pyx_n_s_width); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_1920, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!__pyx_t_1) {
    } else {
      __pyx_t_4 = __pyx_t_1;
      goto __pyx_L17_bool_binop_done;
    }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_bigdepth), __pyx_n_s_height); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_1082, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __pyx_t_1;
    __pyx_L17_bool_binop_done:;
    if (__pyx_t_4) {

      /* "pylibfreenect2/libfreenect2.pyx":774
 *             if bigdepth.width != 1920 or bigdepth.height != 1082:
 *                 raise ValueError(
 *                     "Shape of bigdepth frame {}x{} is invalid. Expected 1920x1082.".format(             # <<<<<<<<<<<<<<
 *                     bigdepth.width, bigdepth.height))
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Shape_of_bigdepth_frame_x_is_inv, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 774, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);

      /* "pylibfreenect2/libfreenect2.pyx":775
 *                 raise ValueError(
 *                     "Shape of bigdepth frame {}x{} is invalid. Expected 1920x1082.".format(
 *                     bigdepth.width, bigdepth.height))             # <<<<<<<<<<<<<<
 * 
 *         if color_depth_map is not None:
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_bigdepth), __pyx_n_s_width); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 775, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_bigdepth), __pyx_n_s_height); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 775, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_9, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 774, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_9, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 774, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 774, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (__pyx_t_5) {
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_8, __pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_8, __pyx_t_6);
        __pyx_t_9 = 0;
        __pyx_t_6 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 774, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pylibfreenect2/libfreenect2.pyx":773
 *         if bigdepth is not None:
 *             if bigdepth.width != 1920 or bigdepth.height != 1082:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "Shape of bigdepth frame {}x{} is invalid. Expected 1920x1082.".format(
 *                     bigdepth.width, bigdepth.height))
 */
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 773, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 773, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 773, __pyx_L1_error)

      /* "pylibfreenect2/libfreenect2.pyx":772
 * 
 *         if bigdepth is not None:
 *             if bigdepth.width != 1920 or bigdepth.height != 1082:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "Shape of bigdepth frame {}x{} is invalid. Expected 1920x1082.".format(
 */
    }

    /* "pylibfreenect2/libfreenect2.pyx":771
 *                 registered.width, registered.height))
 * 
 *         if bigdepth is not None:             # <<<<<<<<<<<<<<
 *             if bigdepth.width != 1920 or bigdepth.height != 1082:
 *                 raise ValueError(
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":777
 *                     bigdepth.width, bigdepth.height))
 * 
 *         if color_depth_map is not None:             # <<<<<<<<<<<<<<
 *             if color_depth_map.shape[0] != 424*512:
 *                 raise ValueError(
 */
  __pyx_t_4 = (((PyObject *)__pyx_v_color_depth_map) != Py_None);
  __pyx_t_1 = (__pyx_t_4 != 0);
  if (__pyx_t_1) {

    /* "pylibfreenect2/libfreenect2.pyx":778
 * 
 *         if color_depth_map is not None:
 *             if color_depth_map.shape[0] != 424*512:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "Shape of color_depth_map array ({},) is invalid. Expected (424*512,)".format(
 */
    __pyx_t_1 = (((__pyx_v_color_depth_map->dimensions[0]) != 0x35000) != 0);
    if (__pyx_t_1) {

      /* "pylibfreenect2/libfreenect2.pyx":780
 *             if color_depth_map.shape[0] != 424*512:
 *                 raise ValueError(
 *                     "Shape of color_depth_map array ({},) is invalid. Expected (424*512,)".format(             # <<<<<<<<<<<<<<
 *                     color_depth_map.shape[0]))
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Shape_of_color_depth_map_array_i, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);

      /* "pylibfreenect2/libfreenect2.pyx":781
 *                 raise ValueError(
 *                     "Shape of color_depth_map array ({},) is invalid. Expected (424*512,)".format(
 *                     color_depth_map.shape[0]))             # <<<<<<<<<<<<<<
 * 
 *         assert rgb.take_ownership == False
 */
      __pyx_t_7 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_color_depth_map->dimensions[0])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 781, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_6) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 780, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_7};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 780, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_7};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 780, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 780, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6); __pyx_t_6 = NULL;
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_7);
          __pyx_t_7 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 780, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pylibfreenect2/libfreenect2.pyx":779
 *         if color_depth_map is not None:
 *             if color_depth_map.shape[0] != 424*512:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "Shape of color_depth_map array ({},) is invalid. Expected (424*512,)".format(
 *                     color_depth_map.shape[0]))
 */
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 779, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 779, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 779, __pyx_L1_error)

      /* "pylibfreenect2/libfreenect2.pyx":778
 * 
 *         if color_depth_map is not None:
 *             if color_depth_map.shape[0] != 424*512:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "Shape of color_depth_map array ({},) is invalid. Expected (424*512,)".format(
 */
    }

    /* "pylibfreenect2/libfreenect2.pyx":777
 *                     bigdepth.width, bigdepth.height))
 * 
 *         if color_depth_map is not None:             # <<<<<<<<<<<<<<
 *             if color_depth_map.shape[0] != 424*512:
 *                 raise ValueError(
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":783
 *                     color_depth_map.shape[0]))
 * 
 *         assert rgb.take_ownership == False             # <<<<<<<<<<<<<<
 *         assert depth.take_ownership == False
 *         assert undistorted.take_ownership == True
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_rgb->take_ownership == 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 783, __pyx_L1_error)
    }
  }
  #endif

  /* "pylibfreenect2/libfreenect2.pyx":784
 * 
 *         assert rgb.take_ownership == False
 *         assert depth.take_ownership == False             # <<<<<<<<<<<<<<
 *         assert undistorted.take_ownership == True
 *         assert registered.take_ownership == True
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_depth->take_ownership == 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 784, __pyx_L1_error)
    }
  }
  #endif

  /* "pylibfreenect2/libfreenect2.pyx":785
 *         assert rgb.take_ownership == False
 *         assert depth.take_ownership == False
 *         assert undistorted.take_ownership == True             # <<<<<<<<<<<<<<
 *         assert registered.take_ownership == True
 *         assert bigdepth is None or bigdepth.take_ownership == True
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_undistorted->take_ownership == 1) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 785, __pyx_L1_error)
    }
  }
  #endif

  /* "pylibfreenect2/libfreenect2.pyx":786
 *         assert depth.take_ownership == False
 *         assert undistorted.take_ownership == True
 *         assert registered.take_ownership == True             # <<<<<<<<<<<<<<
 *         assert bigdepth is None or bigdepth.take_ownership == True
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_registered->take_ownership == 1) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 786, __pyx_L1_error)
    }
  }
  #endif

  /* "pylibfreenect2/libfreenect2.pyx":787
 *         assert undistorted.take_ownership == True
 *         assert registered.take_ownership == True
 *         assert bigdepth is None or bigdepth.take_ownership == True             # <<<<<<<<<<<<<<
 * 
 *         cdef libfreenect2.Frame* bigdepth_ptr = <libfreenect2.Frame*>(NULL) \
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = (((PyObject *)__pyx_v_bigdepth) == Py_None);
    __pyx_t_10 = (__pyx_t_4 != 0);
    if (!__pyx_t_10) {
    } else {
      __pyx_t_1 = __pyx_t_10;
      goto __pyx_L21_bool_binop_done;
    }
    __pyx_t_10 = ((__pyx_v_bigdepth->take_ownership == 1) != 0);
    __pyx_t_1 = __pyx_t_10;
    __pyx_L21_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 787, __pyx_L1_error)
    }
  }
  #endif

  /* "pylibfreenect2/libfreenect2.pyx":790
 * 
 *         cdef libfreenect2.Frame* bigdepth_ptr = <libfreenect2.Frame*>(NULL) \
 *             if bigdepth is None else bigdepth.ptr             # <<<<<<<<<<<<<<
 *         cdef int* color_depth_map_ptr = <int*>(NULL) if color_depth_map is None \
 *             else <int*>(&color_depth_map[0])
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_bigdepth) == Py_None);
  if ((__pyx_t_1 != 0)) {

    /* "pylibfreenect2/libfreenect2.pyx":789
 *         assert bigdepth is None or bigdepth.take_ownership == True
 * 
 *         cdef libfreenect2.Frame* bigdepth_ptr = <libfreenect2.Frame*>(NULL) \             # <<<<<<<<<<<<<<
 *             if bigdepth is None else bigdepth.ptr
 *         cdef int* color_depth_map_ptr = <int*>(NULL) if color_depth_map is None \
 */
    __pyx_t_11 = ((libfreenect2::Frame *)NULL);
  } else {

    /* "pylibfreenect2/libfreenect2.pyx":790
 * 
 *         cdef libfreenect2.Frame* bigdepth_ptr = <libfreenect2.Frame*>(NULL) \
 *             if bigdepth is None else bigdepth.ptr             # <<<<<<<<<<<<<<
 *         cdef int* color_depth_map_ptr = <int*>(NULL) if color_depth_map is None \
 *             else <int*>(&color_depth_map[0])
 */
    __pyx_t_11 = __pyx_v_bigdepth->ptr;
  }
  __pyx_v_bigdepth_ptr = __pyx_t_11;

  /* "pylibfreenect2/libfreenect2.pyx":791
 *         cdef libfreenect2.Frame* bigdepth_ptr = <libfreenect2.Frame*>(NULL) \
 *             if bigdepth is None else bigdepth.ptr
 *         cdef int* color_depth_map_ptr = <int*>(NULL) if color_depth_map is None \             # <<<<<<<<<<<<<<
 *             else <int*>(&color_depth_map[0])
 * 
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_color_depth_map) == Py_None);
  if ((__pyx_t_1 != 0)) {
    __pyx_t_12 = ((int *)NULL);
  } else {

    /* "pylibfreenect2/libfreenect2.pyx":792
 *             if bigdepth is None else bigdepth.ptr
 *         cdef int* color_depth_map_ptr = <int*>(NULL) if color_depth_map is None \
 *             else <int*>(&color_depth_map[0])             # <<<<<<<<<<<<<<
 * 
 *         self.ptr.apply(rgb.ptr, depth.ptr, undistorted.ptr, registered.ptr,
 */
    __pyx_t_13 = 0;
    __pyx_t_8 = -1;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_pybuffernd_color_depth_map.diminfo[0].shape;
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_8 = 0;
    } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_color_depth_map.diminfo[0].shape)) __pyx_t_8 = 0;
    if (unlikely(__pyx_t_8 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_8);
      __PYX_ERR(0, 792, __pyx_L1_error)
    }
    __pyx_t_12 = ((int *)(&(*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_color_depth_map.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_color_depth_map.diminfo[0].strides))));
  }
  __pyx_v_color_depth_map_ptr = __pyx_t_12;

  /* "pylibfreenect2/libfreenect2.pyx":795
 * 
 *         self.ptr.apply(rgb.ptr, depth.ptr, undistorted.ptr, registered.ptr,
 *             enable_filter, bigdepth_ptr, color_depth_map_ptr)             # <<<<<<<<<<<<<<
 * 
 *     def undistortDepth(self, Frame depth, Frame undistorted):
 */
  __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_v_enable_filter); if (unlikely((__pyx_t_14 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 795, __pyx_L1_error)

  /* "pylibfreenect2/libfreenect2.pyx":794
 *             else <int*>(&color_depth_map[0])
 * 
 *         self.ptr.apply(rgb.ptr, depth.ptr, undistorted.ptr, registered.ptr,             # <<<<<<<<<<<<<<
 *             enable_filter, bigdepth_ptr, color_depth_map_ptr)
 * 
 */
  __pyx_v_self->ptr->apply(__pyx_v_rgb->ptr, __pyx_v_depth->ptr, __pyx_v_undistorted->ptr, __pyx_v_registered->ptr, __pyx_t_14, __pyx_v_bigdepth_ptr, __pyx_v_color_depth_map_ptr);

  /* "pylibfreenect2/libfreenect2.pyx":721
 *             del self.ptr
 * 
 *     def apply(self, Frame rgb, Frame depth, Frame undistorted,             # <<<<<<<<<<<<<<
 *             Frame registered, enable_filter=True, Frame bigdepth=None,
 *             np.ndarray[np.int32_t, ndim=1, mode="c"] color_depth_map=None):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_color_depth_map.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Registration.apply", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_color_depth_map.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":797
 *             enable_filter, bigdepth_ptr, color_depth_map_ptr)
 * 
 *     def undistortDepth(self, Frame depth, Frame undistorted):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Registration::undistortDepth(bool, bool)``.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_7undistortDepth(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_12Registration_6undistortDepth[] = "Same as ``libfreenect2::Registration::undistortDepth(bool, bool)``.\n\n        Parameters\n        ----------\n        depth : Frame\n            ``(512, 424)`` depth frame\n\n        undistorted : Frame\n            ``(512, 424)`` registered depth frame\n\n        Raises\n        ------\n        ValueError\n            If invalid shape of frame/array is provided\n        ";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_7undistortDepth(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_depth = 0;
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_undistorted = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("undistortDepth (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_depth,&__pyx_n_s_undistorted,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_depth)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_undistorted)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("undistortDepth", 1, 2, 2, 1); __PYX_ERR(0, 797, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "undistortDepth") < 0)) __PYX_ERR(0, 797, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_depth = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)values[0]);
    __pyx_v_undistorted = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("undistortDepth", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 797, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Registration.undistortDepth", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_depth), __pyx_ptype_14pylibfreenect2_12libfreenect2_Frame, 1, "depth", 0))) __PYX_ERR(0, 797, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_undistorted), __pyx_ptype_14pylibfreenect2_12libfreenect2_Frame, 1, "undistorted", 0))) __PYX_ERR(0, 797, __pyx_L1_error)
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_12Registration_6undistortDepth(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *)__pyx_v_self), __pyx_v_depth, __pyx_v_undistorted);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_12Registration_6undistortDepth(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *__pyx_v_self, struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_depth, struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_undistorted) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("undistortDepth", 0);

  /* "pylibfreenect2/libfreenect2.pyx":814
 *         """
 * 
 *         if depth.width != 512 or depth.height != 424:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "Shape of depth frame {}x{} is invalid. Expected 512x424.".format(
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_depth), __pyx_n_s_width); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_512, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_depth), __pyx_n_s_height); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_424, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pylibfreenect2/libfreenect2.pyx":816
 *         if depth.width != 512 or depth.height != 424:
 *             raise ValueError(
 *                 "Shape of depth frame {}x{} is invalid. Expected 512x424.".format(             # <<<<<<<<<<<<<<
 *                 depth.width, depth.height))
 *         if undistorted.width != 512 or undistorted.height != 424:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Shape_of_depth_frame_x_is_invali, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "pylibfreenect2/libfreenect2.pyx":817
 *             raise ValueError(
 *                 "Shape of depth frame {}x{} is invalid. Expected 512x424.".format(
 *                 depth.width, depth.height))             # <<<<<<<<<<<<<<
 *         if undistorted.width != 512 or undistorted.height != 424:
 *             raise ValueError(
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_depth), __pyx_n_s_width); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_depth), __pyx_n_s_height); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 816, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 816, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 816, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_6);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 816, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pylibfreenect2/libfreenect2.pyx":815
 * 
 *         if depth.width != 512 or depth.height != 424:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "Shape of depth frame {}x{} is invalid. Expected 512x424.".format(
 *                 depth.width, depth.height))
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 815, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 815, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 815, __pyx_L1_error)

    /* "pylibfreenect2/libfreenect2.pyx":814
 *         """
 * 
 *         if depth.width != 512 or depth.height != 424:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "Shape of depth frame {}x{} is invalid. Expected 512x424.".format(
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":818
 *                 "Shape of depth frame {}x{} is invalid. Expected 512x424.".format(
 *                 depth.width, depth.height))
 *         if undistorted.width != 512 or undistorted.height != 424:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "Shape of undistorted frame {}x{} is invalid. Expected 512x424.".format(
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_undistorted), __pyx_n_s_width); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_512, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_undistorted), __pyx_n_s_height); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_424, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_4;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pylibfreenect2/libfreenect2.pyx":820
 *         if undistorted.width != 512 or undistorted.height != 424:
 *             raise ValueError(
 *                 "Shape of undistorted frame {}x{} is invalid. Expected 512x424.".format(             # <<<<<<<<<<<<<<
 *                 undistorted.width, undistorted.height))
 *         self.ptr.undistortDepth(depth.ptr, undistorted.ptr)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Shape_of_undistorted_frame_x_is, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "pylibfreenect2/libfreenect2.pyx":821
 *             raise ValueError(
 *                 "Shape of undistorted frame {}x{} is invalid. Expected 512x424.".format(
 *                 undistorted.width, undistorted.height))             # <<<<<<<<<<<<<<
 *         self.ptr.undistortDepth(depth.ptr, undistorted.ptr)
 * 
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_undistorted), __pyx_n_s_width); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_undistorted), __pyx_n_s_height); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_9, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 820, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_9, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 820, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 820, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_8, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_8, __pyx_t_6);
      __pyx_t_9 = 0;
      __pyx_t_6 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 820, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pylibfreenect2/libfreenect2.pyx":819
 *                 depth.width, depth.height))
 *         if undistorted.width != 512 or undistorted.height != 424:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "Shape of undistorted frame {}x{} is invalid. Expected 512x424.".format(
 *                 undistorted.width, undistorted.height))
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 819, __pyx_L1_error)

    /* "pylibfreenect2/libfreenect2.pyx":818
 *                 "Shape of depth frame {}x{} is invalid. Expected 512x424.".format(
 *                 depth.width, depth.height))
 *         if undistorted.width != 512 or undistorted.height != 424:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 "Shape of undistorted frame {}x{} is invalid. Expected 512x424.".format(
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":822
 *                 "Shape of undistorted frame {}x{} is invalid. Expected 512x424.".format(
 *                 undistorted.width, undistorted.height))
 *         self.ptr.undistortDepth(depth.ptr, undistorted.ptr)             # <<<<<<<<<<<<<<
 * 
 *     def getPointXYZRGB(self, Frame undistorted, Frame registered, r, c):
 */
  __pyx_v_self->ptr->undistortDepth(__pyx_v_depth->ptr, __pyx_v_undistorted->ptr);

  /* "pylibfreenect2/libfreenect2.pyx":797
 *             enable_filter, bigdepth_ptr, color_depth_map_ptr)
 * 
 *     def undistortDepth(self, Frame depth, Frame undistorted):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Registration::undistortDepth(bool, bool)``.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Registration.undistortDepth", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":824
 *         self.ptr.undistortDepth(depth.ptr, undistorted.ptr)
 * 
 *     def getPointXYZRGB(self, Frame undistorted, Frame registered, r, c):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Registration::getPointXYZRGB``.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_9getPointXYZRGB(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_12Registration_8getPointXYZRGB[] = "Same as ``libfreenect2::Registration::getPointXYZRGB``.\n\n        Parameters\n        ----------\n        undistorted : Frame\n            ``(512, 424)`` Undistorted depth frame\n\n        registered : Frame\n            ``(512, 424)`` Registered color frame\n\n        r : int\n            Row (y) index in depth image\n\n        c : int\n            Column (x) index in depth image.\n\n        Returns\n        -------\n        tuple : (X coordinate of the 3-D point (meter),\n                 Y coordinate of the 3-D point (meter),\n                 Z coordinate of the 3-D point (meter),\n                 B,\n                 G,\n                 R)\n\n        ";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_9getPointXYZRGB(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_undistorted = 0;
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_registered = 0;
  PyObject *__pyx_v_r = 0;
  PyObject *__pyx_v_c = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPointXYZRGB (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_undistorted,&__pyx_n_s_registered,&__pyx_n_s_r,&__pyx_n_s_c,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_undistorted)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_registered)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getPointXYZRGB", 1, 4, 4, 1); __PYX_ERR(0, 824, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getPointXYZRGB", 1, 4, 4, 2); __PYX_ERR(0, 824, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getPointXYZRGB", 1, 4, 4, 3); __PYX_ERR(0, 824, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getPointXYZRGB") < 0)) __PYX_ERR(0, 824, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_undistorted = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)values[0]);
    __pyx_v_registered = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)values[1]);
    __pyx_v_r = values[2];
    __pyx_v_c = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getPointXYZRGB", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 824, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Registration.getPointXYZRGB", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_undistorted), __pyx_ptype_14pylibfreenect2_12libfreenect2_Frame, 1, "undistorted", 0))) __PYX_ERR(0, 824, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_registered), __pyx_ptype_14pylibfreenect2_12libfreenect2_Frame, 1, "registered", 0))) __PYX_ERR(0, 824, __pyx_L1_error)
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_12Registration_8getPointXYZRGB(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *)__pyx_v_self), __pyx_v_undistorted, __pyx_v_registered, __pyx_v_r, __pyx_v_c);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_12Registration_8getPointXYZRGB(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *__pyx_v_self, struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_undistorted, struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_registered, PyObject *__pyx_v_r, PyObject *__pyx_v_c) {
  float __pyx_v_x;
  float __pyx_v_y;
  float __pyx_v_z;
  float __pyx_v_rgb;
  uint8_t *__pyx_v_bgrptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("getPointXYZRGB", 0);

  /* "pylibfreenect2/libfreenect2.pyx":851
 * 
 *         """
 *         cdef float x = 0, y = 0, z = 0, rgb = 0             # <<<<<<<<<<<<<<
 *         self.ptr.getPointXYZRGB(undistorted.ptr, registered.ptr, r, c, x, y, z, rgb)
 *         cdef uint8_t* bgrptr = reinterpret_cast[uint8_pt](&rgb);
 */
  __pyx_v_x = 0.0;
  __pyx_v_y = 0.0;
  __pyx_v_z = 0.0;
  __pyx_v_rgb = 0.0;

  /* "pylibfreenect2/libfreenect2.pyx":852
 *         """
 *         cdef float x = 0, y = 0, z = 0, rgb = 0
 *         self.ptr.getPointXYZRGB(undistorted.ptr, registered.ptr, r, c, x, y, z, rgb)             # <<<<<<<<<<<<<<
 *         cdef uint8_t* bgrptr = reinterpret_cast[uint8_pt](&rgb);
 *         return (x, y, z, bgrptr[0], bgrptr[1], bgrptr[2])
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_r); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 852, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_c); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 852, __pyx_L1_error)
  __pyx_v_self->ptr->getPointXYZRGB(__pyx_v_undistorted->ptr, __pyx_v_registered->ptr, __pyx_t_1, __pyx_t_2, __pyx_v_x, __pyx_v_y, __pyx_v_z, __pyx_v_rgb);

  /* "pylibfreenect2/libfreenect2.pyx":853
 *         cdef float x = 0, y = 0, z = 0, rgb = 0
 *         self.ptr.getPointXYZRGB(undistorted.ptr, registered.ptr, r, c, x, y, z, rgb)
 *         cdef uint8_t* bgrptr = reinterpret_cast[uint8_pt](&rgb);             # <<<<<<<<<<<<<<
 *         return (x, y, z, bgrptr[0], bgrptr[1], bgrptr[2])
 * 
 */
  __pyx_v_bgrptr = reinterpret_cast<__pyx_t_14pylibfreenect2_12libfreenect2_uint8_pt>((&__pyx_v_rgb));

  /* "pylibfreenect2/libfreenect2.pyx":854
 *         self.ptr.getPointXYZRGB(undistorted.ptr, registered.ptr, r, c, x, y, z, rgb)
 *         cdef uint8_t* bgrptr = reinterpret_cast[uint8_pt](&rgb);
 *         return (x, y, z, bgrptr[0], bgrptr[1], bgrptr[2])             # <<<<<<<<<<<<<<
 * 
 *     def getPointXYZ(self, Frame undistorted, r, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_z); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_uint8_t((__pyx_v_bgrptr[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyInt_From_uint8_t((__pyx_v_bgrptr[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_uint8_t((__pyx_v_bgrptr[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 4, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 5, __pyx_t_8);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":824
 *         self.ptr.undistortDepth(depth.ptr, undistorted.ptr)
 * 
 *     def getPointXYZRGB(self, Frame undistorted, Frame registered, r, c):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Registration::getPointXYZRGB``.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Registration.getPointXYZRGB", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":856
 *         return (x, y, z, bgrptr[0], bgrptr[1], bgrptr[2])
 * 
 *     def getPointXYZ(self, Frame undistorted, r, c):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Registration::getPointXYZ``.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_11getPointXYZ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_12Registration_10getPointXYZ[] = "Same as ``libfreenect2::Registration::getPointXYZ``.\n\n        Parameters\n        ----------\n        undistorted : Frame\n            ``(512, 424)`` Undistorted depth frame\n\n        r : int\n            Row (y) index in depth image\n\n        c : int\n            Column (x) index in depth image.\n\n        Returns\n        -------\n        tuple : (X coordinate of the 3-D point (meter),\n                 Y coordinate of the 3-D point (meter),\n                 Z coordinate of the 3-D point (meter))\n\n        ";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_11getPointXYZ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_undistorted = 0;
  PyObject *__pyx_v_r = 0;
  PyObject *__pyx_v_c = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPointXYZ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_undistorted,&__pyx_n_s_r,&__pyx_n_s_c,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_undistorted)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getPointXYZ", 1, 3, 3, 1); __PYX_ERR(0, 856, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getPointXYZ", 1, 3, 3, 2); __PYX_ERR(0, 856, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getPointXYZ") < 0)) __PYX_ERR(0, 856, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_undistorted = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)values[0]);
    __pyx_v_r = values[1];
    __pyx_v_c = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getPointXYZ", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 856, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Registration.getPointXYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_undistorted), __pyx_ptype_14pylibfreenect2_12libfreenect2_Frame, 1, "undistorted", 0))) __PYX_ERR(0, 856, __pyx_L1_error)
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_12Registration_10getPointXYZ(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *)__pyx_v_self), __pyx_v_undistorted, __pyx_v_r, __pyx_v_c);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_12Registration_10getPointXYZ(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *__pyx_v_self, struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *__pyx_v_undistorted, PyObject *__pyx_v_r, PyObject *__pyx_v_c) {
  float __pyx_v_x;
  float __pyx_v_y;
  float __pyx_v_z;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("getPointXYZ", 0);

  /* "pylibfreenect2/libfreenect2.pyx":877
 * 
 *         """
 *         cdef float x = 0, y = 0, z = 0             # <<<<<<<<<<<<<<
 *         self.ptr.getPointXYZ(undistorted.ptr, r, c, x, y, z)
 *         return (x, y, z)
 */
  __pyx_v_x = 0.0;
  __pyx_v_y = 0.0;
  __pyx_v_z = 0.0;

  /* "pylibfreenect2/libfreenect2.pyx":878
 *         """
 *         cdef float x = 0, y = 0, z = 0
 *         self.ptr.getPointXYZ(undistorted.ptr, r, c, x, y, z)             # <<<<<<<<<<<<<<
 *         return (x, y, z)
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_r); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 878, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_c); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 878, __pyx_L1_error)
  __pyx_v_self->ptr->getPointXYZ(__pyx_v_undistorted->ptr, __pyx_t_1, __pyx_t_2, __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* "pylibfreenect2/libfreenect2.pyx":879
 *         cdef float x = 0, y = 0, z = 0
 *         self.ptr.getPointXYZ(undistorted.ptr, r, c, x, y, z)
 *         return (x, y, z)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_z); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":856
 *         return (x, y, z, bgrptr[0], bgrptr[1], bgrptr[2])
 * 
 *     def getPointXYZ(self, Frame undistorted, r, c):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Registration::getPointXYZ``.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Registration.getPointXYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_12Registration_12__reduce_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_12Registration_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Registration.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_12Registration_14__setstate_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_12Registration_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Registration.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":896
 *     cdef libfreenect2.Logger* ptr
 * 
 *     def level(self):             # <<<<<<<<<<<<<<
 *         """Same as ``Level level()``"""
 *         return self.ptr.level()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_6Logger_1level(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_6Logger_level[] = "Same as ``Level level()``";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_6Logger_1level(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("level (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_6Logger_level(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_6Logger_level(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("level", 0);

  /* "pylibfreenect2/libfreenect2.pyx":898
 *     def level(self):
 *         """Same as ``Level level()``"""
 *         return self.ptr.level()             # <<<<<<<<<<<<<<
 * 
 *     def log(self, level, message):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_enum__libfreenect2_3a__3a_Logger_3a__3a_Level(__pyx_v_self->ptr->level()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":896
 *     cdef libfreenect2.Logger* ptr
 * 
 *     def level(self):             # <<<<<<<<<<<<<<
 *         """Same as ``Level level()``"""
 *         return self.ptr.level()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Logger.level", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":900
 *         return self.ptr.level()
 * 
 *     def log(self, level, message):             # <<<<<<<<<<<<<<
 *         """Same as ``void log(Level level, const std::string &messagge)``"""
 *         self.ptr.log(level, message)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_6Logger_3log(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_6Logger_2log[] = "Same as ``void log(Level level, const std::string &messagge)``";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_6Logger_3log(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_level = 0;
  PyObject *__pyx_v_message = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("log (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_level,&__pyx_n_s_message,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_level)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_message)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("log", 1, 2, 2, 1); __PYX_ERR(0, 900, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "log") < 0)) __PYX_ERR(0, 900, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_level = values[0];
    __pyx_v_message = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("log", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 900, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Logger.log", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_6Logger_2log(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *)__pyx_v_self), __pyx_v_level, __pyx_v_message);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_6Logger_2log(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *__pyx_v_self, PyObject *__pyx_v_level, PyObject *__pyx_v_message) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  enum libfreenect2::Logger::Level __pyx_t_1;
  std::string __pyx_t_2;
  __Pyx_RefNannySetupContext("log", 0);

  /* "pylibfreenect2/libfreenect2.pyx":902
 *     def log(self, level, message):
 *         """Same as ``void log(Level level, const std::string &messagge)``"""
 *         self.ptr.log(level, message)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((enum libfreenect2::Logger::Level)__Pyx_PyInt_As_enum__libfreenect2_3a__3a_Logger_3a__3a_Level(__pyx_v_level)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 902, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_message); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 902, __pyx_L1_error)
  __pyx_v_self->ptr->log(__pyx_t_1, __pyx_t_2);

  /* "pylibfreenect2/libfreenect2.pyx":900
 *         return self.ptr.level()
 * 
 *     def log(self, level, message):             # <<<<<<<<<<<<<<
 *         """Same as ``void log(Level level, const std::string &messagge)``"""
 *         self.ptr.log(level, message)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Logger.log", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_6Logger_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_6Logger_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_6Logger_4__reduce_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_6Logger_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Logger.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_6Logger_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_6Logger_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_6Logger_6__setstate_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_6Logger_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Logger.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":905
 * 
 * 
 * def createConsoleLogger(level):             # <<<<<<<<<<<<<<
 *     """Same as ``Logger* libfreenect2::createConsoleLogger(Level level)``
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_1createConsoleLogger(PyObject *__pyx_self, PyObject *__pyx_v_level); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_createConsoleLogger[] = "Same as ``Logger* libfreenect2::createConsoleLogger(Level level)``\n\n    Parameters\n    ----------\n    level : pylibfreenect2.LoggerLevel\n        Logger level\n\n    Returns\n    -------\n    logger : Logger\n        Allocated logger\n\n    Examples\n    --------\n    .. code-block:: python\n\n        logger = pylibfreenect2.createConsoleLogger(\n            pylibfreenect2.LoggerLevel.Debug)\n\n    See also\n    --------\n\n    pylibfreenect2.LoggerLevel\n    pylibfreenect2.libfreenect2.createConsoleLoggerWithDefaultLevel\n    ";
static PyMethodDef __pyx_mdef_14pylibfreenect2_12libfreenect2_1createConsoleLogger = {"createConsoleLogger", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_1createConsoleLogger, METH_O, __pyx_doc_14pylibfreenect2_12libfreenect2_createConsoleLogger};
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_1createConsoleLogger(PyObject *__pyx_self, PyObject *__pyx_v_level) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createConsoleLogger (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_createConsoleLogger(__pyx_self, ((PyObject *)__pyx_v_level));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_createConsoleLogger(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_level) {
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *__pyx_v_logger = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  enum libfreenect2::Logger::Level __pyx_t_2;
  __Pyx_RefNannySetupContext("createConsoleLogger", 0);

  /* "pylibfreenect2/libfreenect2.pyx":931
 *     pylibfreenect2.libfreenect2.createConsoleLoggerWithDefaultLevel
 *     """
 *     cdef Logger logger = Logger()             # <<<<<<<<<<<<<<
 *     logger.ptr = libfreenect2.createConsoleLogger(level)
 *     return logger
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14pylibfreenect2_12libfreenect2_Logger), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_logger = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pylibfreenect2/libfreenect2.pyx":932
 *     """
 *     cdef Logger logger = Logger()
 *     logger.ptr = libfreenect2.createConsoleLogger(level)             # <<<<<<<<<<<<<<
 *     return logger
 * 
 */
  __pyx_t_2 = ((enum libfreenect2::Logger::Level)__Pyx_PyInt_As_enum__libfreenect2_3a__3a_Logger_3a__3a_Level(__pyx_v_level)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L1_error)
  __pyx_v_logger->ptr = libfreenect2::createConsoleLogger(__pyx_t_2);

  /* "pylibfreenect2/libfreenect2.pyx":933
 *     cdef Logger logger = Logger()
 *     logger.ptr = libfreenect2.createConsoleLogger(level)
 *     return logger             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_logger));
  __pyx_r = ((PyObject *)__pyx_v_logger);
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":905
 * 
 * 
 * def createConsoleLogger(level):             # <<<<<<<<<<<<<<
 *     """Same as ``Logger* libfreenect2::createConsoleLogger(Level level)``
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.createConsoleLogger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_logger);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":936
 * 
 * 
 * def createConsoleLoggerWithDefaultLevel():             # <<<<<<<<<<<<<<
 *     """Same as ``Logger* libfreenect2::createConsoleLoggerWithDefaultLevel()``
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_3createConsoleLoggerWithDefaultLevel(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_2createConsoleLoggerWithDefaultLevel[] = "Same as ``Logger* libfreenect2::createConsoleLoggerWithDefaultLevel()``\n\n    Returns\n    -------\n    logger : Logger\n        Allocated logger\n\n    See also\n    --------\n\n    pylibfreenect2.libfreenect2.createConsoleLogger\n    ";
static PyMethodDef __pyx_mdef_14pylibfreenect2_12libfreenect2_3createConsoleLoggerWithDefaultLevel = {"createConsoleLoggerWithDefaultLevel", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_3createConsoleLoggerWithDefaultLevel, METH_NOARGS, __pyx_doc_14pylibfreenect2_12libfreenect2_2createConsoleLoggerWithDefaultLevel};
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_3createConsoleLoggerWithDefaultLevel(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createConsoleLoggerWithDefaultLevel (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_2createConsoleLoggerWithDefaultLevel(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_2createConsoleLoggerWithDefaultLevel(CYTHON_UNUSED PyObject *__pyx_self) {
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *__pyx_v_logger = 0;
  libfreenect2::Logger *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("createConsoleLoggerWithDefaultLevel", 0);

  /* "pylibfreenect2/libfreenect2.pyx":949
 *     pylibfreenect2.libfreenect2.createConsoleLogger
 *     """
 *     cdef Logger logger = Logger()             # <<<<<<<<<<<<<<
 *     cdef libfreenect2.Logger* ptr = libfreenect2.createConsoleLoggerWithDefaultLevel()
 *     logger.ptr = <libfreenect2.Logger*>ptr
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14pylibfreenect2_12libfreenect2_Logger), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_logger = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pylibfreenect2/libfreenect2.pyx":950
 *     """
 *     cdef Logger logger = Logger()
 *     cdef libfreenect2.Logger* ptr = libfreenect2.createConsoleLoggerWithDefaultLevel()             # <<<<<<<<<<<<<<
 *     logger.ptr = <libfreenect2.Logger*>ptr
 *     return logger
 */
  __pyx_v_ptr = libfreenect2::createConsoleLoggerWithDefaultLevel();

  /* "pylibfreenect2/libfreenect2.pyx":951
 *     cdef Logger logger = Logger()
 *     cdef libfreenect2.Logger* ptr = libfreenect2.createConsoleLoggerWithDefaultLevel()
 *     logger.ptr = <libfreenect2.Logger*>ptr             # <<<<<<<<<<<<<<
 *     return logger
 * 
 */
  __pyx_v_logger->ptr = ((libfreenect2::Logger *)__pyx_v_ptr);

  /* "pylibfreenect2/libfreenect2.pyx":952
 *     cdef libfreenect2.Logger* ptr = libfreenect2.createConsoleLoggerWithDefaultLevel()
 *     logger.ptr = <libfreenect2.Logger*>ptr
 *     return logger             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_logger));
  __pyx_r = ((PyObject *)__pyx_v_logger);
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":936
 * 
 * 
 * def createConsoleLoggerWithDefaultLevel():             # <<<<<<<<<<<<<<
 *     """Same as ``Logger* libfreenect2::createConsoleLoggerWithDefaultLevel()``
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.createConsoleLoggerWithDefaultLevel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_logger);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":955
 * 
 * 
 * def getGlobalLogger():             # <<<<<<<<<<<<<<
 *     """Same as ``Logger* libfreenect2::getGlobalLogger()``"""
 *     cdef Logger logger = Logger()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5getGlobalLogger(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_4getGlobalLogger[] = "Same as ``Logger* libfreenect2::getGlobalLogger()``";
static PyMethodDef __pyx_mdef_14pylibfreenect2_12libfreenect2_5getGlobalLogger = {"getGlobalLogger", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_5getGlobalLogger, METH_NOARGS, __pyx_doc_14pylibfreenect2_12libfreenect2_4getGlobalLogger};
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_5getGlobalLogger(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getGlobalLogger (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_4getGlobalLogger(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_4getGlobalLogger(CYTHON_UNUSED PyObject *__pyx_self) {
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *__pyx_v_logger = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getGlobalLogger", 0);

  /* "pylibfreenect2/libfreenect2.pyx":957
 * def getGlobalLogger():
 *     """Same as ``Logger* libfreenect2::getGlobalLogger()``"""
 *     cdef Logger logger = Logger()             # <<<<<<<<<<<<<<
 *     logger.ptr = libfreenect2.getGlobalLogger()
 *     return logger
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14pylibfreenect2_12libfreenect2_Logger), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_logger = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pylibfreenect2/libfreenect2.pyx":958
 *     """Same as ``Logger* libfreenect2::getGlobalLogger()``"""
 *     cdef Logger logger = Logger()
 *     logger.ptr = libfreenect2.getGlobalLogger()             # <<<<<<<<<<<<<<
 *     return logger
 * 
 */
  __pyx_v_logger->ptr = libfreenect2::getGlobalLogger();

  /* "pylibfreenect2/libfreenect2.pyx":959
 *     cdef Logger logger = Logger()
 *     logger.ptr = libfreenect2.getGlobalLogger()
 *     return logger             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_logger));
  __pyx_r = ((PyObject *)__pyx_v_logger);
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":955
 * 
 * 
 * def getGlobalLogger():             # <<<<<<<<<<<<<<
 *     """Same as ``Logger* libfreenect2::getGlobalLogger()``"""
 *     cdef Logger logger = Logger()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.getGlobalLogger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_logger);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":962
 * 
 * 
 * def setGlobalLogger(Logger logger=None):             # <<<<<<<<<<<<<<
 *     """Same as ``void libfreenect2::getGlobalLogger(Logger*)``
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_7setGlobalLogger(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_6setGlobalLogger[] = "Same as ``void libfreenect2::getGlobalLogger(Logger*)``\n\n    Parameters\n    ----------\n    logger : Logger\n        Python side instance for ``libfreenect2::Logger*``. If None,\n        ``setGlobalLogger(NULL)`` will be called, i.e. logging is disabled.\n        Default is None.\n\n    ";
static PyMethodDef __pyx_mdef_14pylibfreenect2_12libfreenect2_7setGlobalLogger = {"setGlobalLogger", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_7setGlobalLogger, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14pylibfreenect2_12libfreenect2_6setGlobalLogger};
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_7setGlobalLogger(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *__pyx_v_logger = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setGlobalLogger (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_logger,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_logger);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setGlobalLogger") < 0)) __PYX_ERR(0, 962, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_logger = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setGlobalLogger", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 962, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.setGlobalLogger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_logger), __pyx_ptype_14pylibfreenect2_12libfreenect2_Logger, 1, "logger", 0))) __PYX_ERR(0, 962, __pyx_L1_error)
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_6setGlobalLogger(__pyx_self, __pyx_v_logger);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_6setGlobalLogger(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger *__pyx_v_logger) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("setGlobalLogger", 0);

  /* "pylibfreenect2/libfreenect2.pyx":973
 * 
 *     """
 *     if logger is None:             # <<<<<<<<<<<<<<
 *         libfreenect2.setGlobalLogger(NULL)
 *     else:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_logger) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pylibfreenect2/libfreenect2.pyx":974
 *     """
 *     if logger is None:
 *         libfreenect2.setGlobalLogger(NULL)             # <<<<<<<<<<<<<<
 *     else:
 *         libfreenect2.setGlobalLogger(logger.ptr)
 */
    libfreenect2::setGlobalLogger(NULL);

    /* "pylibfreenect2/libfreenect2.pyx":973
 * 
 *     """
 *     if logger is None:             # <<<<<<<<<<<<<<
 *         libfreenect2.setGlobalLogger(NULL)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "pylibfreenect2/libfreenect2.pyx":976
 *         libfreenect2.setGlobalLogger(NULL)
 *     else:
 *         libfreenect2.setGlobalLogger(logger.ptr)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    libfreenect2::setGlobalLogger(__pyx_v_logger->ptr);
  }
  __pyx_L3:;

  /* "pylibfreenect2/libfreenect2.pyx":962
 * 
 * 
 * def setGlobalLogger(Logger logger=None):             # <<<<<<<<<<<<<<
 *     """Same as ``void libfreenect2::getGlobalLogger(Logger*)``
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.pipeline_ptr_alias cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_14PacketPipeline_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_14PacketPipeline_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_14PacketPipeline___reduce_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_14PacketPipeline___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.pipeline_ptr_alias cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.pipeline_ptr_alias cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.pipeline_ptr_alias cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.PacketPipeline.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.pipeline_ptr_alias cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.pipeline_ptr_alias cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_14PacketPipeline_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_14PacketPipeline_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_14PacketPipeline_2__setstate_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_14PacketPipeline_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.pipeline_ptr_alias cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.pipeline_ptr_alias cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.pipeline_ptr_alias cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.pipeline_ptr_alias cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.PacketPipeline.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":1011
 *     cdef libfreenect2.CpuPacketPipeline* pipeline
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.pipeline = new libfreenect2.CpuPacketPipeline()
 *         self.pipeline_ptr_alias = <libfreenect2.PacketPipeline*>self.pipeline
 */

/* Python wrapper */
static int __pyx_pw_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline___cinit__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_CpuPacketPipeline *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline___cinit__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_CpuPacketPipeline *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":1012
 * 
 *     def __cinit__(self):
 *         self.pipeline = new libfreenect2.CpuPacketPipeline()             # <<<<<<<<<<<<<<
 *         self.pipeline_ptr_alias = <libfreenect2.PacketPipeline*>self.pipeline
 *         self.owned_by_device = False
 */
  __pyx_v_self->pipeline = new libfreenect2::CpuPacketPipeline();

  /* "pylibfreenect2/libfreenect2.pyx":1013
 *     def __cinit__(self):
 *         self.pipeline = new libfreenect2.CpuPacketPipeline()
 *         self.pipeline_ptr_alias = <libfreenect2.PacketPipeline*>self.pipeline             # <<<<<<<<<<<<<<
 *         self.owned_by_device = False
 * 
 */
  __pyx_v_self->__pyx_base.pipeline_ptr_alias = ((libfreenect2::PacketPipeline *)__pyx_v_self->pipeline);

  /* "pylibfreenect2/libfreenect2.pyx":1014
 *         self.pipeline = new libfreenect2.CpuPacketPipeline()
 *         self.pipeline_ptr_alias = <libfreenect2.PacketPipeline*>self.pipeline
 *         self.owned_by_device = False             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->__pyx_base.owned_by_device = 0;

  /* "pylibfreenect2/libfreenect2.pyx":1011
 *     cdef libfreenect2.CpuPacketPipeline* pipeline
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.pipeline = new libfreenect2.CpuPacketPipeline()
 *         self.pipeline_ptr_alias = <libfreenect2.PacketPipeline*>self.pipeline
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":1016
 *         self.owned_by_device = False
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.owned_by_device:
 *             if self.pipeline is not NULL:
 */

/* Python wrapper */
static void __pyx_pw_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline_2__dealloc__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_CpuPacketPipeline *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline_2__dealloc__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_CpuPacketPipeline *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":1017
 * 
 *     def __dealloc__(self):
 *         if not self.owned_by_device:             # <<<<<<<<<<<<<<
 *             if self.pipeline is not NULL:
 *                 del self.pipeline
 */
  __pyx_t_1 = ((!(__pyx_v_self->__pyx_base.owned_by_device != 0)) != 0);
  if (__pyx_t_1) {

    /* "pylibfreenect2/libfreenect2.pyx":1018
 *     def __dealloc__(self):
 *         if not self.owned_by_device:
 *             if self.pipeline is not NULL:             # <<<<<<<<<<<<<<
 *                 del self.pipeline
 * 
 */
    __pyx_t_1 = ((__pyx_v_self->pipeline != NULL) != 0);
    if (__pyx_t_1) {

      /* "pylibfreenect2/libfreenect2.pyx":1019
 *         if not self.owned_by_device:
 *             if self.pipeline is not NULL:
 *                 del self.pipeline             # <<<<<<<<<<<<<<
 * 
 * IF LIBFREENECT2_WITH_OPENGL_SUPPORT == True:
 */
      delete __pyx_v_self->pipeline;

      /* "pylibfreenect2/libfreenect2.pyx":1018
 *     def __dealloc__(self):
 *         if not self.owned_by_device:
 *             if self.pipeline is not NULL:             # <<<<<<<<<<<<<<
 *                 del self.pipeline
 * 
 */
    }

    /* "pylibfreenect2/libfreenect2.pyx":1017
 * 
 *     def __dealloc__(self):
 *         if not self.owned_by_device:             # <<<<<<<<<<<<<<
 *             if self.pipeline is not NULL:
 *                 del self.pipeline
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":1016
 *         self.owned_by_device = False
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.owned_by_device:
 *             if self.pipeline is not NULL:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline_4__reduce_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_CpuPacketPipeline *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_CpuPacketPipeline *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.CpuPacketPipeline.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline_6__setstate_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_CpuPacketPipeline *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_CpuPacketPipeline *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.CpuPacketPipeline.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/opengl_packet_pipeline.pxi":16
 *     cdef libfreenect2.OpenGLPacketPipeline* pipeline
 * 
 *     def __cinit__(self, bool debug=False):             # <<<<<<<<<<<<<<
 *         self.pipeline = new libfreenect2.OpenGLPacketPipeline(NULL, debug)
 *         self.pipeline_ptr_alias = <libfreenect2.PacketPipeline*>self.pipeline
 */

/* Python wrapper */
static int __pyx_pw_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_debug;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_debug,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_debug);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(2, 16, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_debug = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_debug == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(2, 16, __pyx_L3_error)
    } else {
      __pyx_v_debug = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 16, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.OpenGLPacketPipeline.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline___cinit__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline *)__pyx_v_self), __pyx_v_debug);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline___cinit__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline *__pyx_v_self, bool __pyx_v_debug) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pylibfreenect2/opengl_packet_pipeline.pxi":17
 * 
 *     def __cinit__(self, bool debug=False):
 *         self.pipeline = new libfreenect2.OpenGLPacketPipeline(NULL, debug)             # <<<<<<<<<<<<<<
 *         self.pipeline_ptr_alias = <libfreenect2.PacketPipeline*>self.pipeline
 *         self.owned_by_device = False
 */
  __pyx_v_self->pipeline = new libfreenect2::OpenGLPacketPipeline(NULL, __pyx_v_debug);

  /* "pylibfreenect2/opengl_packet_pipeline.pxi":18
 *     def __cinit__(self, bool debug=False):
 *         self.pipeline = new libfreenect2.OpenGLPacketPipeline(NULL, debug)
 *         self.pipeline_ptr_alias = <libfreenect2.PacketPipeline*>self.pipeline             # <<<<<<<<<<<<<<
 *         self.owned_by_device = False
 * 
 */
  __pyx_v_self->__pyx_base.pipeline_ptr_alias = ((libfreenect2::PacketPipeline *)__pyx_v_self->pipeline);

  /* "pylibfreenect2/opengl_packet_pipeline.pxi":19
 *         self.pipeline = new libfreenect2.OpenGLPacketPipeline(NULL, debug)
 *         self.pipeline_ptr_alias = <libfreenect2.PacketPipeline*>self.pipeline
 *         self.owned_by_device = False             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->__pyx_base.owned_by_device = 0;

  /* "pylibfreenect2/opengl_packet_pipeline.pxi":16
 *     cdef libfreenect2.OpenGLPacketPipeline* pipeline
 * 
 *     def __cinit__(self, bool debug=False):             # <<<<<<<<<<<<<<
 *         self.pipeline = new libfreenect2.OpenGLPacketPipeline(NULL, debug)
 *         self.pipeline_ptr_alias = <libfreenect2.PacketPipeline*>self.pipeline
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/opengl_packet_pipeline.pxi":21
 *         self.owned_by_device = False
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.owned_by_device:
 *             if self.pipeline is not NULL:
 */

/* Python wrapper */
static void __pyx_pw_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline_2__dealloc__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline_2__dealloc__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pylibfreenect2/opengl_packet_pipeline.pxi":22
 * 
 *     def __dealloc__(self):
 *         if not self.owned_by_device:             # <<<<<<<<<<<<<<
 *             if self.pipeline is not NULL:
 *                 del self.pipeline
 */
  __pyx_t_1 = ((!(__pyx_v_self->__pyx_base.owned_by_device != 0)) != 0);
  if (__pyx_t_1) {

    /* "pylibfreenect2/opengl_packet_pipeline.pxi":23
 *     def __dealloc__(self):
 *         if not self.owned_by_device:
 *             if self.pipeline is not NULL:             # <<<<<<<<<<<<<<
 *                 del self.pipeline
 */
    __pyx_t_1 = ((__pyx_v_self->pipeline != NULL) != 0);
    if (__pyx_t_1) {

      /* "pylibfreenect2/opengl_packet_pipeline.pxi":24
 *         if not self.owned_by_device:
 *             if self.pipeline is not NULL:
 *                 del self.pipeline             # <<<<<<<<<<<<<<
 */
      delete __pyx_v_self->pipeline;

      /* "pylibfreenect2/opengl_packet_pipeline.pxi":23
 *     def __dealloc__(self):
 *         if not self.owned_by_device:
 *             if self.pipeline is not NULL:             # <<<<<<<<<<<<<<
 *                 del self.pipeline
 */
    }

    /* "pylibfreenect2/opengl_packet_pipeline.pxi":22
 * 
 *     def __dealloc__(self):
 *         if not self.owned_by_device:             # <<<<<<<<<<<<<<
 *             if self.pipeline is not NULL:
 *                 del self.pipeline
 */
  }

  /* "pylibfreenect2/opengl_packet_pipeline.pxi":21
 *         self.owned_by_device = False
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.owned_by_device:
 *             if self.pipeline is not NULL:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline_4__reduce_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.OpenGLPacketPipeline.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline_6__setstate_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.OpenGLPacketPipeline.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":1071
 *     cdef _Freenect2Device* ptr
 * 
 *     def getSerialNumber(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::getSerialNumber()``"""
 *         return self.ptr.getSerialNumber()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_1getSerialNumber(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_15Freenect2Device_getSerialNumber[] = "Same as ``libfreenect2::Freenect2Device::getSerialNumber()``";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_1getSerialNumber(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSerialNumber (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_getSerialNumber(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_getSerialNumber(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getSerialNumber", 0);

  /* "pylibfreenect2/libfreenect2.pyx":1073
 *     def getSerialNumber(self):
 *         """Same as ``libfreenect2::Freenect2Device::getSerialNumber()``"""
 *         return self.ptr.getSerialNumber()             # <<<<<<<<<<<<<<
 * 
 *     def getFirmwareVersion(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->ptr->getSerialNumber()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":1071
 *     cdef _Freenect2Device* ptr
 * 
 *     def getSerialNumber(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::getSerialNumber()``"""
 *         return self.ptr.getSerialNumber()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Freenect2Device.getSerialNumber", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":1075
 *         return self.ptr.getSerialNumber()
 * 
 *     def getFirmwareVersion(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::getFirmwareVersion()``"""
 *         return self.ptr.getFirmwareVersion()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_3getFirmwareVersion(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_15Freenect2Device_2getFirmwareVersion[] = "Same as ``libfreenect2::Freenect2Device::getFirmwareVersion()``";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_3getFirmwareVersion(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFirmwareVersion (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_2getFirmwareVersion(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_2getFirmwareVersion(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getFirmwareVersion", 0);

  /* "pylibfreenect2/libfreenect2.pyx":1077
 *     def getFirmwareVersion(self):
 *         """Same as ``libfreenect2::Freenect2Device::getFirmwareVersion()``"""
 *         return self.ptr.getFirmwareVersion()             # <<<<<<<<<<<<<<
 * 
 *     def getColorCameraParams(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->ptr->getFirmwareVersion()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":1075
 *         return self.ptr.getSerialNumber()
 * 
 *     def getFirmwareVersion(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::getFirmwareVersion()``"""
 *         return self.ptr.getFirmwareVersion()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Freenect2Device.getFirmwareVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":1079
 *         return self.ptr.getFirmwareVersion()
 * 
 *     def getColorCameraParams(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::getColorCameraParams()``"""
 *         cdef _Freenect2Device.ColorCameraParams params
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_5getColorCameraParams(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_15Freenect2Device_4getColorCameraParams[] = "Same as ``libfreenect2::Freenect2Device::getColorCameraParams()``";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_5getColorCameraParams(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getColorCameraParams (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_4getColorCameraParams(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_4getColorCameraParams(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self) {
  libfreenect2::Freenect2Device::ColorCameraParams __pyx_v_params;
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *__pyx_v_pyparams = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getColorCameraParams", 0);

  /* "pylibfreenect2/libfreenect2.pyx":1082
 *         """Same as ``libfreenect2::Freenect2Device::getColorCameraParams()``"""
 *         cdef _Freenect2Device.ColorCameraParams params
 *         params = self.ptr.getColorCameraParams()             # <<<<<<<<<<<<<<
 *         cdef ColorCameraParams pyparams = ColorCameraParams()
 *         pyparams.params = params
 */
  __pyx_v_params = __pyx_v_self->ptr->getColorCameraParams();

  /* "pylibfreenect2/libfreenect2.pyx":1083
 *         cdef _Freenect2Device.ColorCameraParams params
 *         params = self.ptr.getColorCameraParams()
 *         cdef ColorCameraParams pyparams = ColorCameraParams()             # <<<<<<<<<<<<<<
 *         pyparams.params = params
 *         return pyparams
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14pylibfreenect2_12libfreenect2_ColorCameraParams), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pyparams = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pylibfreenect2/libfreenect2.pyx":1084
 *         params = self.ptr.getColorCameraParams()
 *         cdef ColorCameraParams pyparams = ColorCameraParams()
 *         pyparams.params = params             # <<<<<<<<<<<<<<
 *         return pyparams
 * 
 */
  __pyx_v_pyparams->params = __pyx_v_params;

  /* "pylibfreenect2/libfreenect2.pyx":1085
 *         cdef ColorCameraParams pyparams = ColorCameraParams()
 *         pyparams.params = params
 *         return pyparams             # <<<<<<<<<<<<<<
 * 
 *     def getIrCameraParams(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pyparams));
  __pyx_r = ((PyObject *)__pyx_v_pyparams);
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":1079
 *         return self.ptr.getFirmwareVersion()
 * 
 *     def getColorCameraParams(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::getColorCameraParams()``"""
 *         cdef _Freenect2Device.ColorCameraParams params
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Freenect2Device.getColorCameraParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pyparams);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":1087
 *         return pyparams
 * 
 *     def getIrCameraParams(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::getIrCameraParams()``"""
 *         cdef _Freenect2Device.IrCameraParams params
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_7getIrCameraParams(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_15Freenect2Device_6getIrCameraParams[] = "Same as ``libfreenect2::Freenect2Device::getIrCameraParams()``";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_7getIrCameraParams(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getIrCameraParams (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_6getIrCameraParams(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_6getIrCameraParams(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self) {
  libfreenect2::Freenect2Device::IrCameraParams __pyx_v_params;
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *__pyx_v_pyparams = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getIrCameraParams", 0);

  /* "pylibfreenect2/libfreenect2.pyx":1090
 *         """Same as ``libfreenect2::Freenect2Device::getIrCameraParams()``"""
 *         cdef _Freenect2Device.IrCameraParams params
 *         params = self.ptr.getIrCameraParams()             # <<<<<<<<<<<<<<
 *         cdef IrCameraParams pyparams = IrCameraParams()
 *         pyparams.params = params
 */
  __pyx_v_params = __pyx_v_self->ptr->getIrCameraParams();

  /* "pylibfreenect2/libfreenect2.pyx":1091
 *         cdef _Freenect2Device.IrCameraParams params
 *         params = self.ptr.getIrCameraParams()
 *         cdef IrCameraParams pyparams = IrCameraParams()             # <<<<<<<<<<<<<<
 *         pyparams.params = params
 *         return pyparams
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14pylibfreenect2_12libfreenect2_IrCameraParams), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1091, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pyparams = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pylibfreenect2/libfreenect2.pyx":1092
 *         params = self.ptr.getIrCameraParams()
 *         cdef IrCameraParams pyparams = IrCameraParams()
 *         pyparams.params = params             # <<<<<<<<<<<<<<
 *         return pyparams
 * 
 */
  __pyx_v_pyparams->params = __pyx_v_params;

  /* "pylibfreenect2/libfreenect2.pyx":1093
 *         cdef IrCameraParams pyparams = IrCameraParams()
 *         pyparams.params = params
 *         return pyparams             # <<<<<<<<<<<<<<
 * 
 *     def setColorFrameListener(self, FrameListener listener):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pyparams));
  __pyx_r = ((PyObject *)__pyx_v_pyparams);
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":1087
 *         return pyparams
 * 
 *     def getIrCameraParams(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::getIrCameraParams()``"""
 *         cdef _Freenect2Device.IrCameraParams params
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Freenect2Device.getIrCameraParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pyparams);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":1095
 *         return pyparams
 * 
 *     def setColorFrameListener(self, FrameListener listener):             # <<<<<<<<<<<<<<
 *         """Same as
 *         ``libfreenect2::Freenect2Device::setColorFrameListener(FrameListener*)``
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_9setColorFrameListener(PyObject *__pyx_v_self, PyObject *__pyx_v_listener); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_15Freenect2Device_8setColorFrameListener[] = "Same as\n        ``libfreenect2::Freenect2Device::setColorFrameListener(FrameListener*)``\n        ";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_9setColorFrameListener(PyObject *__pyx_v_self, PyObject *__pyx_v_listener) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setColorFrameListener (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_listener), __pyx_ptype_14pylibfreenect2_12libfreenect2_FrameListener, 1, "listener", 0))) __PYX_ERR(0, 1095, __pyx_L1_error)
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_8setColorFrameListener(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *)__pyx_v_self), ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameListener *)__pyx_v_listener));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_8setColorFrameListener(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self, struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameListener *__pyx_v_listener) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setColorFrameListener", 0);

  /* "pylibfreenect2/libfreenect2.pyx":1099
 *         ``libfreenect2::Freenect2Device::setColorFrameListener(FrameListener*)``
 *         """
 *         self.ptr.setColorFrameListener(listener.listener_ptr_alias)             # <<<<<<<<<<<<<<
 * 
 *     def setIrAndDepthFrameListener(self, FrameListener listener):
 */
  __pyx_v_self->ptr->setColorFrameListener(__pyx_v_listener->listener_ptr_alias);

  /* "pylibfreenect2/libfreenect2.pyx":1095
 *         return pyparams
 * 
 *     def setColorFrameListener(self, FrameListener listener):             # <<<<<<<<<<<<<<
 *         """Same as
 *         ``libfreenect2::Freenect2Device::setColorFrameListener(FrameListener*)``
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":1101
 *         self.ptr.setColorFrameListener(listener.listener_ptr_alias)
 * 
 *     def setIrAndDepthFrameListener(self, FrameListener listener):             # <<<<<<<<<<<<<<
 *         """Same as
 *         ``libfreenect2::Freenect2Device::setIrAndDepthFrameListener(FrameListener*)``
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_11setIrAndDepthFrameListener(PyObject *__pyx_v_self, PyObject *__pyx_v_listener); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_15Freenect2Device_10setIrAndDepthFrameListener[] = "Same as\n        ``libfreenect2::Freenect2Device::setIrAndDepthFrameListener(FrameListener*)``\n        ";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_11setIrAndDepthFrameListener(PyObject *__pyx_v_self, PyObject *__pyx_v_listener) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setIrAndDepthFrameListener (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_listener), __pyx_ptype_14pylibfreenect2_12libfreenect2_FrameListener, 1, "listener", 0))) __PYX_ERR(0, 1101, __pyx_L1_error)
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_10setIrAndDepthFrameListener(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *)__pyx_v_self), ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameListener *)__pyx_v_listener));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_10setIrAndDepthFrameListener(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self, struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameListener *__pyx_v_listener) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setIrAndDepthFrameListener", 0);

  /* "pylibfreenect2/libfreenect2.pyx":1105
 *         ``libfreenect2::Freenect2Device::setIrAndDepthFrameListener(FrameListener*)``
 *         """
 *         self.ptr.setIrAndDepthFrameListener(listener.listener_ptr_alias)             # <<<<<<<<<<<<<<
 * 
 *     def start(self):
 */
  __pyx_v_self->ptr->setIrAndDepthFrameListener(__pyx_v_listener->listener_ptr_alias);

  /* "pylibfreenect2/libfreenect2.pyx":1101
 *         self.ptr.setColorFrameListener(listener.listener_ptr_alias)
 * 
 *     def setIrAndDepthFrameListener(self, FrameListener listener):             # <<<<<<<<<<<<<<
 *         """Same as
 *         ``libfreenect2::Freenect2Device::setIrAndDepthFrameListener(FrameListener*)``
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":1107
 *         self.ptr.setIrAndDepthFrameListener(listener.listener_ptr_alias)
 * 
 *     def start(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::start()``"""
 *         self.ptr.start()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_13start(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_15Freenect2Device_12start[] = "Same as ``libfreenect2::Freenect2Device::start()``";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_13start(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_12start(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_12start(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start", 0);

  /* "pylibfreenect2/libfreenect2.pyx":1109
 *     def start(self):
 *         """Same as ``libfreenect2::Freenect2Device::start()``"""
 *         self.ptr.start()             # <<<<<<<<<<<<<<
 * 
 *     def startStreams(self, rgb, depth):
 */
  __pyx_v_self->ptr->start();

  /* "pylibfreenect2/libfreenect2.pyx":1107
 *         self.ptr.setIrAndDepthFrameListener(listener.listener_ptr_alias)
 * 
 *     def start(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::start()``"""
 *         self.ptr.start()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":1111
 *         self.ptr.start()
 * 
 *     def startStreams(self, rgb, depth):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::startStreams(bool, bool)``"""
 *         self.ptr.startStreams(rgb, depth)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_15startStreams(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_15Freenect2Device_14startStreams[] = "Same as ``libfreenect2::Freenect2Device::startStreams(bool, bool)``";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_15startStreams(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rgb = 0;
  PyObject *__pyx_v_depth = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("startStreams (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rgb,&__pyx_n_s_depth,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rgb)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_depth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("startStreams", 1, 2, 2, 1); __PYX_ERR(0, 1111, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "startStreams") < 0)) __PYX_ERR(0, 1111, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_rgb = values[0];
    __pyx_v_depth = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("startStreams", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1111, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Freenect2Device.startStreams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_14startStreams(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *)__pyx_v_self), __pyx_v_rgb, __pyx_v_depth);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_14startStreams(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self, PyObject *__pyx_v_rgb, PyObject *__pyx_v_depth) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  bool __pyx_t_2;
  __Pyx_RefNannySetupContext("startStreams", 0);

  /* "pylibfreenect2/libfreenect2.pyx":1113
 *     def startStreams(self, rgb, depth):
 *         """Same as ``libfreenect2::Freenect2Device::startStreams(bool, bool)``"""
 *         self.ptr.startStreams(rgb, depth)             # <<<<<<<<<<<<<<
 * 
 *     def stop(self):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rgb); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1113, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_depth); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1113, __pyx_L1_error)
  __pyx_v_self->ptr->startStreams(__pyx_t_1, __pyx_t_2);

  /* "pylibfreenect2/libfreenect2.pyx":1111
 *         self.ptr.start()
 * 
 *     def startStreams(self, rgb, depth):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::startStreams(bool, bool)``"""
 *         self.ptr.startStreams(rgb, depth)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Freenect2Device.startStreams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":1115
 *         self.ptr.startStreams(rgb, depth)
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::stop()``"""
 *         self.ptr.stop()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_17stop(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_15Freenect2Device_16stop[] = "Same as ``libfreenect2::Freenect2Device::stop()``";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_17stop(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_16stop(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_16stop(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop", 0);

  /* "pylibfreenect2/libfreenect2.pyx":1117
 *     def stop(self):
 *         """Same as ``libfreenect2::Freenect2Device::stop()``"""
 *         self.ptr.stop()             # <<<<<<<<<<<<<<
 * 
 *     def close(self):
 */
  __pyx_v_self->ptr->stop();

  /* "pylibfreenect2/libfreenect2.pyx":1115
 *         self.ptr.startStreams(rgb, depth)
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::stop()``"""
 *         self.ptr.stop()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":1119
 *         self.ptr.stop()
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::close()``"""
 *         self.ptr.close()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_19close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_15Freenect2Device_18close[] = "Same as ``libfreenect2::Freenect2Device::close()``";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_19close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_18close(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_18close(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close", 0);

  /* "pylibfreenect2/libfreenect2.pyx":1121
 *     def close(self):
 *         """Same as ``libfreenect2::Freenect2Device::close()``"""
 *         self.ptr.close()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->ptr->close();

  /* "pylibfreenect2/libfreenect2.pyx":1119
 *         self.ptr.stop()
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2Device::close()``"""
 *         self.ptr.close()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_20__reduce_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Freenect2Device.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_22__setstate_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_15Freenect2Device_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Freenect2Device.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":1143
 *     cdef libfreenect2.Freenect2* ptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.ptr = new libfreenect2.Freenect2();
 * 
 */

/* Python wrapper */
static int __pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2___cinit__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2___cinit__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  libfreenect2::Freenect2 *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":1144
 * 
 *     def __cinit__(self):
 *         self.ptr = new libfreenect2.Freenect2();             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  try {
    __pyx_t_1 = new libfreenect2::Freenect2();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1144, __pyx_L1_error)
  }
  __pyx_v_self->ptr = __pyx_t_1;

  /* "pylibfreenect2/libfreenect2.pyx":1143
 *     cdef libfreenect2.Freenect2* ptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.ptr = new libfreenect2.Freenect2();
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Freenect2.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":1146
 *         self.ptr = new libfreenect2.Freenect2();
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.ptr is not NULL:
 *             del self.ptr
 */

/* Python wrapper */
static void __pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_2__dealloc__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_2__dealloc__(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pylibfreenect2/libfreenect2.pyx":1147
 * 
 *     def __dealloc__(self):
 *         if self.ptr is not NULL:             # <<<<<<<<<<<<<<
 *             del self.ptr
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->ptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "pylibfreenect2/libfreenect2.pyx":1148
 *     def __dealloc__(self):
 *         if self.ptr is not NULL:
 *             del self.ptr             # <<<<<<<<<<<<<<
 * 
 *     def enumerateDevices(self):
 */
    delete __pyx_v_self->ptr;

    /* "pylibfreenect2/libfreenect2.pyx":1147
 * 
 *     def __dealloc__(self):
 *         if self.ptr is not NULL:             # <<<<<<<<<<<<<<
 *             del self.ptr
 * 
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":1146
 *         self.ptr = new libfreenect2.Freenect2();
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.ptr is not NULL:
 *             del self.ptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pylibfreenect2/libfreenect2.pyx":1150
 *             del self.ptr
 * 
 *     def enumerateDevices(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2::enumerateDevices()``"""
 *         return self.ptr.enumerateDevices()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_5enumerateDevices(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_9Freenect2_4enumerateDevices[] = "Same as ``libfreenect2::Freenect2::enumerateDevices()``";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_5enumerateDevices(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("enumerateDevices (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_4enumerateDevices(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_4enumerateDevices(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("enumerateDevices", 0);

  /* "pylibfreenect2/libfreenect2.pyx":1152
 *     def enumerateDevices(self):
 *         """Same as ``libfreenect2::Freenect2::enumerateDevices()``"""
 *         return self.ptr.enumerateDevices()             # <<<<<<<<<<<<<<
 * 
 *     def getDeviceSerialNumber(self, int idx):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->ptr->enumerateDevices()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":1150
 *             del self.ptr
 * 
 *     def enumerateDevices(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2::enumerateDevices()``"""
 *         return self.ptr.enumerateDevices()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Freenect2.enumerateDevices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":1154
 *         return self.ptr.enumerateDevices()
 * 
 *     def getDeviceSerialNumber(self, int idx):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2::getDeviceSerialNumber(int)``"""
 *         return self.ptr.getDeviceSerialNumber(idx)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_7getDeviceSerialNumber(PyObject *__pyx_v_self, PyObject *__pyx_arg_idx); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_9Freenect2_6getDeviceSerialNumber[] = "Same as ``libfreenect2::Freenect2::getDeviceSerialNumber(int)``";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_7getDeviceSerialNumber(PyObject *__pyx_v_self, PyObject *__pyx_arg_idx) {
  int __pyx_v_idx;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDeviceSerialNumber (wrapper)", 0);
  assert(__pyx_arg_idx); {
    __pyx_v_idx = __Pyx_PyInt_As_int(__pyx_arg_idx); if (unlikely((__pyx_v_idx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1154, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Freenect2.getDeviceSerialNumber", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_6getDeviceSerialNumber(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *)__pyx_v_self), ((int)__pyx_v_idx));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_6getDeviceSerialNumber(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_v_self, int __pyx_v_idx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getDeviceSerialNumber", 0);

  /* "pylibfreenect2/libfreenect2.pyx":1156
 *     def getDeviceSerialNumber(self, int idx):
 *         """Same as ``libfreenect2::Freenect2::getDeviceSerialNumber(int)``"""
 *         return self.ptr.getDeviceSerialNumber(idx)             # <<<<<<<<<<<<<<
 * 
 *     def getDefaultDeviceSerialNumber(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->ptr->getDeviceSerialNumber(__pyx_v_idx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":1154
 *         return self.ptr.enumerateDevices()
 * 
 *     def getDeviceSerialNumber(self, int idx):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2::getDeviceSerialNumber(int)``"""
 *         return self.ptr.getDeviceSerialNumber(idx)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Freenect2.getDeviceSerialNumber", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":1158
 *         return self.ptr.getDeviceSerialNumber(idx)
 * 
 *     def getDefaultDeviceSerialNumber(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2::getDefaultDeviceSerialNumber()``"""
 *         return self.ptr.getDefaultDeviceSerialNumber()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_9getDefaultDeviceSerialNumber(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_9Freenect2_8getDefaultDeviceSerialNumber[] = "Same as ``libfreenect2::Freenect2::getDefaultDeviceSerialNumber()``";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_9getDefaultDeviceSerialNumber(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDefaultDeviceSerialNumber (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_8getDefaultDeviceSerialNumber(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_8getDefaultDeviceSerialNumber(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getDefaultDeviceSerialNumber", 0);

  /* "pylibfreenect2/libfreenect2.pyx":1160
 *     def getDefaultDeviceSerialNumber(self):
 *         """Same as ``libfreenect2::Freenect2::getDefaultDeviceSerialNumber()``"""
 *         return self.ptr.getDefaultDeviceSerialNumber()             # <<<<<<<<<<<<<<
 * 
 *     cdef __openDevice__intidx(self, int idx, PacketPipeline pipeline):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->ptr->getDefaultDeviceSerialNumber()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":1158
 *         return self.ptr.getDeviceSerialNumber(idx)
 * 
 *     def getDefaultDeviceSerialNumber(self):             # <<<<<<<<<<<<<<
 *         """Same as ``libfreenect2::Freenect2::getDefaultDeviceSerialNumber()``"""
 *         return self.ptr.getDefaultDeviceSerialNumber()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Freenect2.getDefaultDeviceSerialNumber", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":1162
 *         return self.ptr.getDefaultDeviceSerialNumber()
 * 
 *     cdef __openDevice__intidx(self, int idx, PacketPipeline pipeline):             # <<<<<<<<<<<<<<
 *         cdef _Freenect2Device* dev_ptr
 *         if pipeline is None:
 */

static PyObject *__pyx_f_14pylibfreenect2_12libfreenect2_9Freenect2___openDevice__intidx(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_v_self, int __pyx_v_idx, struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *__pyx_v_pipeline) {
  libfreenect2::Freenect2Device *__pyx_v_dev_ptr;
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_device = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__openDevice__intidx", 0);

  /* "pylibfreenect2/libfreenect2.pyx":1164
 *     cdef __openDevice__intidx(self, int idx, PacketPipeline pipeline):
 *         cdef _Freenect2Device* dev_ptr
 *         if pipeline is None:             # <<<<<<<<<<<<<<
 *             dev_ptr = self.ptr.openDevice(idx)
 *         else:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_pipeline) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pylibfreenect2/libfreenect2.pyx":1165
 *         cdef _Freenect2Device* dev_ptr
 *         if pipeline is None:
 *             dev_ptr = self.ptr.openDevice(idx)             # <<<<<<<<<<<<<<
 *         else:
 *             dev_ptr = self.ptr.openDevice(idx, pipeline.pipeline_ptr_alias)
 */
    __pyx_v_dev_ptr = __pyx_v_self->ptr->openDevice(__pyx_v_idx);

    /* "pylibfreenect2/libfreenect2.pyx":1164
 *     cdef __openDevice__intidx(self, int idx, PacketPipeline pipeline):
 *         cdef _Freenect2Device* dev_ptr
 *         if pipeline is None:             # <<<<<<<<<<<<<<
 *             dev_ptr = self.ptr.openDevice(idx)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pylibfreenect2/libfreenect2.pyx":1167
 *             dev_ptr = self.ptr.openDevice(idx)
 *         else:
 *             dev_ptr = self.ptr.openDevice(idx, pipeline.pipeline_ptr_alias)             # <<<<<<<<<<<<<<
 *             pipeline.owned_by_device = True
 * 
 */
  /*else*/ {
    __pyx_v_dev_ptr = __pyx_v_self->ptr->openDevice(__pyx_v_idx, __pyx_v_pipeline->pipeline_ptr_alias);

    /* "pylibfreenect2/libfreenect2.pyx":1168
 *         else:
 *             dev_ptr = self.ptr.openDevice(idx, pipeline.pipeline_ptr_alias)
 *             pipeline.owned_by_device = True             # <<<<<<<<<<<<<<
 * 
 *         cdef Freenect2Device device = Freenect2Device()
 */
    __pyx_v_pipeline->owned_by_device = 1;
  }
  __pyx_L3:;

  /* "pylibfreenect2/libfreenect2.pyx":1170
 *             pipeline.owned_by_device = True
 * 
 *         cdef Freenect2Device device = Freenect2Device()             # <<<<<<<<<<<<<<
 *         device.ptr = dev_ptr
 *         return device
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14pylibfreenect2_12libfreenect2_Freenect2Device), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_device = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pylibfreenect2/libfreenect2.pyx":1171
 * 
 *         cdef Freenect2Device device = Freenect2Device()
 *         device.ptr = dev_ptr             # <<<<<<<<<<<<<<
 *         return device
 * 
 */
  __pyx_v_device->ptr = __pyx_v_dev_ptr;

  /* "pylibfreenect2/libfreenect2.pyx":1172
 *         cdef Freenect2Device device = Freenect2Device()
 *         device.ptr = dev_ptr
 *         return device             # <<<<<<<<<<<<<<
 * 
 *     cdef __openDevice__stridx(self, string serial, PacketPipeline pipeline):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_device));
  __pyx_r = ((PyObject *)__pyx_v_device);
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":1162
 *         return self.ptr.getDefaultDeviceSerialNumber()
 * 
 *     cdef __openDevice__intidx(self, int idx, PacketPipeline pipeline):             # <<<<<<<<<<<<<<
 *         cdef _Freenect2Device* dev_ptr
 *         if pipeline is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Freenect2.__openDevice__intidx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":1174
 *         return device
 * 
 *     cdef __openDevice__stridx(self, string serial, PacketPipeline pipeline):             # <<<<<<<<<<<<<<
 *         cdef _Freenect2Device* dev_ptr
 *         if pipeline is None:
 */

static PyObject *__pyx_f_14pylibfreenect2_12libfreenect2_9Freenect2___openDevice__stridx(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_v_self, std::string __pyx_v_serial, struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *__pyx_v_pipeline) {
  libfreenect2::Freenect2Device *__pyx_v_dev_ptr;
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_device = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__openDevice__stridx", 0);

  /* "pylibfreenect2/libfreenect2.pyx":1176
 *     cdef __openDevice__stridx(self, string serial, PacketPipeline pipeline):
 *         cdef _Freenect2Device* dev_ptr
 *         if pipeline is None:             # <<<<<<<<<<<<<<
 *             dev_ptr = self.ptr.openDevice(serial)
 *         else:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_pipeline) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pylibfreenect2/libfreenect2.pyx":1177
 *         cdef _Freenect2Device* dev_ptr
 *         if pipeline is None:
 *             dev_ptr = self.ptr.openDevice(serial)             # <<<<<<<<<<<<<<
 *         else:
 *             dev_ptr = self.ptr.openDevice(serial, pipeline.pipeline_ptr_alias)
 */
    __pyx_v_dev_ptr = __pyx_v_self->ptr->openDevice(__pyx_v_serial);

    /* "pylibfreenect2/libfreenect2.pyx":1176
 *     cdef __openDevice__stridx(self, string serial, PacketPipeline pipeline):
 *         cdef _Freenect2Device* dev_ptr
 *         if pipeline is None:             # <<<<<<<<<<<<<<
 *             dev_ptr = self.ptr.openDevice(serial)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pylibfreenect2/libfreenect2.pyx":1179
 *             dev_ptr = self.ptr.openDevice(serial)
 *         else:
 *             dev_ptr = self.ptr.openDevice(serial, pipeline.pipeline_ptr_alias)             # <<<<<<<<<<<<<<
 *             pipeline.owned_by_device = True
 * 
 */
  /*else*/ {
    __pyx_v_dev_ptr = __pyx_v_self->ptr->openDevice(__pyx_v_serial, __pyx_v_pipeline->pipeline_ptr_alias);

    /* "pylibfreenect2/libfreenect2.pyx":1180
 *         else:
 *             dev_ptr = self.ptr.openDevice(serial, pipeline.pipeline_ptr_alias)
 *             pipeline.owned_by_device = True             # <<<<<<<<<<<<<<
 * 
 *         cdef Freenect2Device device = Freenect2Device()
 */
    __pyx_v_pipeline->owned_by_device = 1;
  }
  __pyx_L3:;

  /* "pylibfreenect2/libfreenect2.pyx":1182
 *             pipeline.owned_by_device = True
 * 
 *         cdef Freenect2Device device = Freenect2Device()             # <<<<<<<<<<<<<<
 *         device.ptr = dev_ptr
 *         return device
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14pylibfreenect2_12libfreenect2_Freenect2Device), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_device = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pylibfreenect2/libfreenect2.pyx":1183
 * 
 *         cdef Freenect2Device device = Freenect2Device()
 *         device.ptr = dev_ptr             # <<<<<<<<<<<<<<
 *         return device
 * 
 */
  __pyx_v_device->ptr = __pyx_v_dev_ptr;

  /* "pylibfreenect2/libfreenect2.pyx":1184
 *         cdef Freenect2Device device = Freenect2Device()
 *         device.ptr = dev_ptr
 *         return device             # <<<<<<<<<<<<<<
 * 
 *     def openDevice(self, name, PacketPipeline pipeline=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_device));
  __pyx_r = ((PyObject *)__pyx_v_device);
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":1174
 *         return device
 * 
 *     cdef __openDevice__stridx(self, string serial, PacketPipeline pipeline):             # <<<<<<<<<<<<<<
 *         cdef _Freenect2Device* dev_ptr
 *         if pipeline is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Freenect2.__openDevice__stridx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":1186
 *         return device
 * 
 *     def openDevice(self, name, PacketPipeline pipeline=None):             # <<<<<<<<<<<<<<
 *         """Open device by serial number or index
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_11openDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_9Freenect2_10openDevice[] = "Open device by serial number or index\n\n        Parameters\n        ----------\n        name : int or str\n            Serial number (str) or device index (int)\n\n        pipeline : PacketPipeline, optional\n            Pipeline. Default is None.\n\n        Raises\n        ------\n        ValueError\n            If invalid name is specified.\n\n        ";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_11openDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *__pyx_v_pipeline = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("openDevice (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_pipeline,0};
    PyObject* values[2] = {0,0};
    values[1] = (PyObject *)((struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pipeline);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "openDevice") < 0)) __PYX_ERR(0, 1186, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = values[0];
    __pyx_v_pipeline = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("openDevice", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1186, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Freenect2.openDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pipeline), __pyx_ptype_14pylibfreenect2_12libfreenect2_PacketPipeline, 1, "pipeline", 0))) __PYX_ERR(0, 1186, __pyx_L1_error)
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_10openDevice(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *)__pyx_v_self), __pyx_v_name, __pyx_v_pipeline);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_10openDevice(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_v_self, PyObject *__pyx_v_name, struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *__pyx_v_pipeline) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  std::string __pyx_t_6;
  __Pyx_RefNannySetupContext("openDevice", 0);

  /* "pylibfreenect2/libfreenect2.pyx":1203
 * 
 *         """
 *         if isinstance(name, int):             # <<<<<<<<<<<<<<
 *             return self.__openDevice__intidx(name, pipeline)
 *         elif isinstance(name, str) or isinstance(name, bytes):
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_name); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pylibfreenect2/libfreenect2.pyx":1204
 *         """
 *         if isinstance(name, int):
 *             return self.__openDevice__intidx(name, pipeline)             # <<<<<<<<<<<<<<
 *         elif isinstance(name, str) or isinstance(name, bytes):
 *             return self.__openDevice__stridx(name, pipeline)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_name); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1204, __pyx_L1_error)
    __pyx_t_4 = ((struct __pyx_vtabstruct_14pylibfreenect2_12libfreenect2_Freenect2 *)__pyx_v_self->__pyx_vtab)->__pyx___openDevice__intidx(__pyx_v_self, __pyx_t_3, __pyx_v_pipeline); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pylibfreenect2/libfreenect2.pyx":1203
 * 
 *         """
 *         if isinstance(name, int):             # <<<<<<<<<<<<<<
 *             return self.__openDevice__intidx(name, pipeline)
 *         elif isinstance(name, str) or isinstance(name, bytes):
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":1205
 *         if isinstance(name, int):
 *             return self.__openDevice__intidx(name, pipeline)
 *         elif isinstance(name, str) or isinstance(name, bytes):             # <<<<<<<<<<<<<<
 *             return self.__openDevice__stridx(name, pipeline)
 *         else:
 */
  __pyx_t_1 = PyString_Check(__pyx_v_name); 
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = PyBytes_Check(__pyx_v_name); 
  __pyx_t_1 = (__pyx_t_5 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "pylibfreenect2/libfreenect2.pyx":1206
 *             return self.__openDevice__intidx(name, pipeline)
 *         elif isinstance(name, str) or isinstance(name, bytes):
 *             return self.__openDevice__stridx(name, pipeline)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("device name must be of str, bytes or integer type")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1206, __pyx_L1_error)
    __pyx_t_4 = ((struct __pyx_vtabstruct_14pylibfreenect2_12libfreenect2_Freenect2 *)__pyx_v_self->__pyx_vtab)->__pyx___openDevice__stridx(__pyx_v_self, __pyx_t_6, __pyx_v_pipeline); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pylibfreenect2/libfreenect2.pyx":1205
 *         if isinstance(name, int):
 *             return self.__openDevice__intidx(name, pipeline)
 *         elif isinstance(name, str) or isinstance(name, bytes):             # <<<<<<<<<<<<<<
 *             return self.__openDevice__stridx(name, pipeline)
 *         else:
 */
  }

  /* "pylibfreenect2/libfreenect2.pyx":1208
 *             return self.__openDevice__stridx(name, pipeline)
 *         else:
 *             raise ValueError("device name must be of str, bytes or integer type")             # <<<<<<<<<<<<<<
 * 
 *     def openDefaultDevice(self, PacketPipeline pipeline=None):
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1208, __pyx_L1_error)
  }

  /* "pylibfreenect2/libfreenect2.pyx":1186
 *         return device
 * 
 *     def openDevice(self, name, PacketPipeline pipeline=None):             # <<<<<<<<<<<<<<
 *         """Open device by serial number or index
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Freenect2.openDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pylibfreenect2/libfreenect2.pyx":1210
 *             raise ValueError("device name must be of str, bytes or integer type")
 * 
 *     def openDefaultDevice(self, PacketPipeline pipeline=None):             # <<<<<<<<<<<<<<
 *         """Open the first device
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_13openDefaultDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14pylibfreenect2_12libfreenect2_9Freenect2_12openDefaultDevice[] = "Open the first device\n\n        Parameters\n        ----------\n        pipeline : PacketPipeline, optional\n            Pipeline. Default is None.\n\n        Returns\n        -------\n        device : Freenect2Device\n\n        ";
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_13openDefaultDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *__pyx_v_pipeline = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("openDefaultDevice (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pipeline,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pipeline);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "openDefaultDevice") < 0)) __PYX_ERR(0, 1210, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pipeline = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("openDefaultDevice", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1210, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Freenect2.openDefaultDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pipeline), __pyx_ptype_14pylibfreenect2_12libfreenect2_PacketPipeline, 1, "pipeline", 0))) __PYX_ERR(0, 1210, __pyx_L1_error)
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_12openDefaultDevice(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *)__pyx_v_self), __pyx_v_pipeline);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_12openDefaultDevice(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_v_self, struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *__pyx_v_pipeline) {
  libfreenect2::Freenect2Device *__pyx_v_dev_ptr;
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *__pyx_v_device = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("openDefaultDevice", 0);

  /* "pylibfreenect2/libfreenect2.pyx":1225
 *         cdef _Freenect2Device* dev_ptr
 * 
 *         if pipeline is None:             # <<<<<<<<<<<<<<
 *             dev_ptr = self.ptr.openDefaultDevice()
 *         else:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_pipeline) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pylibfreenect2/libfreenect2.pyx":1226
 * 
 *         if pipeline is None:
 *             dev_ptr = self.ptr.openDefaultDevice()             # <<<<<<<<<<<<<<
 *         else:
 *             dev_ptr = self.ptr.openDefaultDevice(pipeline.pipeline_ptr_alias)
 */
    __pyx_v_dev_ptr = __pyx_v_self->ptr->openDefaultDevice();

    /* "pylibfreenect2/libfreenect2.pyx":1225
 *         cdef _Freenect2Device* dev_ptr
 * 
 *         if pipeline is None:             # <<<<<<<<<<<<<<
 *             dev_ptr = self.ptr.openDefaultDevice()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pylibfreenect2/libfreenect2.pyx":1228
 *             dev_ptr = self.ptr.openDefaultDevice()
 *         else:
 *             dev_ptr = self.ptr.openDefaultDevice(pipeline.pipeline_ptr_alias)             # <<<<<<<<<<<<<<
 *             pipeline.owned_by_device = True
 * 
 */
  /*else*/ {
    __pyx_v_dev_ptr = __pyx_v_self->ptr->openDefaultDevice(__pyx_v_pipeline->pipeline_ptr_alias);

    /* "pylibfreenect2/libfreenect2.pyx":1229
 *         else:
 *             dev_ptr = self.ptr.openDefaultDevice(pipeline.pipeline_ptr_alias)
 *             pipeline.owned_by_device = True             # <<<<<<<<<<<<<<
 * 
 *         cdef Freenect2Device device = Freenect2Device()
 */
    __pyx_v_pipeline->owned_by_device = 1;
  }
  __pyx_L3:;

  /* "pylibfreenect2/libfreenect2.pyx":1231
 *             pipeline.owned_by_device = True
 * 
 *         cdef Freenect2Device device = Freenect2Device()             # <<<<<<<<<<<<<<
 *         device.ptr = dev_ptr
 *         return device
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14pylibfreenect2_12libfreenect2_Freenect2Device), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_device = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pylibfreenect2/libfreenect2.pyx":1232
 * 
 *         cdef Freenect2Device device = Freenect2Device()
 *         device.ptr = dev_ptr             # <<<<<<<<<<<<<<
 *         return device
 */
  __pyx_v_device->ptr = __pyx_v_dev_ptr;

  /* "pylibfreenect2/libfreenect2.pyx":1233
 *         cdef Freenect2Device device = Freenect2Device()
 *         device.ptr = dev_ptr
 *         return device             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_device));
  __pyx_r = ((PyObject *)__pyx_v_device);
  goto __pyx_L0;

  /* "pylibfreenect2/libfreenect2.pyx":1210
 *             raise ValueError("device name must be of str, bytes or integer type")
 * 
 *     def openDefaultDevice(self, PacketPipeline pipeline=None):             # <<<<<<<<<<<<<<
 *         """Open the first device
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Freenect2.openDefaultDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_device);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_14__reduce_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Freenect2.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_16__setstate_cython__(((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14pylibfreenect2_12libfreenect2_9Freenect2_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pylibfreenect2.libfreenect2.Freenect2.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":214
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":220
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":223
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":224
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":226
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":228
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":229
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":228
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
    goto __pyx_L4;
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  /*else*/ {
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":234
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (__pyx_t_1) {

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":235
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(3, 235, __pyx_L1_error)

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":238
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (__pyx_t_1) {

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":239
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(3, 239, __pyx_L1_error)

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":241
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":242
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":243
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":246
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":247
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":248
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":249
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":250
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":243
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L11;
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":252
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":253
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":254
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":256
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":259
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":260
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":263
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":265
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":267
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":265
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
    goto __pyx_L14;
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":270
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
  /*else*/ {
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":273
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":274
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":274
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_1) {

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(3, 276, __pyx_L1_error)

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":274
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":277
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":278
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = ((char *)"B");
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = ((char *)"h");
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":280
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = ((char *)"H");
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":281
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = ((char *)"i");
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = ((char *)"I");
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = ((char *)"l");
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = ((char *)"L");
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = ((char *)"q");
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":286
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = ((char *)"Q");
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":287
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = ((char *)"f");
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = ((char *)"d");
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":289
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = ((char *)"g");
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = ((char *)"Zf");
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":291
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = ((char *)"Zd");
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":292
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = ((char *)"Zg");
      break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":293
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":295
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(3, 295, __pyx_L1_error)
      break;
    }

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":296
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":297
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":299
 *                 return
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":300
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":301
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":302
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(3, 302, __pyx_L1_error)
    __pyx_v_f = __pyx_t_7;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":305
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":214
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":307
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":308
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":309
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)
 */
    PyObject_Free(__pyx_v_info->format);

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":308
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":310
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":311
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    PyObject_Free(__pyx_v_info->strides);

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":310
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":307
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":788
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":789
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":788
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":791
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":792
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":791
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":794
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":794
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":797
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":798
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":797
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":800
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":801
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":800
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":803
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":804
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":805
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":804
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":807
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":803
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":809
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":814
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":815
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":818
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(3, 818, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 818, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 818, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":819
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(3, 819, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(3, 819, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":820
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(3, 820, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 820, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 820, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(3, 820, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(3, 820, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":822
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 822, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 822, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 822, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":823
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 823, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(3, 823, __pyx_L1_error)

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":822
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":825
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":825
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_6) {

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":827
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 827, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(3, 827, __pyx_L1_error)

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":825
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":838
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":839
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":840
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":842
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":844
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":845
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 845, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":846
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":847
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 847, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(3, 847, __pyx_L1_error)

        /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":846
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":850
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 850, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 850, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 850, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":851
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 851, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 851, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 851, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":852
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 852, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 852, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 852, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":853
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 853, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 853, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":854
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 854, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 854, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 854, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":855
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 855, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 855, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 855, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":856
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 856, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 856, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 856, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":857
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 857, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 857, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 857, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":858
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 858, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 858, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 858, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":859
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 859, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 859, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 859, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":860
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 860, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 860, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":861
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 861, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 861, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 861, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":862
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 862, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 862, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 862, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":863
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 863, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 863, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 863, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":864
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 864, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 864, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":865
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 865, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 865, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 865, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":866
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 866, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(3, 866, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":868
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 868, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 868, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 868, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(3, 868, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":869
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":844
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":873
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(3, 873, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":818
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":874
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":809
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":990
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":992
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":993
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":992
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
    goto __pyx_L3;
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":995
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
  /*else*/ {
    Py_INCREF(__pyx_v_base);

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":996
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":997
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":998
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":990
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1000
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1001
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1002
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1001
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1004
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1000
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1009
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1010
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1011
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 1011, __pyx_L3_error)

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1010
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1012
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 1012, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1013
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 1013, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 1013, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1010
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1009
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1015
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1016
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1017
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 1017, __pyx_L3_error)

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1016
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1018
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 1018, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1019
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 1019, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 1019, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1016
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1015
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1021
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1022
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1023
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 1023, __pyx_L3_error)

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1022
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1024
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 1024, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1025
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 1025, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 1025, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1022
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1021
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_14pylibfreenect2_12libfreenect2_Frame __pyx_vtable_14pylibfreenect2_12libfreenect2_Frame;

static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_Frame(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *)o);
  p->__pyx_vtab = __pyx_vtabptr_14pylibfreenect2_12libfreenect2_Frame;
  if (unlikely(__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_Frame(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_14pylibfreenect2_12libfreenect2_5Frame_timestamp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_9timestamp_1__get__(o);
}

static PyObject *__pyx_getprop_14pylibfreenect2_12libfreenect2_5Frame_sequence(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_8sequence_1__get__(o);
}

static PyObject *__pyx_getprop_14pylibfreenect2_12libfreenect2_5Frame_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_5width_1__get__(o);
}

static PyObject *__pyx_getprop_14pylibfreenect2_12libfreenect2_5Frame_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_6height_1__get__(o);
}

static PyObject *__pyx_getprop_14pylibfreenect2_12libfreenect2_5Frame_bytes_per_pixel(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_15bytes_per_pixel_1__get__(o);
}

static PyObject *__pyx_getprop_14pylibfreenect2_12libfreenect2_5Frame_exposure(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_8exposure_1__get__(o);
}

static PyObject *__pyx_getprop_14pylibfreenect2_12libfreenect2_5Frame_gain(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_4gain_1__get__(o);
}

static PyObject *__pyx_getprop_14pylibfreenect2_12libfreenect2_5Frame_gamma(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_5gamma_1__get__(o);
}

static PyMethodDef __pyx_methods_14pylibfreenect2_12libfreenect2_Frame[] = {
  {"__asarray", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_5__asarray, METH_O, 0},
  {"asarray", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_7asarray, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14pylibfreenect2_12libfreenect2_5Frame_6asarray},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_5Frame_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_14pylibfreenect2_12libfreenect2_Frame[] = {
  {(char *)"timestamp", __pyx_getprop_14pylibfreenect2_12libfreenect2_5Frame_timestamp, 0, (char *)"Same as ``libfreenect2::Frame::timestamp``", 0},
  {(char *)"sequence", __pyx_getprop_14pylibfreenect2_12libfreenect2_5Frame_sequence, 0, (char *)"Same as ``libfreenect2::Frame::sequence``", 0},
  {(char *)"width", __pyx_getprop_14pylibfreenect2_12libfreenect2_5Frame_width, 0, (char *)"Same as ``libfreenect2::Frame::width``", 0},
  {(char *)"height", __pyx_getprop_14pylibfreenect2_12libfreenect2_5Frame_height, 0, (char *)"Same as ``libfreenect2::Frame::height``", 0},
  {(char *)"bytes_per_pixel", __pyx_getprop_14pylibfreenect2_12libfreenect2_5Frame_bytes_per_pixel, 0, (char *)"Same as ``libfreenect2::Frame::bytes_per_pixel``", 0},
  {(char *)"exposure", __pyx_getprop_14pylibfreenect2_12libfreenect2_5Frame_exposure, 0, (char *)"Same as ``libfreenect2::Frame::exposure``", 0},
  {(char *)"gain", __pyx_getprop_14pylibfreenect2_12libfreenect2_5Frame_gain, 0, (char *)"Same as ``libfreenect2::Frame::gain``", 0},
  {(char *)"gamma", __pyx_getprop_14pylibfreenect2_12libfreenect2_5Frame_gamma, 0, (char *)"Same as ``libfreenect2::Frame::gamma``", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14pylibfreenect2_12libfreenect2_Frame = {
  PyVarObject_HEAD_INIT(0, 0)
  "pylibfreenect2.libfreenect2.Frame", /*tp_name*/
  sizeof(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_Frame, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Python interface for ``libfreenect2::Frame``.\n\n    The Frame is a container of the C++ pointer ``libfreenect2::Frame*``.\n\n    .. note::\n        By default, Frame just keeps a pointer of ``libfreenect2::Frame`` that\n        should be allocated and released by SyncMultiFrameListener (i.e. Frame\n        itself doesn't own the allocated memory) as in C++. However, if Frame is\n        created by providing ``width``, ``height`` and ``bytes_per_pixel``, then\n        it allocates necessary memory in ``__cinit__`` and release it in\n        ``__dealloc__`` method.\n\n    Attributes\n    ----------\n    ptr : libfreenect2::Frame*\n        Pointer of Frame.\n\n    take_ownership : bool\n        If True, the class instance allocates memory for Frame* and release it\n        in ``__dealloc__``. If `width`, `height` and `bytes_per_pixel` are given\n        in ``__cinit__``, which is necessary to allocate how much memory we need,\n        ``take_ownership`` is set to True internally, otherwise False. Note that\n        the value itself cannot be set by users.\n\n    frame_type : int\n        Underlying frame type.\n\n    Parameters\n    ----------\n    width : int, optional\n        Width of Frame. Default is None.\n\n    height : int, optional\n        Height of Frame. Default is None.\n\n    bytes_per_pixel : int, optional\n        Bytes per pixels of Frame. Default is None.\n\n    frame_type : int, optional\n        Underlying frame type. Default is -1. Used by ``asarray`` method.\n\n    See also\n    --------\n\n    pylibfreenect2.FrameType\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14pylibfreenect2_12libfreenect2_Frame, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_14pylibfreenect2_12libfreenect2_Frame, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14pylibfreenect2_12libfreenect2_Frame, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_FrameListener(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_FrameListener(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14pylibfreenect2_12libfreenect2_FrameListener[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_13FrameListener_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_13FrameListener_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14pylibfreenect2_12libfreenect2_FrameListener = {
  PyVarObject_HEAD_INIT(0, 0)
  "pylibfreenect2.libfreenect2.FrameListener", /*tp_name*/
  sizeof(struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameListener), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_FrameListener, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14pylibfreenect2_12libfreenect2_FrameListener, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14pylibfreenect2_12libfreenect2_FrameListener, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_FrameMap(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *)o);
  new((void*)&(p->internal_frame_map)) std::map<enum libfreenect2::Frame::Type,libfreenect2::Frame *> ();
  if (unlikely(__pyx_pw_14pylibfreenect2_12libfreenect2_8FrameMap_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_FrameMap(PyObject *o) {
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *p = (struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14pylibfreenect2_12libfreenect2_8FrameMap_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->internal_frame_map);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_14pylibfreenect2_12libfreenect2_FrameMap(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_14pylibfreenect2_12libfreenect2_FrameMap[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_8FrameMap_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_8FrameMap_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_FrameMap = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_14pylibfreenect2_12libfreenect2_FrameMap, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_FrameMap = {
  0, /*mp_length*/
  __pyx_pw_14pylibfreenect2_12libfreenect2_8FrameMap_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_14pylibfreenect2_12libfreenect2_FrameMap = {
  PyVarObject_HEAD_INIT(0, 0)
  "pylibfreenect2.libfreenect2.FrameMap", /*tp_name*/
  sizeof(struct __pyx_obj_14pylibfreenect2_12libfreenect2_FrameMap), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_FrameMap, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_FrameMap, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_FrameMap, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Python interface for ``libfreenect2::FrameMap``.\n\n    The FrameMap is a container of C++ value ``libfreenect2::FrameMap`` (aliased\n    to ``std::map<libfreenect2::Frame::Type,libfreenect2::Frame*>`` in C++).\n\n    .. note::\n        By default, FrameMap just keeps a reference of ``libfreenect2::FrameMap``\n        that should be allcoated and released by SyncMultiFrameListener (i.e.\n        FrameMap itself doesn't own the allocated memory) as in C++.\n\n    Attributes\n    ----------\n    internal_frame_map : std::map<libfreenect2::Frame::Type, libfreenect2::Frame*>\n        Internal FrameMap.\n\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14pylibfreenect2_12libfreenect2_FrameMap, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14pylibfreenect2_12libfreenect2_FrameMap, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_14pylibfreenect2_12libfreenect2_FrameListener(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_FrameListener(o);
}

static PyMethodDef __pyx_methods_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener[] = {
  {"hasNewFrame", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_5hasNewFrame, METH_NOARGS, __pyx_doc_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_4hasNewFrame},
  {"waitForNewFrame", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_7waitForNewFrame, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_6waitForNewFrame},
  {"release", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_9release, METH_O, __pyx_doc_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_8release},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_22SyncMultiFrameListener_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener = {
  PyVarObject_HEAD_INIT(0, 0)
  "pylibfreenect2.libfreenect2.SyncMultiFrameListener", /*tp_name*/
  sizeof(struct __pyx_obj_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Python interface for ``libfreenect2::SyncMultiFrameListener``.\n\n    The SyncMultiFrameListener is a container of\n    C++ pointer ``libfreenect2::SyncMultiFrameListener*``. The pointer of\n    SyncMultiFrameListener is allocated in ``__cinit__`` and released in\n    ``__dealloc__`` method.\n\n    Parameters\n    ----------\n    frame_types : unsigned int, optional\n        Frame types that we want to listen. It can be logical OR of:\n\n            - ``FrameType.Color``\n            - ``FrameType.Ir``\n            - ``FrameType.Depth``\n\n        Default is ``FrameType.Color | FrameType.Ir | FrameType.Depth``\n\n    Attributes\n    ----------\n    ptr : libfreenect2.SyncMultiFrameListener*\n        Pointer of ``libfreenect2::SyncMultiFrameListener``\n\n    listener_ptr_alias : libfreenect2.FrameListener*\n        Pointer of ``libfreenect2::FrameListener``. This is necessary to call\n        methods that operate on ``libfreenect2::FrameListener*``, not\n        ``libfreenect2::SyncMultiFrameListener``.\n\n    See also\n    --------\n\n    pylibfreenect2.FrameType\n\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_ColorCameraParams(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *)o);
  new((void*)&(p->params)) libfreenect2::Freenect2Device::ColorCameraParams();
  return o;
}

static void __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_ColorCameraParams(PyObject *o) {
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *p = (struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->params);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_14pylibfreenect2_12libfreenect2_17ColorCameraParams_fx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2fx_1__get__(o);
}

static PyObject *__pyx_getprop_14pylibfreenect2_12libfreenect2_17ColorCameraParams_fy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2fy_1__get__(o);
}

static PyObject *__pyx_getprop_14pylibfreenect2_12libfreenect2_17ColorCameraParams_cx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2cx_1__get__(o);
}

static PyObject *__pyx_getprop_14pylibfreenect2_12libfreenect2_17ColorCameraParams_cy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14pylibfreenect2_12libfreenect2_17ColorCameraParams_2cy_1__get__(o);
}

static PyMethodDef __pyx_methods_14pylibfreenect2_12libfreenect2_ColorCameraParams[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_17ColorCameraParams_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_17ColorCameraParams_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_14pylibfreenect2_12libfreenect2_ColorCameraParams[] = {
  {(char *)"fx", __pyx_getprop_14pylibfreenect2_12libfreenect2_17ColorCameraParams_fx, 0, (char *)"Same as ``libfreenect2::Freenect2Device::ColorCameraParams::fx``", 0},
  {(char *)"fy", __pyx_getprop_14pylibfreenect2_12libfreenect2_17ColorCameraParams_fy, 0, (char *)"Same as ``libfreenect2::Freenect2Device::ColorCameraParams::fy``", 0},
  {(char *)"cx", __pyx_getprop_14pylibfreenect2_12libfreenect2_17ColorCameraParams_cx, 0, (char *)"Same as ``libfreenect2::Freenect2Device::ColorCameraParams::cx``", 0},
  {(char *)"cy", __pyx_getprop_14pylibfreenect2_12libfreenect2_17ColorCameraParams_cy, 0, (char *)"Same as ``libfreenect2::Freenect2Device::ColorCameraParams::cy``", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14pylibfreenect2_12libfreenect2_ColorCameraParams = {
  PyVarObject_HEAD_INIT(0, 0)
  "pylibfreenect2.libfreenect2.ColorCameraParams", /*tp_name*/
  sizeof(struct __pyx_obj_14pylibfreenect2_12libfreenect2_ColorCameraParams), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_ColorCameraParams, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Python interface for ``libfreenect2::Freenect2Device::ColorCameraParams``.\n\n    Attributes\n    ----------\n    params : ``libfreenect2::Freenect2Device::ColorCameraParams``\n\n    See also\n    --------\n    pylibfreenect2.libfreenect2.Freenect2Device.getColorCameraParams\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14pylibfreenect2_12libfreenect2_ColorCameraParams, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_14pylibfreenect2_12libfreenect2_ColorCameraParams, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14pylibfreenect2_12libfreenect2_ColorCameraParams, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_IrCameraParams(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *)o);
  new((void*)&(p->params)) libfreenect2::Freenect2Device::IrCameraParams();
  return o;
}

static void __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_IrCameraParams(PyObject *o) {
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *p = (struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->params);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_14pylibfreenect2_12libfreenect2_14IrCameraParams_fx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14pylibfreenect2_12libfreenect2_14IrCameraParams_2fx_1__get__(o);
}

static PyObject *__pyx_getprop_14pylibfreenect2_12libfreenect2_14IrCameraParams_fy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14pylibfreenect2_12libfreenect2_14IrCameraParams_2fy_1__get__(o);
}

static PyObject *__pyx_getprop_14pylibfreenect2_12libfreenect2_14IrCameraParams_cx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14pylibfreenect2_12libfreenect2_14IrCameraParams_2cx_1__get__(o);
}

static PyObject *__pyx_getprop_14pylibfreenect2_12libfreenect2_14IrCameraParams_cy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14pylibfreenect2_12libfreenect2_14IrCameraParams_2cy_1__get__(o);
}

static PyMethodDef __pyx_methods_14pylibfreenect2_12libfreenect2_IrCameraParams[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_14IrCameraParams_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_14IrCameraParams_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_14pylibfreenect2_12libfreenect2_IrCameraParams[] = {
  {(char *)"fx", __pyx_getprop_14pylibfreenect2_12libfreenect2_14IrCameraParams_fx, 0, (char *)"Same as ``libfreenect2::Freenect2Device::IrCameraParams::fx``", 0},
  {(char *)"fy", __pyx_getprop_14pylibfreenect2_12libfreenect2_14IrCameraParams_fy, 0, (char *)"Same as ``libfreenect2::Freenect2Device::IrCameraParams::fy``", 0},
  {(char *)"cx", __pyx_getprop_14pylibfreenect2_12libfreenect2_14IrCameraParams_cx, 0, (char *)"Same as ``libfreenect2::Freenect2Device::IrCameraParams::cx``", 0},
  {(char *)"cy", __pyx_getprop_14pylibfreenect2_12libfreenect2_14IrCameraParams_cy, 0, (char *)"Same as ``libfreenect2::Freenect2Device::IrCameraParams::cy``", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14pylibfreenect2_12libfreenect2_IrCameraParams = {
  PyVarObject_HEAD_INIT(0, 0)
  "pylibfreenect2.libfreenect2.IrCameraParams", /*tp_name*/
  sizeof(struct __pyx_obj_14pylibfreenect2_12libfreenect2_IrCameraParams), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_IrCameraParams, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Python interface for ``libfreenect2::IrCameraParams``.\n\n    Attributes\n    ----------\n    params : ``libfreenect2::Freenect2Device::IrCameraParams``\n\n    See also\n    --------\n    pylibfreenect2.libfreenect2.Freenect2Device.getIrCameraParams\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14pylibfreenect2_12libfreenect2_IrCameraParams, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_14pylibfreenect2_12libfreenect2_IrCameraParams, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14pylibfreenect2_12libfreenect2_IrCameraParams, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_Registration(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_Registration(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14pylibfreenect2_12libfreenect2_Registration[] = {
  {"apply", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_5apply, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14pylibfreenect2_12libfreenect2_12Registration_4apply},
  {"undistortDepth", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_7undistortDepth, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14pylibfreenect2_12libfreenect2_12Registration_6undistortDepth},
  {"getPointXYZRGB", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_9getPointXYZRGB, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14pylibfreenect2_12libfreenect2_12Registration_8getPointXYZRGB},
  {"getPointXYZ", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_11getPointXYZ, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14pylibfreenect2_12libfreenect2_12Registration_10getPointXYZ},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_12Registration_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14pylibfreenect2_12libfreenect2_Registration = {
  PyVarObject_HEAD_INIT(0, 0)
  "pylibfreenect2.libfreenect2.Registration", /*tp_name*/
  sizeof(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Registration), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_Registration, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Python interface for ``libfreenect2::Registration``.\n\n    The Registration is a container of C++ pointer\n    ``libfreenect2::Registration*``. The pointer of Registration is allocated\n    in ``__cinit__`` and released in ``__dealloc__`` method.\n\n    Attributes\n    ----------\n    ptr : ``libfreenect2::Registration*``\n\n    Parameters\n    ----------\n    irparams : IrCameraParams\n        IR camera parameters.\n\n    cparams : ColorCameraParams\n        Color camera parameters.\n\n    See also\n    --------\n    pylibfreenect2.libfreenect2.IrCameraParams\n    pylibfreenect2.libfreenect2.ColorCameraParams\n    pylibfreenect2.libfreenect2.Freenect2Device.getIrCameraParams\n    pylibfreenect2.libfreenect2.Freenect2Device.getColorCameraParams\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14pylibfreenect2_12libfreenect2_Registration, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14pylibfreenect2_12libfreenect2_Registration, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_Logger(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_Logger(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14pylibfreenect2_12libfreenect2_Logger[] = {
  {"level", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_6Logger_1level, METH_NOARGS, __pyx_doc_14pylibfreenect2_12libfreenect2_6Logger_level},
  {"log", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_6Logger_3log, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14pylibfreenect2_12libfreenect2_6Logger_2log},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_6Logger_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_6Logger_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14pylibfreenect2_12libfreenect2_Logger = {
  PyVarObject_HEAD_INIT(0, 0)
  "pylibfreenect2.libfreenect2.Logger", /*tp_name*/
  sizeof(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Logger), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_Logger, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Python interface for libfreenect2::Logger\n\n\n    The Logger is a container of C++ pointer ``libfreenect2::Logger*``.\n\n    Attributes\n    ----------\n    ptr : libfreenect2::Logger*\n        C++ pointer of Logger\n\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14pylibfreenect2_12libfreenect2_Logger, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14pylibfreenect2_12libfreenect2_Logger, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_PacketPipeline(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_PacketPipeline(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14pylibfreenect2_12libfreenect2_PacketPipeline[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_14PacketPipeline_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_14PacketPipeline_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14pylibfreenect2_12libfreenect2_PacketPipeline = {
  PyVarObject_HEAD_INIT(0, 0)
  "pylibfreenect2.libfreenect2.PacketPipeline", /*tp_name*/
  sizeof(struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_PacketPipeline, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Base class for other pipeline classes.\n\n    Attributes\n    ----------\n    pipeline_ptr_alias : ``libfreenect2::PacketPipeline*``\n    owened_by_device : bool\n\n    See also\n    --------\n    pylibfreenect2.libfreenect2.CpuPacketPipeline\n    pylibfreenect2.libfreenect2.OpenCLPacketPipeline\n    pylibfreenect2.libfreenect2.OpenCLKdePacketPipeline\n    pylibfreenect2.libfreenect2.OpenGLPacketPipeline\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14pylibfreenect2_12libfreenect2_PacketPipeline, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14pylibfreenect2_12libfreenect2_PacketPipeline, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_CpuPacketPipeline(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_14pylibfreenect2_12libfreenect2_PacketPipeline(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_CpuPacketPipeline(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_PacketPipeline(o);
}

static PyMethodDef __pyx_methods_14pylibfreenect2_12libfreenect2_CpuPacketPipeline[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_17CpuPacketPipeline_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14pylibfreenect2_12libfreenect2_CpuPacketPipeline = {
  PyVarObject_HEAD_INIT(0, 0)
  "pylibfreenect2.libfreenect2.CpuPacketPipeline", /*tp_name*/
  sizeof(struct __pyx_obj_14pylibfreenect2_12libfreenect2_CpuPacketPipeline), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_CpuPacketPipeline, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Pipeline with CPU depth processing.\n\n    Attributes\n    ----------\n    pipeline : `libfreenect2::CpuPacketPipeline*`\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14pylibfreenect2_12libfreenect2_CpuPacketPipeline, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14pylibfreenect2_12libfreenect2_CpuPacketPipeline, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_14pylibfreenect2_12libfreenect2_PacketPipeline(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_PacketPipeline(o);
}

static PyMethodDef __pyx_methods_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_20OpenGLPacketPipeline_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline = {
  PyVarObject_HEAD_INIT(0, 0)
  "pylibfreenect2.libfreenect2.OpenGLPacketPipeline", /*tp_name*/
  sizeof(struct __pyx_obj_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Pipeline with OpenGL depth processing.\n\n    Attributes\n    ----------\n    pipeline : `libfreenect2::OpenGLPacketPipeline*`\n\n    Parameters\n    ----------\n    debug : bool, optional\n        Debugging mode. Default is False.\n\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_Freenect2Device(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_Freenect2Device(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14pylibfreenect2_12libfreenect2_Freenect2Device[] = {
  {"getSerialNumber", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_1getSerialNumber, METH_NOARGS, __pyx_doc_14pylibfreenect2_12libfreenect2_15Freenect2Device_getSerialNumber},
  {"getFirmwareVersion", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_3getFirmwareVersion, METH_NOARGS, __pyx_doc_14pylibfreenect2_12libfreenect2_15Freenect2Device_2getFirmwareVersion},
  {"getColorCameraParams", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_5getColorCameraParams, METH_NOARGS, __pyx_doc_14pylibfreenect2_12libfreenect2_15Freenect2Device_4getColorCameraParams},
  {"getIrCameraParams", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_7getIrCameraParams, METH_NOARGS, __pyx_doc_14pylibfreenect2_12libfreenect2_15Freenect2Device_6getIrCameraParams},
  {"setColorFrameListener", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_9setColorFrameListener, METH_O, __pyx_doc_14pylibfreenect2_12libfreenect2_15Freenect2Device_8setColorFrameListener},
  {"setIrAndDepthFrameListener", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_11setIrAndDepthFrameListener, METH_O, __pyx_doc_14pylibfreenect2_12libfreenect2_15Freenect2Device_10setIrAndDepthFrameListener},
  {"start", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_13start, METH_NOARGS, __pyx_doc_14pylibfreenect2_12libfreenect2_15Freenect2Device_12start},
  {"startStreams", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_15startStreams, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14pylibfreenect2_12libfreenect2_15Freenect2Device_14startStreams},
  {"stop", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_17stop, METH_NOARGS, __pyx_doc_14pylibfreenect2_12libfreenect2_15Freenect2Device_16stop},
  {"close", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_19close, METH_NOARGS, __pyx_doc_14pylibfreenect2_12libfreenect2_15Freenect2Device_18close},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_21__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_15Freenect2Device_23__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14pylibfreenect2_12libfreenect2_Freenect2Device = {
  PyVarObject_HEAD_INIT(0, 0)
  "pylibfreenect2.libfreenect2.Freenect2Device", /*tp_name*/
  sizeof(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2Device), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_Freenect2Device, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Python interface for ``libfreenect2::Freenect2Device``.\n\n    The Freenect2Device is a container of C++ pointer\n    ``libfreenect2::Freenect2Device*``.\n\n    .. note::\n        Freenect2Device just keeps a pointer of\n        ``libfreenect2::Freenect2Device`` that should be allocated and released\n        by Freenect2. Freenect2Device itself doesn't own the memory.\n\n\n    A valid device can be created by ``openDefaultDevice``:\n\n    .. code-block:: python\n\n        fn = Freenect2()\n        assert fn.enumerateDevices() > 0\n        device = fn.openDefaultDevice()\n\n    or  by ``openDevice``:\n\n    .. code-block:: python\n\n        fn = Freenect2()\n        assert fn.enumerateDevices() > 0\n        serial = fn.getDeviceSerialNumber(0)\n        device = fn.openDevice(serial)\n\n    Attributes\n    ----------\n    ptr : ``libfreenect2::Freenect2Device*``\n\n    See also\n    --------\n    pylibfreenect2.libfreenect2.Freenect2\n    pylibfreenect2.libfreenect2.Freenect2.openDefaultDevice\n    pylibfreenect2.libfreenect2.Freenect2.openDevice\n\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14pylibfreenect2_12libfreenect2_Freenect2Device, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14pylibfreenect2_12libfreenect2_Freenect2Device, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_14pylibfreenect2_12libfreenect2_Freenect2 __pyx_vtable_14pylibfreenect2_12libfreenect2_Freenect2;

static PyObject *__pyx_tp_new_14pylibfreenect2_12libfreenect2_Freenect2(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *)o);
  p->__pyx_vtab = __pyx_vtabptr_14pylibfreenect2_12libfreenect2_Freenect2;
  if (unlikely(__pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_Freenect2(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14pylibfreenect2_12libfreenect2_Freenect2[] = {
  {"enumerateDevices", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_5enumerateDevices, METH_NOARGS, __pyx_doc_14pylibfreenect2_12libfreenect2_9Freenect2_4enumerateDevices},
  {"getDeviceSerialNumber", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_7getDeviceSerialNumber, METH_O, __pyx_doc_14pylibfreenect2_12libfreenect2_9Freenect2_6getDeviceSerialNumber},
  {"getDefaultDeviceSerialNumber", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_9getDefaultDeviceSerialNumber, METH_NOARGS, __pyx_doc_14pylibfreenect2_12libfreenect2_9Freenect2_8getDefaultDeviceSerialNumber},
  {"openDevice", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_11openDevice, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14pylibfreenect2_12libfreenect2_9Freenect2_10openDevice},
  {"openDefaultDevice", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_13openDefaultDevice, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14pylibfreenect2_12libfreenect2_9Freenect2_12openDefaultDevice},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_15__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14pylibfreenect2_12libfreenect2_9Freenect2_17__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14pylibfreenect2_12libfreenect2_Freenect2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pylibfreenect2.libfreenect2.Freenect2", /*tp_name*/
  sizeof(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14pylibfreenect2_12libfreenect2_Freenect2, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Python interface for ``libfreenect2::Freenect2``.\n\n    The Freenect2 is a container of C++ pointer\n    ``libfreenect2::Freenect2*``. The pointer of Freenect2 is allocated\n    in ``__cinit__`` and released in ``__dealloc__`` method.\n\n    Attributes\n    ----------\n    ptr : ``libfreenect2::Freenect2*``\n\n    See also\n    --------\n    pylibfreenect2.libfreenect2.Freenect2Device\n\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14pylibfreenect2_12libfreenect2_Freenect2, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14pylibfreenect2_12libfreenect2_Freenect2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_libfreenect2(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_libfreenect2},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "libfreenect2",
    __pyx_k_API_important_Python_API_s_are, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_Cannot_determine_type_of_data_Sp, __pyx_k_Cannot_determine_type_of_data_Sp, sizeof(__pyx_k_Cannot_determine_type_of_data_Sp), 0, 0, 1, 0},
  {&__pyx_n_s_Color, __pyx_k_Color, sizeof(__pyx_k_Color), 0, 0, 1, 1},
  {&__pyx_n_s_Depth, __pyx_k_Depth, sizeof(__pyx_k_Depth), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_FrameType, __pyx_k_FrameType, sizeof(__pyx_k_FrameType), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_Ir, __pyx_k_Ir, sizeof(__pyx_k_Ir), 0, 0, 1, 1},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_kp_s_Not_supported, __pyx_k_Not_supported, sizeof(__pyx_k_Not_supported), 0, 0, 1, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Shape_of_bigdepth_frame_x_is_inv, __pyx_k_Shape_of_bigdepth_frame_x_is_inv, sizeof(__pyx_k_Shape_of_bigdepth_frame_x_is_inv), 0, 0, 1, 0},
  {&__pyx_kp_s_Shape_of_color_depth_map_array_i, __pyx_k_Shape_of_color_depth_map_array_i, sizeof(__pyx_k_Shape_of_color_depth_map_array_i), 0, 0, 1, 0},
  {&__pyx_kp_s_Shape_of_color_frame_x_is_invali, __pyx_k_Shape_of_color_frame_x_is_invali, sizeof(__pyx_k_Shape_of_color_frame_x_is_invali), 0, 0, 1, 0},
  {&__pyx_kp_s_Shape_of_depth_frame_x_is_invali, __pyx_k_Shape_of_depth_frame_x_is_invali, sizeof(__pyx_k_Shape_of_depth_frame_x_is_invali), 0, 0, 1, 0},
  {&__pyx_kp_s_Shape_of_registered_frame_x_is_i, __pyx_k_Shape_of_registered_frame_x_is_i, sizeof(__pyx_k_Shape_of_registered_frame_x_is_i), 0, 0, 1, 0},
  {&__pyx_kp_s_Shape_of_undistorted_frame_x_is, __pyx_k_Shape_of_undistorted_frame_x_is, sizeof(__pyx_k_Shape_of_undistorted_frame_x_is), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 0, 1, 0},
  {&__pyx_n_s_asarray, __pyx_k_asarray, sizeof(__pyx_k_asarray), 0, 0, 1, 1},
  {&__pyx_n_s_bigdepth, __pyx_k_bigdepth, sizeof(__pyx_k_bigdepth), 0, 0, 1, 1},
  {&__pyx_n_s_bytes_per_pixel, __pyx_k_bytes_per_pixel, sizeof(__pyx_k_bytes_per_pixel), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_color, __pyx_k_color, sizeof(__pyx_k_color), 0, 0, 1, 1},
  {&__pyx_n_s_color_depth_map, __pyx_k_color_depth_map, sizeof(__pyx_k_color_depth_map), 0, 0, 1, 1},
  {&__pyx_n_s_cparams, __pyx_k_cparams, sizeof(__pyx_k_cparams), 0, 0, 1, 1},
  {&__pyx_n_s_createConsoleLogger, __pyx_k_createConsoleLogger, sizeof(__pyx_k_createConsoleLogger), 0, 0, 1, 1},
  {&__pyx_n_s_createConsoleLoggerWithDefaultLe, __pyx_k_createConsoleLoggerWithDefaultLe, sizeof(__pyx_k_createConsoleLoggerWithDefaultLe), 0, 0, 1, 1},
  {&__pyx_n_s_debug, __pyx_k_debug, sizeof(__pyx_k_debug), 0, 0, 1, 1},
  {&__pyx_n_s_depth, __pyx_k_depth, sizeof(__pyx_k_depth), 0, 0, 1, 1},
  {&__pyx_kp_s_device_name_must_be_of_str_bytes, __pyx_k_device_name_must_be_of_str_bytes, sizeof(__pyx_k_device_name_must_be_of_str_bytes), 0, 0, 1, 0},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_enable_filter, __pyx_k_enable_filter, sizeof(__pyx_k_enable_filter), 0, 0, 1, 1},
  {&__pyx_n_s_float32, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_frame_map, __pyx_k_frame_map, sizeof(__pyx_k_frame_map), 0, 0, 1, 1},
  {&__pyx_n_s_frame_type, __pyx_k_frame_type, sizeof(__pyx_k_frame_type), 0, 0, 1, 1},
  {&__pyx_n_s_frame_types, __pyx_k_frame_types, sizeof(__pyx_k_frame_types), 0, 0, 1, 1},
  {&__pyx_n_s_getGlobalLogger, __pyx_k_getGlobalLogger, sizeof(__pyx_k_getGlobalLogger), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_height, __pyx_k_height, sizeof(__pyx_k_height), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_ir, __pyx_k_ir, sizeof(__pyx_k_ir), 0, 0, 1, 1},
  {&__pyx_n_s_irparams, __pyx_k_irparams, sizeof(__pyx_k_irparams), 0, 0, 1, 1},
  {&__pyx_n_s_level, __pyx_k_level, sizeof(__pyx_k_level), 0, 0, 1, 1},
  {&__pyx_n_s_logger, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_message, __pyx_k_message, sizeof(__pyx_k_message), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_kp_s_np_uint8_or_np_float32_is_only_s, __pyx_k_np_uint8_or_np_float32_is_only_s, sizeof(__pyx_k_np_uint8_or_np_float32_is_only_s), 0, 0, 1, 0},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_pipeline, __pyx_k_pipeline, sizeof(__pyx_k_pipeline), 0, 0, 1, 1},
  {&__pyx_n_s_ptr, __pyx_k_ptr, sizeof(__pyx_k_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_pylibfreenect2, __pyx_k_pylibfreenect2, sizeof(__pyx_k_pylibfreenect2), 0, 0, 1, 1},
  {&__pyx_n_s_pylibfreenect2_libfreenect2, __pyx_k_pylibfreenect2_libfreenect2, sizeof(__pyx_k_pylibfreenect2_libfreenect2), 0, 0, 1, 1},
  {&__pyx_kp_s_pylibfreenect2_libfreenect2_pyx, __pyx_k_pylibfreenect2_libfreenect2_pyx, sizeof(__pyx_k_pylibfreenect2_libfreenect2_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_registered, __pyx_k_registered, sizeof(__pyx_k_registered), 0, 0, 1, 1},
  {&__pyx_n_s_rgb, __pyx_k_rgb, sizeof(__pyx_k_rgb), 0, 0, 1, 1},
  {&__pyx_kp_s_self_listener_ptr_alias_cannot_b, __pyx_k_self_listener_ptr_alias_cannot_b, sizeof(__pyx_k_self_listener_ptr_alias_cannot_b), 0, 0, 1, 0},
  {&__pyx_kp_s_self_params_cannot_be_converted, __pyx_k_self_params_cannot_be_converted, sizeof(__pyx_k_self_params_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_kp_s_self_pipeline_ptr_alias_cannot_b, __pyx_k_self_pipeline_ptr_alias_cannot_b, sizeof(__pyx_k_self_pipeline_ptr_alias_cannot_b), 0, 0, 1, 0},
  {&__pyx_kp_s_self_ptr_cannot_be_converted_to, __pyx_k_self_ptr_cannot_be_converted_to, sizeof(__pyx_k_self_ptr_cannot_be_converted_to), 0, 0, 1, 0},
  {&__pyx_n_s_setGlobalLogger, __pyx_k_setGlobalLogger, sizeof(__pyx_k_setGlobalLogger), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_take_ownership, __pyx_k_take_ownership, sizeof(__pyx_k_take_ownership), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_uint8, __pyx_k_uint8, sizeof(__pyx_k_uint8), 0, 0, 1, 1},
  {&__pyx_n_s_undistorted, __pyx_k_undistorted, sizeof(__pyx_k_undistorted), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 311, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(0, 488, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(3, 248, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(3, 823, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(3, 1013, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pylibfreenect2/libfreenect2.pyx":311
 *     def __asarray(self, dtype):
 *         if dtype != np.uint8 and dtype != np.float32:
 *             raise ValueError("np.uint8 or np.float32 is only supported")             # <<<<<<<<<<<<<<
 *         if dtype == np.uint8:
 *             return self.__uint8_data()
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_np_uint8_or_np_float32_is_only_s); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "pylibfreenect2/libfreenect2.pyx":361
 *         """
 *         if dtype is None and self.frame_type < 0:
 *             raise ValueError("Cannot determine type of data. Specify dtype explicitly.")             # <<<<<<<<<<<<<<
 * 
 *         if dtype is None:
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_Cannot_determine_type_of_data_Sp); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.listener_ptr_alias cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.listener_ptr_alias cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_self_listener_ptr_alias_cannot_b); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("self.listener_ptr_alias cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.listener_ptr_alias cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_self_listener_ptr_alias_cannot_b); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "pylibfreenect2/libfreenect2.pyx":385
 *         return libfreenect2.Depth
 *     else:
 *         raise ValueError("Not supported")             # <<<<<<<<<<<<<<
 * 
 * cdef str_to_int_frame_type(str s):
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_Not_supported); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "pylibfreenect2/libfreenect2.pyx":396
 *         return FrameType.Depth
 *     else:
 *         raise ValueError("Not supported")             # <<<<<<<<<<<<<<
 * 
 * cdef str_to_frame_type(str s):
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_Not_supported); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "pylibfreenect2/libfreenect2.pyx":488
 *             intkey = str_to_int_frame_type(key)
 *         else:
 *             raise KeyError("")             # <<<<<<<<<<<<<<
 * 
 *         cdef libfreenect2.Frame* frame_ptr = self.internal_frame_map[frame_type]
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s__9); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_self_params_cannot_be_converted); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":4
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_self_params_cannot_be_converted); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_self_params_cannot_be_converted); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "(tree fragment)":4
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.params cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_self_params_cannot_be_converted); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_self_ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":4
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_self_ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.pipeline_ptr_alias cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.pipeline_ptr_alias cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_self_pipeline_ptr_alias_cannot_b); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "(tree fragment)":4
 *     raise TypeError("self.pipeline_ptr_alias cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.pipeline_ptr_alias cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_self_pipeline_ptr_alias_cannot_b); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_self_ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "(tree fragment)":4
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_self_ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "pylibfreenect2/libfreenect2.pyx":1208
 *             return self.__openDevice__stridx(name, pipeline)
 *         else:
 *             raise ValueError("device name must be of str, bytes or integer type")             # <<<<<<<<<<<<<<
 * 
 *     def openDefaultDevice(self, PacketPipeline pipeline=None):
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_device_name_must_be_of_str_bytes); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":235
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(3, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":239
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(3, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(3, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":823
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(3, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":827
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(3, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":847
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(3, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1013
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(3, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1019
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(3, 1019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "../../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":1025
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(3, 1025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "pylibfreenect2/libfreenect2.pyx":905
 * 
 * 
 * def createConsoleLogger(level):             # <<<<<<<<<<<<<<
 *     """Same as ``Logger* libfreenect2::createConsoleLogger(Level level)``
 * 
 */
  __pyx_tuple__44 = PyTuple_Pack(2, __pyx_n_s_level, __pyx_n_s_logger); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pylibfreenect2_libfreenect2_pyx, __pyx_n_s_createConsoleLogger, 905, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 905, __pyx_L1_error)

  /* "pylibfreenect2/libfreenect2.pyx":936
 * 
 * 
 * def createConsoleLoggerWithDefaultLevel():             # <<<<<<<<<<<<<<
 *     """Same as ``Logger* libfreenect2::createConsoleLoggerWithDefaultLevel()``
 * 
 */
  __pyx_tuple__46 = PyTuple_Pack(2, __pyx_n_s_logger, __pyx_n_s_ptr); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pylibfreenect2_libfreenect2_pyx, __pyx_n_s_createConsoleLoggerWithDefaultLe, 936, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 936, __pyx_L1_error)

  /* "pylibfreenect2/libfreenect2.pyx":955
 * 
 * 
 * def getGlobalLogger():             # <<<<<<<<<<<<<<
 *     """Same as ``Logger* libfreenect2::getGlobalLogger()``"""
 *     cdef Logger logger = Logger()
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_n_s_logger); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pylibfreenect2_libfreenect2_pyx, __pyx_n_s_getGlobalLogger, 955, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(0, 955, __pyx_L1_error)

  /* "pylibfreenect2/libfreenect2.pyx":962
 * 
 * 
 * def setGlobalLogger(Logger logger=None):             # <<<<<<<<<<<<<<
 *     """Same as ``void libfreenect2::getGlobalLogger(Logger*)``
 * 
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_n_s_logger); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pylibfreenect2_libfreenect2_pyx, __pyx_n_s_setGlobalLogger, 962, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_424 = PyInt_FromLong(424); if (unlikely(!__pyx_int_424)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_512 = PyInt_FromLong(512); if (unlikely(!__pyx_int_512)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1080 = PyInt_FromLong(1080); if (unlikely(!__pyx_int_1080)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1082 = PyInt_FromLong(1082); if (unlikely(!__pyx_int_1082)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1920 = PyInt_FromLong(1920); if (unlikely(!__pyx_int_1920)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initlibfreenect2(void); /*proto*/
PyMODINIT_FUNC initlibfreenect2(void)
#else
PyMODINIT_FUNC PyInit_libfreenect2(void); /*proto*/
PyMODINIT_FUNC PyInit_libfreenect2(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_libfreenect2(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #endif
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_libfreenect2(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("libfreenect2", __pyx_methods, __pyx_k_API_important_Python_API_s_are, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pylibfreenect2__libfreenect2) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pylibfreenect2.libfreenect2")) {
      if (unlikely(PyDict_SetItemString(modules, "pylibfreenect2.libfreenect2", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_14pylibfreenect2_12libfreenect2_Frame = &__pyx_vtable_14pylibfreenect2_12libfreenect2_Frame;
  __pyx_vtable_14pylibfreenect2_12libfreenect2_Frame.__pyx___uint8_data = (PyObject *(*)(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *))__pyx_f_14pylibfreenect2_12libfreenect2_5Frame___uint8_data;
  __pyx_vtable_14pylibfreenect2_12libfreenect2_Frame.__pyx___float32_data = (PyObject *(*)(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Frame *))__pyx_f_14pylibfreenect2_12libfreenect2_5Frame___float32_data;
  if (PyType_Ready(&__pyx_type_14pylibfreenect2_12libfreenect2_Frame) < 0) __PYX_ERR(0, 178, __pyx_L1_error)
  __pyx_type_14pylibfreenect2_12libfreenect2_Frame.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_14pylibfreenect2_12libfreenect2_Frame.tp_dict, __pyx_vtabptr_14pylibfreenect2_12libfreenect2_Frame) < 0) __PYX_ERR(0, 178, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Frame", (PyObject *)&__pyx_type_14pylibfreenect2_12libfreenect2_Frame) < 0) __PYX_ERR(0, 178, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14pylibfreenect2_12libfreenect2_Frame) < 0) __PYX_ERR(0, 178, __pyx_L1_error)
  __pyx_ptype_14pylibfreenect2_12libfreenect2_Frame = &__pyx_type_14pylibfreenect2_12libfreenect2_Frame;
  if (PyType_Ready(&__pyx_type_14pylibfreenect2_12libfreenect2_FrameListener) < 0) __PYX_ERR(0, 373, __pyx_L1_error)
  __pyx_type_14pylibfreenect2_12libfreenect2_FrameListener.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "FrameListener", (PyObject *)&__pyx_type_14pylibfreenect2_12libfreenect2_FrameListener) < 0) __PYX_ERR(0, 373, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14pylibfreenect2_12libfreenect2_FrameListener) < 0) __PYX_ERR(0, 373, __pyx_L1_error)
  __pyx_ptype_14pylibfreenect2_12libfreenect2_FrameListener = &__pyx_type_14pylibfreenect2_12libfreenect2_FrameListener;
  if (PyType_Ready(&__pyx_type_14pylibfreenect2_12libfreenect2_FrameMap) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __pyx_type_14pylibfreenect2_12libfreenect2_FrameMap.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_14pylibfreenect2_12libfreenect2_FrameMap, "__getitem__"); if (unlikely(!wrapper)) __PYX_ERR(0, 402, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_14pylibfreenect2_12libfreenect2_8FrameMap_4__getitem__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_14pylibfreenect2_12libfreenect2_8FrameMap_4__getitem__.doc = __pyx_doc_14pylibfreenect2_12libfreenect2_8FrameMap_4__getitem__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_14pylibfreenect2_12libfreenect2_8FrameMap_4__getitem__;
    }
  }
  #endif
  if (PyObject_SetAttrString(__pyx_m, "FrameMap", (PyObject *)&__pyx_type_14pylibfreenect2_12libfreenect2_FrameMap) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14pylibfreenect2_12libfreenect2_FrameMap) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __pyx_ptype_14pylibfreenect2_12libfreenect2_FrameMap = &__pyx_type_14pylibfreenect2_12libfreenect2_FrameMap;
  __pyx_type_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener.tp_base = __pyx_ptype_14pylibfreenect2_12libfreenect2_FrameListener;
  if (PyType_Ready(&__pyx_type_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener) < 0) __PYX_ERR(0, 496, __pyx_L1_error)
  __pyx_type_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "SyncMultiFrameListener", (PyObject *)&__pyx_type_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener) < 0) __PYX_ERR(0, 496, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener) < 0) __PYX_ERR(0, 496, __pyx_L1_error)
  __pyx_ptype_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener = &__pyx_type_14pylibfreenect2_12libfreenect2_SyncMultiFrameListener;
  if (PyType_Ready(&__pyx_type_14pylibfreenect2_12libfreenect2_ColorCameraParams) < 0) __PYX_ERR(0, 616, __pyx_L1_error)
  __pyx_type_14pylibfreenect2_12libfreenect2_ColorCameraParams.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "ColorCameraParams", (PyObject *)&__pyx_type_14pylibfreenect2_12libfreenect2_ColorCameraParams) < 0) __PYX_ERR(0, 616, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14pylibfreenect2_12libfreenect2_ColorCameraParams) < 0) __PYX_ERR(0, 616, __pyx_L1_error)
  __pyx_ptype_14pylibfreenect2_12libfreenect2_ColorCameraParams = &__pyx_type_14pylibfreenect2_12libfreenect2_ColorCameraParams;
  if (PyType_Ready(&__pyx_type_14pylibfreenect2_12libfreenect2_IrCameraParams) < 0) __PYX_ERR(0, 651, __pyx_L1_error)
  __pyx_type_14pylibfreenect2_12libfreenect2_IrCameraParams.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "IrCameraParams", (PyObject *)&__pyx_type_14pylibfreenect2_12libfreenect2_IrCameraParams) < 0) __PYX_ERR(0, 651, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14pylibfreenect2_12libfreenect2_IrCameraParams) < 0) __PYX_ERR(0, 651, __pyx_L1_error)
  __pyx_ptype_14pylibfreenect2_12libfreenect2_IrCameraParams = &__pyx_type_14pylibfreenect2_12libfreenect2_IrCameraParams;
  if (PyType_Ready(&__pyx_type_14pylibfreenect2_12libfreenect2_Registration) < 0) __PYX_ERR(0, 684, __pyx_L1_error)
  __pyx_type_14pylibfreenect2_12libfreenect2_Registration.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Registration", (PyObject *)&__pyx_type_14pylibfreenect2_12libfreenect2_Registration) < 0) __PYX_ERR(0, 684, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14pylibfreenect2_12libfreenect2_Registration) < 0) __PYX_ERR(0, 684, __pyx_L1_error)
  __pyx_ptype_14pylibfreenect2_12libfreenect2_Registration = &__pyx_type_14pylibfreenect2_12libfreenect2_Registration;
  if (PyType_Ready(&__pyx_type_14pylibfreenect2_12libfreenect2_Logger) < 0) __PYX_ERR(0, 882, __pyx_L1_error)
  __pyx_type_14pylibfreenect2_12libfreenect2_Logger.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Logger", (PyObject *)&__pyx_type_14pylibfreenect2_12libfreenect2_Logger) < 0) __PYX_ERR(0, 882, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14pylibfreenect2_12libfreenect2_Logger) < 0) __PYX_ERR(0, 882, __pyx_L1_error)
  __pyx_ptype_14pylibfreenect2_12libfreenect2_Logger = &__pyx_type_14pylibfreenect2_12libfreenect2_Logger;
  if (PyType_Ready(&__pyx_type_14pylibfreenect2_12libfreenect2_PacketPipeline) < 0) __PYX_ERR(0, 980, __pyx_L1_error)
  __pyx_type_14pylibfreenect2_12libfreenect2_PacketPipeline.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PacketPipeline", (PyObject *)&__pyx_type_14pylibfreenect2_12libfreenect2_PacketPipeline) < 0) __PYX_ERR(0, 980, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14pylibfreenect2_12libfreenect2_PacketPipeline) < 0) __PYX_ERR(0, 980, __pyx_L1_error)
  __pyx_ptype_14pylibfreenect2_12libfreenect2_PacketPipeline = &__pyx_type_14pylibfreenect2_12libfreenect2_PacketPipeline;
  __pyx_type_14pylibfreenect2_12libfreenect2_CpuPacketPipeline.tp_base = __pyx_ptype_14pylibfreenect2_12libfreenect2_PacketPipeline;
  if (PyType_Ready(&__pyx_type_14pylibfreenect2_12libfreenect2_CpuPacketPipeline) < 0) __PYX_ERR(0, 1002, __pyx_L1_error)
  __pyx_type_14pylibfreenect2_12libfreenect2_CpuPacketPipeline.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "CpuPacketPipeline", (PyObject *)&__pyx_type_14pylibfreenect2_12libfreenect2_CpuPacketPipeline) < 0) __PYX_ERR(0, 1002, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14pylibfreenect2_12libfreenect2_CpuPacketPipeline) < 0) __PYX_ERR(0, 1002, __pyx_L1_error)
  __pyx_ptype_14pylibfreenect2_12libfreenect2_CpuPacketPipeline = &__pyx_type_14pylibfreenect2_12libfreenect2_CpuPacketPipeline;
  __pyx_type_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline.tp_base = __pyx_ptype_14pylibfreenect2_12libfreenect2_PacketPipeline;
  if (PyType_Ready(&__pyx_type_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_type_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "OpenGLPacketPipeline", (PyObject *)&__pyx_type_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_ptype_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline = &__pyx_type_14pylibfreenect2_12libfreenect2_OpenGLPacketPipeline;
  if (PyType_Ready(&__pyx_type_14pylibfreenect2_12libfreenect2_Freenect2Device) < 0) __PYX_ERR(0, 1028, __pyx_L1_error)
  __pyx_type_14pylibfreenect2_12libfreenect2_Freenect2Device.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Freenect2Device", (PyObject *)&__pyx_type_14pylibfreenect2_12libfreenect2_Freenect2Device) < 0) __PYX_ERR(0, 1028, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14pylibfreenect2_12libfreenect2_Freenect2Device) < 0) __PYX_ERR(0, 1028, __pyx_L1_error)
  __pyx_ptype_14pylibfreenect2_12libfreenect2_Freenect2Device = &__pyx_type_14pylibfreenect2_12libfreenect2_Freenect2Device;
  __pyx_vtabptr_14pylibfreenect2_12libfreenect2_Freenect2 = &__pyx_vtable_14pylibfreenect2_12libfreenect2_Freenect2;
  __pyx_vtable_14pylibfreenect2_12libfreenect2_Freenect2.__pyx___openDevice__intidx = (PyObject *(*)(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *, int, struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *))__pyx_f_14pylibfreenect2_12libfreenect2_9Freenect2___openDevice__intidx;
  __pyx_vtable_14pylibfreenect2_12libfreenect2_Freenect2.__pyx___openDevice__stridx = (PyObject *(*)(struct __pyx_obj_14pylibfreenect2_12libfreenect2_Freenect2 *, std::string, struct __pyx_obj_14pylibfreenect2_12libfreenect2_PacketPipeline *))__pyx_f_14pylibfreenect2_12libfreenect2_9Freenect2___openDevice__stridx;
  if (PyType_Ready(&__pyx_type_14pylibfreenect2_12libfreenect2_Freenect2) < 0) __PYX_ERR(0, 1124, __pyx_L1_error)
  __pyx_type_14pylibfreenect2_12libfreenect2_Freenect2.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_14pylibfreenect2_12libfreenect2_Freenect2.tp_dict, __pyx_vtabptr_14pylibfreenect2_12libfreenect2_Freenect2) < 0) __PYX_ERR(0, 1124, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Freenect2", (PyObject *)&__pyx_type_14pylibfreenect2_12libfreenect2_Freenect2) < 0) __PYX_ERR(0, 1124, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14pylibfreenect2_12libfreenect2_Freenect2) < 0) __PYX_ERR(0, 1124, __pyx_L1_error)
  __pyx_ptype_14pylibfreenect2_12libfreenect2_Freenect2 = &__pyx_type_14pylibfreenect2_12libfreenect2_Freenect2;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(4, 9, __pyx_L1_error)
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(3, 163, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(3, 185, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(3, 189, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(3, 198, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(3, 885, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "pylibfreenect2/libfreenect2.pyx":146
 * 
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * 
 * cimport numpy as np
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pylibfreenect2/libfreenect2.pyx":149
 * 
 * cimport numpy as np
 * np.import_array()             # <<<<<<<<<<<<<<
 * 
 * cimport cython
 */
  __pyx_t_2 = __pyx_f_5numpy_import_array(); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 149, __pyx_L1_error)

  /* "pylibfreenect2/libfreenect2.pyx":176
 * from libfreenect2.libfreenect2 cimport Freenect2Device as _Freenect2Device
 * 
 * from pylibfreenect2 import FrameType             # <<<<<<<<<<<<<<
 * 
 * cdef class Frame:
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_FrameType);
  __Pyx_GIVEREF(__pyx_n_s_FrameType);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_FrameType);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pylibfreenect2, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_FrameType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FrameType, __pyx_t_1) < 0) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pylibfreenect2/libfreenect2.pyx":535
 * 
 *     def __cinit__(self, unsigned int frame_types=<unsigned int>(
 *                         FrameType.Color | FrameType.Ir | FrameType.Depth)):             # <<<<<<<<<<<<<<
 *         self.ptr = new libfreenect2.SyncMultiFrameListener(frame_types)
 *         self.listener_ptr_alias = <libfreenect2.FrameListener*> self.ptr
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_FrameType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Color); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_FrameType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Ir); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Or(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_FrameType); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Or(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pylibfreenect2/libfreenect2.pyx":534
 *     cdef libfreenect2.SyncMultiFrameListener* ptr
 * 
 *     def __cinit__(self, unsigned int frame_types=<unsigned int>(             # <<<<<<<<<<<<<<
 *                         FrameType.Color | FrameType.Ir | FrameType.Depth)):
 *         self.ptr = new libfreenect2.SyncMultiFrameListener(frame_types)
 */
  __pyx_k__13 = ((unsigned int)__pyx_t_5);

  /* "pylibfreenect2/libfreenect2.pyx":905
 * 
 * 
 * def createConsoleLogger(level):             # <<<<<<<<<<<<<<
 *     """Same as ``Logger* libfreenect2::createConsoleLogger(Level level)``
 * 
 */
  __pyx_t_4 = PyCFunction_NewEx(&__pyx_mdef_14pylibfreenect2_12libfreenect2_1createConsoleLogger, NULL, __pyx_n_s_pylibfreenect2_libfreenect2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_createConsoleLogger, __pyx_t_4) < 0) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pylibfreenect2/libfreenect2.pyx":936
 * 
 * 
 * def createConsoleLoggerWithDefaultLevel():             # <<<<<<<<<<<<<<
 *     """Same as ``Logger* libfreenect2::createConsoleLoggerWithDefaultLevel()``
 * 
 */
  __pyx_t_4 = PyCFunction_NewEx(&__pyx_mdef_14pylibfreenect2_12libfreenect2_3createConsoleLoggerWithDefaultLevel, NULL, __pyx_n_s_pylibfreenect2_libfreenect2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_createConsoleLoggerWithDefaultLe, __pyx_t_4) < 0) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pylibfreenect2/libfreenect2.pyx":955
 * 
 * 
 * def getGlobalLogger():             # <<<<<<<<<<<<<<
 *     """Same as ``Logger* libfreenect2::getGlobalLogger()``"""
 *     cdef Logger logger = Logger()
 */
  __pyx_t_4 = PyCFunction_NewEx(&__pyx_mdef_14pylibfreenect2_12libfreenect2_5getGlobalLogger, NULL, __pyx_n_s_pylibfreenect2_libfreenect2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getGlobalLogger, __pyx_t_4) < 0) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pylibfreenect2/libfreenect2.pyx":962
 * 
 * 
 * def setGlobalLogger(Logger logger=None):             # <<<<<<<<<<<<<<
 *     """Same as ``void libfreenect2::getGlobalLogger(Logger*)``
 * 
 */
  __pyx_t_4 = PyCFunction_NewEx(&__pyx_mdef_14pylibfreenect2_12libfreenect2_7setGlobalLogger, NULL, __pyx_n_s_pylibfreenect2_libfreenect2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setGlobalLogger, __pyx_t_4) < 0) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pylibfreenect2/libfreenect2.pyx":1
 * # coding: utf-8             # <<<<<<<<<<<<<<
 * # cython: boundscheck=True, wraparound=True
 * 
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_4) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pylibfreenect2.libfreenect2", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pylibfreenect2.libfreenect2");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyObjectCall */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
  #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyCFunctionFastCall */
  #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* BytesEquals */
    static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
    static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* ArgTypeTest */
    static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* IsLittleEndian */
    static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
    static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
      static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((unsigned)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* BufferIndexError */
      static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* KeywordStringCheck */
      static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseTooManyValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
      static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* SaveResetException */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
      #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
      #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SetVTable */
        static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
        static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* Import */
        static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
        static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
        static int __Pyx_CLineForTraceback(int c_line) {
#ifdef CYTHON_CLINE_IN_TRACEBACK
    return ((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0;
#else
    PyObject *use_cline;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = PyDict_GetItem(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *ptype, *pvalue, *ptraceback;
      PyObject *use_cline_obj;
      PyErr_Fetch(&ptype, &pvalue, &ptraceback);
      use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        use_cline = NULL;
      }
      PyErr_Restore(ptype, pvalue, ptraceback);
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    return c_line;
#endif
}

/* CodeObjectCache */
        static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
        #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        __Pyx_PyThreadState_Current, /*PyThreadState *tstate,*/
        py_code,                     /*PyCodeObject *code,*/
        __pyx_d,              /*PyObject *globals,*/
        0                            /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
        else if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view);
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


        /* CIntFromPyVerify */
        #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value) {
    const uint32_t neg_one = (uint32_t) -1, const_zero = (uint32_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint32_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint32_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__libfreenect2_3a__3a_Frame_3a__3a_Type(enum libfreenect2::Frame::Type value) {
    const enum libfreenect2::Frame::Type neg_one = (enum libfreenect2::Frame::Type) -1, const_zero = (enum libfreenect2::Frame::Type) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum libfreenect2::Frame::Type) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum libfreenect2::Frame::Type) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum libfreenect2::Frame::Type) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum libfreenect2::Frame::Type) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum libfreenect2::Frame::Type) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum libfreenect2::Frame::Type),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value) {
    const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Py_intptr_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(Py_intptr_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(Py_intptr_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Py_intptr_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint8_t(uint8_t value) {
    const uint8_t neg_one = (uint8_t) -1, const_zero = (uint8_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint8_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint8_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint8_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint8_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint8_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint8_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__libfreenect2_3a__3a_Logger_3a__3a_Level(enum libfreenect2::Logger::Level value) {
    const enum libfreenect2::Logger::Level neg_one = (enum libfreenect2::Logger::Level) -1, const_zero = (enum libfreenect2::Logger::Level) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum libfreenect2::Logger::Level) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum libfreenect2::Logger::Level) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum libfreenect2::Logger::Level) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum libfreenect2::Logger::Level) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum libfreenect2::Logger::Level) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum libfreenect2::Logger::Level),
                                     little, !is_unsigned);
    }
}

/* Declarations */
        #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
        #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0, -1);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
        #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
        #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0, -1);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
        static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE enum libfreenect2::Frame::Type __Pyx_PyInt_As_enum__libfreenect2_3a__3a_Frame_3a__3a_Type(PyObject *x) {
    const enum libfreenect2::Frame::Type neg_one = (enum libfreenect2::Frame::Type) -1, const_zero = (enum libfreenect2::Frame::Type) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum libfreenect2::Frame::Type) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum libfreenect2::Frame::Type, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum libfreenect2::Frame::Type) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum libfreenect2::Frame::Type) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum libfreenect2::Frame::Type, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum libfreenect2::Frame::Type) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum libfreenect2::Frame::Type, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum libfreenect2::Frame::Type) >= 2 * PyLong_SHIFT) {
                            return (enum libfreenect2::Frame::Type) (((((enum libfreenect2::Frame::Type)digits[1]) << PyLong_SHIFT) | (enum libfreenect2::Frame::Type)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum libfreenect2::Frame::Type) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum libfreenect2::Frame::Type, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum libfreenect2::Frame::Type) >= 3 * PyLong_SHIFT) {
                            return (enum libfreenect2::Frame::Type) (((((((enum libfreenect2::Frame::Type)digits[2]) << PyLong_SHIFT) | (enum libfreenect2::Frame::Type)digits[1]) << PyLong_SHIFT) | (enum libfreenect2::Frame::Type)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum libfreenect2::Frame::Type) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum libfreenect2::Frame::Type, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum libfreenect2::Frame::Type) >= 4 * PyLong_SHIFT) {
                            return (enum libfreenect2::Frame::Type) (((((((((enum libfreenect2::Frame::Type)digits[3]) << PyLong_SHIFT) | (enum libfreenect2::Frame::Type)digits[2]) << PyLong_SHIFT) | (enum libfreenect2::Frame::Type)digits[1]) << PyLong_SHIFT) | (enum libfreenect2::Frame::Type)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum libfreenect2::Frame::Type) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum libfreenect2::Frame::Type) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum libfreenect2::Frame::Type, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum libfreenect2::Frame::Type) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum libfreenect2::Frame::Type, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum libfreenect2::Frame::Type) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum libfreenect2::Frame::Type, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum libfreenect2::Frame::Type,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum libfreenect2::Frame::Type) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum libfreenect2::Frame::Type, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum libfreenect2::Frame::Type) - 1 > 2 * PyLong_SHIFT) {
                            return (enum libfreenect2::Frame::Type) (((enum libfreenect2::Frame::Type)-1)*(((((enum libfreenect2::Frame::Type)digits[1]) << PyLong_SHIFT) | (enum libfreenect2::Frame::Type)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum libfreenect2::Frame::Type) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum libfreenect2::Frame::Type, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum libfreenect2::Frame::Type) - 1 > 2 * PyLong_SHIFT) {
                            return (enum libfreenect2::Frame::Type) ((((((enum libfreenect2::Frame::Type)digits[1]) << PyLong_SHIFT) | (enum libfreenect2::Frame::Type)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum libfreenect2::Frame::Type) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum libfreenect2::Frame::Type, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum libfreenect2::Frame::Type) - 1 > 3 * PyLong_SHIFT) {
                            return (enum libfreenect2::Frame::Type) (((enum libfreenect2::Frame::Type)-1)*(((((((enum libfreenect2::Frame::Type)digits[2]) << PyLong_SHIFT) | (enum libfreenect2::Frame::Type)digits[1]) << PyLong_SHIFT) | (enum libfreenect2::Frame::Type)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum libfreenect2::Frame::Type) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum libfreenect2::Frame::Type, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum libfreenect2::Frame::Type) - 1 > 3 * PyLong_SHIFT) {
                            return (enum libfreenect2::Frame::Type) ((((((((enum libfreenect2::Frame::Type)digits[2]) << PyLong_SHIFT) | (enum libfreenect2::Frame::Type)digits[1]) << PyLong_SHIFT) | (enum libfreenect2::Frame::Type)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum libfreenect2::Frame::Type) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum libfreenect2::Frame::Type, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum libfreenect2::Frame::Type) - 1 > 4 * PyLong_SHIFT) {
                            return (enum libfreenect2::Frame::Type) (((enum libfreenect2::Frame::Type)-1)*(((((((((enum libfreenect2::Frame::Type)digits[3]) << PyLong_SHIFT) | (enum libfreenect2::Frame::Type)digits[2]) << PyLong_SHIFT) | (enum libfreenect2::Frame::Type)digits[1]) << PyLong_SHIFT) | (enum libfreenect2::Frame::Type)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum libfreenect2::Frame::Type) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum libfreenect2::Frame::Type, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum libfreenect2::Frame::Type) - 1 > 4 * PyLong_SHIFT) {
                            return (enum libfreenect2::Frame::Type) ((((((((((enum libfreenect2::Frame::Type)digits[3]) << PyLong_SHIFT) | (enum libfreenect2::Frame::Type)digits[2]) << PyLong_SHIFT) | (enum libfreenect2::Frame::Type)digits[1]) << PyLong_SHIFT) | (enum libfreenect2::Frame::Type)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum libfreenect2::Frame::Type) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum libfreenect2::Frame::Type, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum libfreenect2::Frame::Type) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum libfreenect2::Frame::Type, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum libfreenect2::Frame::Type val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum libfreenect2::Frame::Type) -1;
        }
    } else {
        enum libfreenect2::Frame::Type val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum libfreenect2::Frame::Type) -1;
        val = __Pyx_PyInt_As_enum__libfreenect2_3a__3a_Frame_3a__3a_Type(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum libfreenect2::Frame::Type");
    return (enum libfreenect2::Frame::Type) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum libfreenect2::Frame::Type");
    return (enum libfreenect2::Frame::Type) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE enum libfreenect2::Logger::Level __Pyx_PyInt_As_enum__libfreenect2_3a__3a_Logger_3a__3a_Level(PyObject *x) {
    const enum libfreenect2::Logger::Level neg_one = (enum libfreenect2::Logger::Level) -1, const_zero = (enum libfreenect2::Logger::Level) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum libfreenect2::Logger::Level) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum libfreenect2::Logger::Level, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum libfreenect2::Logger::Level) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum libfreenect2::Logger::Level) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum libfreenect2::Logger::Level, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum libfreenect2::Logger::Level) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum libfreenect2::Logger::Level, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum libfreenect2::Logger::Level) >= 2 * PyLong_SHIFT) {
                            return (enum libfreenect2::Logger::Level) (((((enum libfreenect2::Logger::Level)digits[1]) << PyLong_SHIFT) | (enum libfreenect2::Logger::Level)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum libfreenect2::Logger::Level) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum libfreenect2::Logger::Level, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum libfreenect2::Logger::Level) >= 3 * PyLong_SHIFT) {
                            return (enum libfreenect2::Logger::Level) (((((((enum libfreenect2::Logger::Level)digits[2]) << PyLong_SHIFT) | (enum libfreenect2::Logger::Level)digits[1]) << PyLong_SHIFT) | (enum libfreenect2::Logger::Level)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum libfreenect2::Logger::Level) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum libfreenect2::Logger::Level, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum libfreenect2::Logger::Level) >= 4 * PyLong_SHIFT) {
                            return (enum libfreenect2::Logger::Level) (((((((((enum libfreenect2::Logger::Level)digits[3]) << PyLong_SHIFT) | (enum libfreenect2::Logger::Level)digits[2]) << PyLong_SHIFT) | (enum libfreenect2::Logger::Level)digits[1]) << PyLong_SHIFT) | (enum libfreenect2::Logger::Level)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum libfreenect2::Logger::Level) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum libfreenect2::Logger::Level) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum libfreenect2::Logger::Level, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum libfreenect2::Logger::Level) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum libfreenect2::Logger::Level, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum libfreenect2::Logger::Level) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum libfreenect2::Logger::Level, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum libfreenect2::Logger::Level,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum libfreenect2::Logger::Level) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum libfreenect2::Logger::Level, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum libfreenect2::Logger::Level) - 1 > 2 * PyLong_SHIFT) {
                            return (enum libfreenect2::Logger::Level) (((enum libfreenect2::Logger::Level)-1)*(((((enum libfreenect2::Logger::Level)digits[1]) << PyLong_SHIFT) | (enum libfreenect2::Logger::Level)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum libfreenect2::Logger::Level) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum libfreenect2::Logger::Level, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum libfreenect2::Logger::Level) - 1 > 2 * PyLong_SHIFT) {
                            return (enum libfreenect2::Logger::Level) ((((((enum libfreenect2::Logger::Level)digits[1]) << PyLong_SHIFT) | (enum libfreenect2::Logger::Level)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum libfreenect2::Logger::Level) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum libfreenect2::Logger::Level, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum libfreenect2::Logger::Level) - 1 > 3 * PyLong_SHIFT) {
                            return (enum libfreenect2::Logger::Level) (((enum libfreenect2::Logger::Level)-1)*(((((((enum libfreenect2::Logger::Level)digits[2]) << PyLong_SHIFT) | (enum libfreenect2::Logger::Level)digits[1]) << PyLong_SHIFT) | (enum libfreenect2::Logger::Level)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum libfreenect2::Logger::Level) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum libfreenect2::Logger::Level, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum libfreenect2::Logger::Level) - 1 > 3 * PyLong_SHIFT) {
                            return (enum libfreenect2::Logger::Level) ((((((((enum libfreenect2::Logger::Level)digits[2]) << PyLong_SHIFT) | (enum libfreenect2::Logger::Level)digits[1]) << PyLong_SHIFT) | (enum libfreenect2::Logger::Level)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum libfreenect2::Logger::Level) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum libfreenect2::Logger::Level, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum libfreenect2::Logger::Level) - 1 > 4 * PyLong_SHIFT) {
                            return (enum libfreenect2::Logger::Level) (((enum libfreenect2::Logger::Level)-1)*(((((((((enum libfreenect2::Logger::Level)digits[3]) << PyLong_SHIFT) | (enum libfreenect2::Logger::Level)digits[2]) << PyLong_SHIFT) | (enum libfreenect2::Logger::Level)digits[1]) << PyLong_SHIFT) | (enum libfreenect2::Logger::Level)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum libfreenect2::Logger::Level) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum libfreenect2::Logger::Level, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum libfreenect2::Logger::Level) - 1 > 4 * PyLong_SHIFT) {
                            return (enum libfreenect2::Logger::Level) ((((((((((enum libfreenect2::Logger::Level)digits[3]) << PyLong_SHIFT) | (enum libfreenect2::Logger::Level)digits[2]) << PyLong_SHIFT) | (enum libfreenect2::Logger::Level)digits[1]) << PyLong_SHIFT) | (enum libfreenect2::Logger::Level)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum libfreenect2::Logger::Level) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum libfreenect2::Logger::Level, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum libfreenect2::Logger::Level) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum libfreenect2::Logger::Level, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum libfreenect2::Logger::Level val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum libfreenect2::Logger::Level) -1;
        }
    } else {
        enum libfreenect2::Logger::Level val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum libfreenect2::Logger::Level) -1;
        val = __Pyx_PyInt_As_enum__libfreenect2_3a__3a_Logger_3a__3a_Level(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum libfreenect2::Logger::Level");
    return (enum libfreenect2::Logger::Level) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum libfreenect2::Logger::Level");
    return (enum libfreenect2::Logger::Level) -1;
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
        static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
        #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
        static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
        #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
        #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
        static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            PyErr_Clear();
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
